/* ========================================================================
 * Copyright (c) 2005-2021 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;

namespace Opc.Ua
{
    #region ServerObjectState Class
    #if (!OPCUA_EXCLUDE_ServerObjectState)
    /// <summary>
    /// Stores an instance of the ServerType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerObjectState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerObjectState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (EstimatedReturnTime != null)
            {
                EstimatedReturnTime.Initialize(context, EstimatedReturnTime_InitializationString);
            }

            if (Namespaces != null)
            {
                Namespaces.Initialize(context, Namespaces_InitializationString);
            }

            if (GetMonitoredItems != null)
            {
                GetMonitoredItems.Initialize(context, GetMonitoredItems_InitializationString);
            }

            if (ResendData != null)
            {
                ResendData.Initialize(context, ResendData_InitializationString);
            }

            if (SetSubscriptionDurable != null)
            {
                SetSubscriptionDurable.Initialize(context, SetSubscriptionDurable_InitializationString);
            }

            if (RequestServerStateChange != null)
            {
                RequestServerStateChange.Initialize(context, RequestServerStateChange_InitializationString);
            }
        }

        #region Initialization String
        private const string EstimatedReturnTime_InitializationString =
           "//////////8VcIkKAgAAAAAAEwAAAEVzdGltYXRlZFJldHVyblRpbWUBAFIyAC4ARFIyAAAADf////8B" +
           "AQAAAAAAQI9A/////wAAAAA=";

        private const string Namespaces_InitializationString =
           "//////////8EYIAKAQAAAAAACgAAAE5hbWVzcGFjZXMBAActAC8BAH0tBy0AAP////8AAAAA";

        private const string GetMonitoredItems_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAEdldE1vbml0b3JlZEl0ZW1zAQDhLAAvAQDhLOEsAAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4iwALgBE4iwAAJYBAAAAAQAqAQEdAAAADgAA" +
           "AFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQDjLAAuAETjLAAAlgIAAAABACoBASAAAAANAAAAU2VydmVySGFu" +
           "ZGxlcwAHAQAAAAEAAAAAAAAAAAEAKgEBIAAAAA0AAABDbGllbnRIYW5kbGVzAAcBAAAAAQAAAAAAAAAA" +
           "AQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string ResendData_InitializationString =
           "//////////8EYYIKBAAAAAAACgAAAFJlc2VuZERhdGEBAEcyAC8BAEcyRzIAAAEB/////wEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBIMgAuAERIMgAAlgEAAAABACoBAR0AAAAOAAAAU3Vic2Ny" +
           "aXB0aW9uSWQAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string SetSubscriptionDurable_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGUBAMoxAC8BAMoxyjEAAAEB" +
           "/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDLMQAuAETLMQAAlgIAAAABACoBAR0A" +
           "AAAOAAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKgEBHgAAAA8AAABMaWZldGltZUluSG91cnMA" +
           "B/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1" +
           "bWVudHMBAMwxAC4ARMwxAACWAQAAAAEAKgEBJQAAABYAAABSZXZpc2VkTGlmZXRpbWVJbkhvdXJzAAf/" +
           "////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string RequestServerStateChange_InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZQEAUzIALwEAUzJTMgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFQyAC4ARFQyAACWBQAAAAEAKgEB" +
           "FgAAAAUAAABTdGF0ZQEAVAP/////AAAAAAABACoBASIAAAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQAN" +
           "/////wAAAAAAAQAqAQEiAAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24AB/////8AAAAAAAEAKgEBFQAA" +
           "AAYAAABSZWFzb24AFf////8AAAAAAAEAKgEBFgAAAAcAAABSZXN0YXJ0AAH/////AAAAAAABACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEgAAAFNlcnZlclR5cGVJbnN0YW5jZQEA1AcBANQH1AcAAP////8PAAAA" +
           "F3CJCgIAAAAAAAsAAABTZXJ2ZXJBcnJheQEA1QcALgBE1QcAAAAMAQAAAAEAAAAAAAAAAQEAAAAAAECP" +
           "QP////8AAAAAF3CJCgIAAAAAAA4AAABOYW1lc3BhY2VBcnJheQEA1gcALgBE1gcAAAAMAQAAAAEAAAAA" +
           "AAAAAQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAAAwAAABTZXJ2ZXJTdGF0dXMBANcHAC8BAFoI1wcA" +
           "AAEAXgP/////AQEAAAAAAECPQP////8GAAAAFWCJCgIAAAAAAAkAAABTdGFydFRpbWUBAAIMAC8APwIM" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEN1cnJlbnRUaW1lAQADDAAvAD8DDAAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAUAAABTdGF0ZQEABAwALwA/BAwAAAEAVAP/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAAQnVpbGRJbmZvAQAFDAAvAQDrCwUMAAABAFIB/////wEB/////wYAAAAV" +
           "cIkKAgAAAAAACgAAAFByb2R1Y3RVcmkBAAYMAC8APwYMAAAADP////8BAQAAAAAAQI9A/////wAAAAAV" +
           "cIkKAgAAAAAAEAAAAE1hbnVmYWN0dXJlck5hbWUBAAcMAC8APwcMAAAADP////8BAQAAAAAAQI9A////" +
           "/wAAAAAVcIkKAgAAAAAACwAAAFByb2R1Y3ROYW1lAQAIDAAvAD8IDAAAAAz/////AQEAAAAAAECPQP//" +
           "//8AAAAAFXCJCgIAAAAAAA8AAABTb2Z0d2FyZVZlcnNpb24BAAkMAC8APwkMAAAADP////8BAQAAAAAA" +
           "QI9A/////wAAAAAVcIkKAgAAAAAACwAAAEJ1aWxkTnVtYmVyAQAKDAAvAD8KDAAAAAz/////AQEAAAAA" +
           "AECPQP////8AAAAAFXCJCgIAAAAAAAkAAABCdWlsZERhdGUBAAsMAC8APwsMAAABACYB/////wEBAAAA" +
           "AABAj0D/////AAAAABVgiQoCAAAAAAATAAAAU2Vjb25kc1RpbGxTaHV0ZG93bgEADAwALwA/DAwAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFNodXRkb3duUmVhc29uAQANDAAvAD8NDAAAABX/////" +
           "AQH/////AAAAABVwiQoCAAAAAAAMAAAAU2VydmljZUxldmVsAQDYBwAuAETYBwAAAAP/////AQEAAAAA" +
           "AECPQP////8AAAAAFXCJCgIAAAAAAAgAAABBdWRpdGluZwEAtgoALgBEtgoAAAAB/////wEBAAAAAABA" +
           "j0D/////AAAAABVwiQoCAAAAAAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQEAUjIALgBEUjIAAAAN////" +
           "/wEBAAAAAABAj0D/////AAAAAARggAoBAAAAAAASAAAAU2VydmVyQ2FwYWJpbGl0aWVzAQDZBwAvAQDd" +
           "B9kHAAD/////CQAAABdgiQoCAAAAAAASAAAAU2VydmVyUHJvZmlsZUFycmF5AQAODAAuAEQODAAAAAwB" +
           "AAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAAA0AAABMb2NhbGVJZEFycmF5AQAPDAAuAEQPDAAA" +
           "AQAnAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAFgAAAE1pblN1cHBvcnRlZFNhbXBsZVJh" +
           "dGUBABAMAC4ARBAMAAABACIB/////wEB/////wAAAAAVYIkKAgAAAAAAGwAAAE1heEJyb3dzZUNvbnRp" +
           "bnVhdGlvblBvaW50cwEAEQwALgBEEQwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAGgAAAE1heFF1" +
           "ZXJ5Q29udGludWF0aW9uUG9pbnRzAQASDAAuAEQSDAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAc" +
           "AAAATWF4SGlzdG9yeUNvbnRpbnVhdGlvblBvaW50cwEAEwwALgBEEwwAAAAF/////wEB/////wAAAAAX" +
           "YIkKAgAAAAAAFAAAAFNvZnR3YXJlQ2VydGlmaWNhdGVzAQAUDAAuAEQUDAAAAQBYAQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAEYIAKAQAAAAAADgAAAE1vZGVsbGluZ1J1bGVzAQAVDAAvAD0VDAAA/////wAAAAAE" +
           "YIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAFgwALwA9FgwAAP////8AAAAABGCACgEAAAAA" +
           "ABEAAABTZXJ2ZXJEaWFnbm9zdGljcwEA2gcALwEA5AfaBwAA/////wQAAAAVYIkKAgAAAAAAGAAAAFNl" +
           "cnZlckRpYWdub3N0aWNzU3VtbWFyeQEAFwwALwEAZggXDAAAAQBbA/////8BAf////8MAAAAFWCJCgIA" +
           "AAAAAA8AAABTZXJ2ZXJWaWV3Q291bnQBABgMAC8APxgMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABMAAABDdXJyZW50U2Vzc2lvbkNvdW50AQAZDAAvAD8ZDAAAAAf/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAVAAAAQ3VtdWxhdGVkU2Vzc2lvbkNvdW50AQAaDAAvAD8aDAAAAAf/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAcAAAAU2VjdXJpdHlSZWplY3RlZFNlc3Npb25Db3VudAEAGwwALwA/GwwAAAAH/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAFAAAAFJlamVjdGVkU2Vzc2lvbkNvdW50AQAcDAAvAD8cDAAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAATAAAAU2Vzc2lvblRpbWVvdXRDb3VudAEAHQwALwA/HQwAAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEQAAAFNlc3Npb25BYm9ydENvdW50AQAeDAAvAD8eDAAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAXAAAAUHVibGlzaGluZ0ludGVydmFsQ291bnQBACAMAC8APyAMAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABgAAABDdXJyZW50U3Vic2NyaXB0aW9uQ291bnQBACEMAC8APyEM" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABDdW11bGF0ZWRTdWJzY3JpcHRpb25Db3VudAEA" +
           "IgwALwA/IgwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHQAAAFNlY3VyaXR5UmVqZWN0ZWRSZXF1" +
           "ZXN0c0NvdW50AQAjDAAvAD8jDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAUmVqZWN0ZWRS" +
           "ZXF1ZXN0c0NvdW50AQAkDAAvAD8kDAAAAAf/////AQH/////AAAAABdgiQoCAAAAAAAcAAAAU3Vic2Ny" +
           "aXB0aW9uRGlhZ25vc3RpY3NBcnJheQEAJgwALwEAewgmDAAAAQBqAwEAAAABAAAAAAAAAAEB/////wAA" +
           "AAAEYIAKAQAAAAAAGgAAAFNlc3Npb25zRGlhZ25vc3RpY3NTdW1tYXJ5AQAnDAAvAQDqBycMAAD/////" +
           "AgAAABdgiQoCAAAAAAAXAAAAU2Vzc2lvbkRpYWdub3N0aWNzQXJyYXkBACgMAC8BAJQIKAwAAAEAYQMB" +
           "AAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAAB8AAABTZXNzaW9uU2VjdXJpdHlEaWFnbm9zdGlj" +
           "c0FycmF5AQApDAAvAQDDCCkMAAABAGQDAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "RW5hYmxlZEZsYWcBACoMAC4ARCoMAAAAAf////8DA/////8AAAAABGCACgEAAAAAABAAAABWZW5kb3JT" +
           "ZXJ2ZXJJbmZvAQDbBwAvAQDxB9sHAAD/////AAAAAARggAoBAAAAAAAQAAAAU2VydmVyUmVkdW5kYW5j" +
           "eQEA3AcALwEA8gfcBwAA/////wEAAAAVYIkKAgAAAAAAEQAAAFJlZHVuZGFuY3lTdXBwb3J0AQArDAAu" +
           "AEQrDAAAAQBTA/////8BAf////8AAAAABGCACgEAAAAAAAoAAABOYW1lc3BhY2VzAQAHLQAvAQB9LQct" +
           "AAD/////AAAAAARhggoEAAAAAAARAAAAR2V0TW9uaXRvcmVkSXRlbXMBAOEsAC8BAOEs4SwAAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDiLAAuAETiLAAAlgEAAAABACoBAR0AAAAO" +
           "AAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOMsAC4AROMsAACWAgAAAAEAKgEBIAAAAA0AAABTZXJ2ZXJI" +
           "YW5kbGVzAAcBAAAAAQAAAAAAAAAAAQAqAQEgAAAADQAAAENsaWVudEhhbmRsZXMABwEAAAABAAAAAAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAKAAAAUmVzZW5kRGF0YQEARzIALwEA" +
           "RzJHMgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEgyAC4AREgyAACWAQAA" +
           "AAEAKgEBHQAAAA4AAABTdWJzY3JpcHRpb25JZAAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAAFgAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGUBAMoxAC8BAMoxyjEAAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDLMQAuAETLMQAAlgIAAAABACoBAR0AAAAO" +
           "AAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKgEBHgAAAA8AAABMaWZldGltZUluSG91cnMAB///" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBAMwxAC4ARMwxAACWAQAAAAEAKgEBJQAAABYAAABSZXZpc2VkTGlmZXRpbWVJbkhvdXJzAAf/////" +
           "AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAYAAAAUmVxdWVzdFNlcnZlclN0" +
           "YXRlQ2hhbmdlAQBTMgAvAQBTMlMyAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAVDIALgBEVDIAAJYFAAAAAQAqAQEWAAAABQAAAFN0YXRlAQBUA/////8AAAAAAAEAKgEBIgAAABMA" +
           "AABFc3RpbWF0ZWRSZXR1cm5UaW1lAA3/////AAAAAAABACoBASIAAAATAAAAU2Vjb25kc1RpbGxTaHV0" +
           "ZG93bgAH/////wAAAAAAAQAqAQEVAAAABgAAAFJlYXNvbgAV/////wAAAAAAAQAqAQEWAAAABwAAAFJl" +
           "c3RhcnQAAf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerArray
        {
            get
            {
                return m_serverArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> NamespaceArray
        {
            get
            {
                return m_namespaceArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceArray = value;
            }
        }

        /// <remarks />
        public ServerStatusState ServerStatus
        {
            get
            {
                return m_serverStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverStatus = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> ServiceLevel
        {
            get
            {
                return m_serviceLevel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceLevel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceLevel = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Auditing
        {
            get
            {
                return m_auditing;
            }

            set
            {
                if (!Object.ReferenceEquals(m_auditing, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_auditing = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EstimatedReturnTime
        {
            get
            {
                return m_estimatedReturnTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_estimatedReturnTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_estimatedReturnTime = value;
            }
        }

        /// <remarks />
        public ServerCapabilitiesState ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public ServerDiagnosticsState ServerDiagnostics
        {
            get
            {
                return m_serverDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnostics = value;
            }
        }

        /// <remarks />
        public VendorServerInfoState VendorServerInfo
        {
            get
            {
                return m_vendorServerInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vendorServerInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vendorServerInfo = value;
            }
        }

        /// <remarks />
        public ServerRedundancyState ServerRedundancy
        {
            get
            {
                return m_serverRedundancy;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverRedundancy, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverRedundancy = value;
            }
        }

        /// <remarks />
        public NamespacesState Namespaces
        {
            get
            {
                return m_namespaces;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaces, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaces = value;
            }
        }

        /// <remarks />
        public GetMonitoredItemsMethodState GetMonitoredItems
        {
            get
            {
                return m_getMonitoredItemsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getMonitoredItemsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getMonitoredItemsMethod = value;
            }
        }

        /// <remarks />
        public ResendDataMethodState ResendData
        {
            get
            {
                return m_resendDataMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resendDataMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resendDataMethod = value;
            }
        }

        /// <remarks />
        public SetSubscriptionDurableMethodState SetSubscriptionDurable
        {
            get
            {
                return m_setSubscriptionDurableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setSubscriptionDurableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setSubscriptionDurableMethod = value;
            }
        }

        /// <remarks />
        public RequestServerStateChangeMethodState RequestServerStateChange
        {
            get
            {
                return m_requestServerStateChangeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestServerStateChangeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestServerStateChangeMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverArray != null)
            {
                children.Add(m_serverArray);
            }

            if (m_namespaceArray != null)
            {
                children.Add(m_namespaceArray);
            }

            if (m_serverStatus != null)
            {
                children.Add(m_serverStatus);
            }

            if (m_serviceLevel != null)
            {
                children.Add(m_serviceLevel);
            }

            if (m_auditing != null)
            {
                children.Add(m_auditing);
            }

            if (m_estimatedReturnTime != null)
            {
                children.Add(m_estimatedReturnTime);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_serverDiagnostics != null)
            {
                children.Add(m_serverDiagnostics);
            }

            if (m_vendorServerInfo != null)
            {
                children.Add(m_vendorServerInfo);
            }

            if (m_serverRedundancy != null)
            {
                children.Add(m_serverRedundancy);
            }

            if (m_namespaces != null)
            {
                children.Add(m_namespaces);
            }

            if (m_getMonitoredItemsMethod != null)
            {
                children.Add(m_getMonitoredItemsMethod);
            }

            if (m_resendDataMethod != null)
            {
                children.Add(m_resendDataMethod);
            }

            if (m_setSubscriptionDurableMethod != null)
            {
                children.Add(m_setSubscriptionDurableMethod);
            }

            if (m_requestServerStateChangeMethod != null)
            {
                children.Add(m_requestServerStateChangeMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerArray;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceArray:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceArray == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                NamespaceArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = NamespaceArray;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerStatus:
                {
                    if (createOrReplace)
                    {
                        if (ServerStatus == null)
                        {
                            if (replacement == null)
                            {
                                ServerStatus = new ServerStatusState(this);
                            }
                            else
                            {
                                ServerStatus = (ServerStatusState)replacement;
                            }
                        }
                    }

                    instance = ServerStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.ServiceLevel:
                {
                    if (createOrReplace)
                    {
                        if (ServiceLevel == null)
                        {
                            if (replacement == null)
                            {
                                ServiceLevel = new PropertyState<byte>(this);
                            }
                            else
                            {
                                ServiceLevel = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = ServiceLevel;
                    break;
                }

                case Opc.Ua.BrowseNames.Auditing:
                {
                    if (createOrReplace)
                    {
                        if (Auditing == null)
                        {
                            if (replacement == null)
                            {
                                Auditing = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Auditing = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Auditing;
                    break;
                }

                case Opc.Ua.BrowseNames.EstimatedReturnTime:
                {
                    if (createOrReplace)
                    {
                        if (EstimatedReturnTime == null)
                        {
                            if (replacement == null)
                            {
                                EstimatedReturnTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EstimatedReturnTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EstimatedReturnTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new ServerCapabilitiesState(this);
                            }
                            else
                            {
                                ServerCapabilities = (ServerCapabilitiesState)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnostics = new ServerDiagnosticsState(this);
                            }
                            else
                            {
                                ServerDiagnostics = (ServerDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.VendorServerInfo:
                {
                    if (createOrReplace)
                    {
                        if (VendorServerInfo == null)
                        {
                            if (replacement == null)
                            {
                                VendorServerInfo = new VendorServerInfoState(this);
                            }
                            else
                            {
                                VendorServerInfo = (VendorServerInfoState)replacement;
                            }
                        }
                    }

                    instance = VendorServerInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerRedundancy:
                {
                    if (createOrReplace)
                    {
                        if (ServerRedundancy == null)
                        {
                            if (replacement == null)
                            {
                                ServerRedundancy = new ServerRedundancyState(this);
                            }
                            else
                            {
                                ServerRedundancy = (ServerRedundancyState)replacement;
                            }
                        }
                    }

                    instance = ServerRedundancy;
                    break;
                }

                case Opc.Ua.BrowseNames.Namespaces:
                {
                    if (createOrReplace)
                    {
                        if (Namespaces == null)
                        {
                            if (replacement == null)
                            {
                                Namespaces = new NamespacesState(this);
                            }
                            else
                            {
                                Namespaces = (NamespacesState)replacement;
                            }
                        }
                    }

                    instance = Namespaces;
                    break;
                }

                case Opc.Ua.BrowseNames.GetMonitoredItems:
                {
                    if (createOrReplace)
                    {
                        if (GetMonitoredItems == null)
                        {
                            if (replacement == null)
                            {
                                GetMonitoredItems = new GetMonitoredItemsMethodState(this);
                            }
                            else
                            {
                                GetMonitoredItems = (GetMonitoredItemsMethodState)replacement;
                            }
                        }
                    }

                    instance = GetMonitoredItems;
                    break;
                }

                case Opc.Ua.BrowseNames.ResendData:
                {
                    if (createOrReplace)
                    {
                        if (ResendData == null)
                        {
                            if (replacement == null)
                            {
                                ResendData = new ResendDataMethodState(this);
                            }
                            else
                            {
                                ResendData = (ResendDataMethodState)replacement;
                            }
                        }
                    }

                    instance = ResendData;
                    break;
                }

                case Opc.Ua.BrowseNames.SetSubscriptionDurable:
                {
                    if (createOrReplace)
                    {
                        if (SetSubscriptionDurable == null)
                        {
                            if (replacement == null)
                            {
                                SetSubscriptionDurable = new SetSubscriptionDurableMethodState(this);
                            }
                            else
                            {
                                SetSubscriptionDurable = (SetSubscriptionDurableMethodState)replacement;
                            }
                        }
                    }

                    instance = SetSubscriptionDurable;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestServerStateChange:
                {
                    if (createOrReplace)
                    {
                        if (RequestServerStateChange == null)
                        {
                            if (replacement == null)
                            {
                                RequestServerStateChange = new RequestServerStateChangeMethodState(this);
                            }
                            else
                            {
                                RequestServerStateChange = (RequestServerStateChangeMethodState)replacement;
                            }
                        }
                    }

                    instance = RequestServerStateChange;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverArray;
        private PropertyState<string[]> m_namespaceArray;
        private ServerStatusState m_serverStatus;
        private PropertyState<byte> m_serviceLevel;
        private PropertyState<bool> m_auditing;
        private PropertyState<DateTime> m_estimatedReturnTime;
        private ServerCapabilitiesState m_serverCapabilities;
        private ServerDiagnosticsState m_serverDiagnostics;
        private VendorServerInfoState m_vendorServerInfo;
        private ServerRedundancyState m_serverRedundancy;
        private NamespacesState m_namespaces;
        private GetMonitoredItemsMethodState m_getMonitoredItemsMethod;
        private ResendDataMethodState m_resendDataMethod;
        private SetSubscriptionDurableMethodState m_setSubscriptionDurableMethod;
        private RequestServerStateChangeMethodState m_requestServerStateChangeMethod;
        #endregion
    }
    #endif
    #endregion

    #region ServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_ServerCapabilitiesState)
    /// <summary>
    /// Stores an instance of the ServerCapabilitiesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxArrayLength != null)
            {
                MaxArrayLength.Initialize(context, MaxArrayLength_InitializationString);
            }

            if (MaxStringLength != null)
            {
                MaxStringLength.Initialize(context, MaxStringLength_InitializationString);
            }

            if (MaxByteStringLength != null)
            {
                MaxByteStringLength.Initialize(context, MaxByteStringLength_InitializationString);
            }

            if (OperationLimits != null)
            {
                OperationLimits.Initialize(context, OperationLimits_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxArrayLength_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heEFycmF5TGVuZ3RoAQAdLQAuAEQdLQAAAAf/////AQH/////" +
           "AAAAAA==";

        private const string MaxStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFN0cmluZ0xlbmd0aAEAHi0ALgBEHi0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxByteStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAE1heEJ5dGVTdHJpbmdMZW5ndGgBAG4yAC4ARG4yAAAAB/////8B" +
           "Af////8AAAAA";

        private const string OperationLimits_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE9wZXJhdGlvbkxpbWl0cwEAHy0ALwEALC0fLQAA/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFNlcnZlckNhcGFiaWxpdGllc1R5cGVJbnN0YW5jZQEA3QcBAN0H" +
           "3QcAAP////8NAAAAF2CJCgIAAAAAABIAAABTZXJ2ZXJQcm9maWxlQXJyYXkBAN4HAC4ARN4HAAAADAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAADQAAAExvY2FsZUlkQXJyYXkBAOAHAC4AROAHAAAB" +
           "ACcBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAWAAAATWluU3VwcG9ydGVkU2FtcGxlUmF0" +
           "ZQEA4QcALgBE4QcAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAbAAAATWF4QnJvd3NlQ29udGlu" +
           "dWF0aW9uUG9pbnRzAQCsCgAuAESsCgAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAaAAAATWF4UXVl" +
           "cnlDb250aW51YXRpb25Qb2ludHMBAK0KAC4ARK0KAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABwA" +
           "AABNYXhIaXN0b3J5Q29udGludWF0aW9uUG9pbnRzAQCuCgAuAESuCgAAAAX/////AQH/////AAAAABdg" +
           "iQoCAAAAAAAUAAAAU29mdHdhcmVDZXJ0aWZpY2F0ZXMBAOkLAC4AROkLAAABAFgBAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABVgiQoCAAAAAAAOAAAATWF4QXJyYXlMZW5ndGgBAB0tAC4ARB0tAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAA8AAABNYXhTdHJpbmdMZW5ndGgBAB4tAC4ARB4tAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABMAAABNYXhCeXRlU3RyaW5nTGVuZ3RoAQBuMgAuAERuMgAAAAf/////AQH/////" +
           "AAAAAARggAoBAAAAAAAPAAAAT3BlcmF0aW9uTGltaXRzAQAfLQAvAQAsLR8tAAD/////AAAAAARggAoB" +
           "AAAAAAAOAAAATW9kZWxsaW5nUnVsZXMBAOMHAC8APeMHAAD/////AAAAAARggAoBAAAAAAASAAAAQWdn" +
           "cmVnYXRlRnVuY3Rpb25zAQDCCgAvAD3CCgAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerProfileArray
        {
            get
            {
                return m_serverProfileArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverProfileArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverProfileArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> LocaleIdArray
        {
            get
            {
                return m_localeIdArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIdArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIdArray = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinSupportedSampleRate
        {
            get
            {
                return m_minSupportedSampleRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minSupportedSampleRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minSupportedSampleRate = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxBrowseContinuationPoints
        {
            get
            {
                return m_maxBrowseContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxBrowseContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxBrowseContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxQueryContinuationPoints
        {
            get
            {
                return m_maxQueryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxQueryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxQueryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxHistoryContinuationPoints
        {
            get
            {
                return m_maxHistoryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxHistoryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxHistoryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> SoftwareCertificates
        {
            get
            {
                return m_softwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxArrayLength
        {
            get
            {
                return m_maxArrayLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxArrayLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxArrayLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxStringLength
        {
            get
            {
                return m_maxStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxStringLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxByteStringLength
        {
            get
            {
                return m_maxByteStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxByteStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxByteStringLength = value;
            }
        }

        /// <remarks />
        public OperationLimitsState OperationLimits
        {
            get
            {
                return m_operationLimits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_operationLimits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_operationLimits = value;
            }
        }

        /// <remarks />
        public FolderState ModellingRules
        {
            get
            {
                return m_modellingRules;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modellingRules, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modellingRules = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverProfileArray != null)
            {
                children.Add(m_serverProfileArray);
            }

            if (m_localeIdArray != null)
            {
                children.Add(m_localeIdArray);
            }

            if (m_minSupportedSampleRate != null)
            {
                children.Add(m_minSupportedSampleRate);
            }

            if (m_maxBrowseContinuationPoints != null)
            {
                children.Add(m_maxBrowseContinuationPoints);
            }

            if (m_maxQueryContinuationPoints != null)
            {
                children.Add(m_maxQueryContinuationPoints);
            }

            if (m_maxHistoryContinuationPoints != null)
            {
                children.Add(m_maxHistoryContinuationPoints);
            }

            if (m_softwareCertificates != null)
            {
                children.Add(m_softwareCertificates);
            }

            if (m_maxArrayLength != null)
            {
                children.Add(m_maxArrayLength);
            }

            if (m_maxStringLength != null)
            {
                children.Add(m_maxStringLength);
            }

            if (m_maxByteStringLength != null)
            {
                children.Add(m_maxByteStringLength);
            }

            if (m_operationLimits != null)
            {
                children.Add(m_operationLimits);
            }

            if (m_modellingRules != null)
            {
                children.Add(m_modellingRules);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerProfileArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerProfileArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerProfileArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerProfileArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerProfileArray;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIdArray:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIdArray == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIdArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                LocaleIdArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIdArray;
                    break;
                }

                case Opc.Ua.BrowseNames.MinSupportedSampleRate:
                {
                    if (createOrReplace)
                    {
                        if (MinSupportedSampleRate == null)
                        {
                            if (replacement == null)
                            {
                                MinSupportedSampleRate = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinSupportedSampleRate = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinSupportedSampleRate;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxBrowseContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxBrowseContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxBrowseContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxBrowseContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxBrowseContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxQueryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxQueryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxQueryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxQueryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxQueryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxHistoryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxHistoryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxHistoryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxHistoryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxHistoryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                SoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = SoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxArrayLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxArrayLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxArrayLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxArrayLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxArrayLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxByteStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxByteStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxByteStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxByteStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxByteStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.OperationLimits:
                {
                    if (createOrReplace)
                    {
                        if (OperationLimits == null)
                        {
                            if (replacement == null)
                            {
                                OperationLimits = new OperationLimitsState(this);
                            }
                            else
                            {
                                OperationLimits = (OperationLimitsState)replacement;
                            }
                        }
                    }

                    instance = OperationLimits;
                    break;
                }

                case Opc.Ua.BrowseNames.ModellingRules:
                {
                    if (createOrReplace)
                    {
                        if (ModellingRules == null)
                        {
                            if (replacement == null)
                            {
                                ModellingRules = new FolderState(this);
                            }
                            else
                            {
                                ModellingRules = (FolderState)replacement;
                            }
                        }
                    }

                    instance = ModellingRules;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverProfileArray;
        private PropertyState<string[]> m_localeIdArray;
        private PropertyState<double> m_minSupportedSampleRate;
        private PropertyState<ushort> m_maxBrowseContinuationPoints;
        private PropertyState<ushort> m_maxQueryContinuationPoints;
        private PropertyState<ushort> m_maxHistoryContinuationPoints;
        private PropertyState<SignedSoftwareCertificate[]> m_softwareCertificates;
        private PropertyState<uint> m_maxArrayLength;
        private PropertyState<uint> m_maxStringLength;
        private PropertyState<uint> m_maxByteStringLength;
        private OperationLimitsState m_operationLimits;
        private FolderState m_modellingRules;
        private FolderState m_aggregateFunctions;
        #endregion
    }
    #endif
    #endregion

    #region ServerDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsState)
    /// <summary>
    /// Stores an instance of the ServerDiagnosticsType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SamplingIntervalDiagnosticsArray != null)
            {
                SamplingIntervalDiagnosticsArray.Initialize(context, SamplingIntervalDiagnosticsArray_InitializationString);
            }
        }

        #region Initialization String
        private const string SamplingIntervalDiagnosticsArray_InitializationString =
           "//////////8XYIkKAgAAAAAAIAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5AQDmBwAv" +
           "AQB0COYHAAABAFgDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFNlcnZlckRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQDkBwEA5Afk" +
           "BwAA/////wUAAAAVYIkKAgAAAAAAGAAAAFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeQEA5QcALwEAZgjl" +
           "BwAAAQBbA/////8BAf////8MAAAAFWCJCgIAAAAAAA8AAABTZXJ2ZXJWaWV3Q291bnQBACwMAC8APywM" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABDdXJyZW50U2Vzc2lvbkNvdW50AQAtDAAvAD8t" +
           "DAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAQ3VtdWxhdGVkU2Vzc2lvbkNvdW50AQAuDAAv" +
           "AD8uDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAAU2VjdXJpdHlSZWplY3RlZFNlc3Npb25D" +
           "b3VudAEALwwALwA/LwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFJlamVjdGVkU2Vzc2lv" +
           "bkNvdW50AQAwDAAvAD8wDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU2Vzc2lvblRpbWVv" +
           "dXRDb3VudAEAMQwALwA/MQwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlc3Npb25BYm9y" +
           "dENvdW50AQAyDAAvAD8yDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAAUHVibGlzaGluZ0lu" +
           "dGVydmFsQ291bnQBADQMAC8APzQMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABDdXJyZW50" +
           "U3Vic2NyaXB0aW9uQ291bnQBADUMAC8APzUMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABD" +
           "dW11bGF0ZWRTdWJzY3JpcHRpb25Db3VudAEANgwALwA/NgwAAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAHQAAAFNlY3VyaXR5UmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQA3DAAvAD83DAAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAAUmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQA4DAAvAD84DAAAAAf/////AQH/" +
           "////AAAAABdgiQoCAAAAAAAgAAAAU2FtcGxpbmdJbnRlcnZhbERpYWdub3N0aWNzQXJyYXkBAOYHAC8B" +
           "AHQI5gcAAAEAWAMBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABwAAABTdWJzY3JpcHRpb25E" +
           "aWFnbm9zdGljc0FycmF5AQDnBwAvAQB7COcHAAABAGoDAQAAAAEAAAAAAAAAAQH/////AAAAAARggAoB" +
           "AAAAAAAaAAAAU2Vzc2lvbnNEaWFnbm9zdGljc1N1bW1hcnkBALgKAC8BAOoHuAoAAP////8CAAAAF2CJ" +
           "CgIAAAAAABcAAABTZXNzaW9uRGlhZ25vc3RpY3NBcnJheQEAOQwALwEAlAg5DAAAAQBhAwEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAXYIkKAgAAAAAAHwAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzQXJyYXkB" +
           "ADoMAC8BAMMIOgwAAAEAZAMBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAsAAABFbmFibGVk" +
           "RmxhZwEA6QcALgBE6QcAAAAB/////wMD/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ServerDiagnosticsSummaryState ServerDiagnosticsSummary
        {
            get
            {
                return m_serverDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public SamplingIntervalDiagnosticsArrayState SamplingIntervalDiagnosticsArray
        {
            get
            {
                return m_samplingIntervalDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingIntervalDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingIntervalDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionsDiagnosticsSummaryState SessionsDiagnosticsSummary
        {
            get
            {
                return m_sessionsDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionsDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionsDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> EnabledFlag
        {
            get
            {
                return m_enabledFlag;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledFlag, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledFlag = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverDiagnosticsSummary != null)
            {
                children.Add(m_serverDiagnosticsSummary);
            }

            if (m_samplingIntervalDiagnosticsArray != null)
            {
                children.Add(m_samplingIntervalDiagnosticsArray);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            if (m_sessionsDiagnosticsSummary != null)
            {
                children.Add(m_sessionsDiagnosticsSummary);
            }

            if (m_enabledFlag != null)
            {
                children.Add(m_enabledFlag);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnosticsSummary = new ServerDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                ServerDiagnosticsSummary = (ServerDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.SamplingIntervalDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SamplingIntervalDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SamplingIntervalDiagnosticsArray = new SamplingIntervalDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SamplingIntervalDiagnosticsArray = (SamplingIntervalDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SamplingIntervalDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionsDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (SessionsDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                SessionsDiagnosticsSummary = new SessionsDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                SessionsDiagnosticsSummary = (SessionsDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = SessionsDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledFlag:
                {
                    if (createOrReplace)
                    {
                        if (EnabledFlag == null)
                        {
                            if (replacement == null)
                            {
                                EnabledFlag = new PropertyState<bool>(this);
                            }
                            else
                            {
                                EnabledFlag = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = EnabledFlag;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryState m_serverDiagnosticsSummary;
        private SamplingIntervalDiagnosticsArrayState m_samplingIntervalDiagnosticsArray;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        private SessionsDiagnosticsSummaryState m_sessionsDiagnosticsSummary;
        private PropertyState<bool> m_enabledFlag;
        #endregion
    }
    #endif
    #endregion

    #region SessionsDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_SessionsDiagnosticsSummaryState)
    /// <summary>
    /// Stores an instance of the SessionsDiagnosticsSummaryType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionsDiagnosticsSummaryState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionsDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionsDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAFNlc3Npb25zRGlhZ25vc3RpY3NTdW1tYXJ5VHlwZUluc3RhbmNl" +
           "AQDqBwEA6gfqBwAA/////wIAAAAXYIkKAgAAAAAAFwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5AQDr" +
           "BwAvAQCUCOsHAAABAGEDAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAfAAAAU2Vzc2lvblNl" +
           "Y3VyaXR5RGlhZ25vc3RpY3NBcnJheQEA7AcALwEAwwjsBwAAAQBkAwEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsArrayState SessionDiagnosticsArray
        {
            get
            {
                return m_sessionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsArrayState SessionSecurityDiagnosticsArray
        {
            get
            {
                return m_sessionSecurityDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnosticsArray != null)
            {
                children.Add(m_sessionDiagnosticsArray);
            }

            if (m_sessionSecurityDiagnosticsArray != null)
            {
                children.Add(m_sessionSecurityDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnosticsArray = new SessionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionDiagnosticsArray = (SessionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnosticsArray = new SessionSecurityDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsArrayState m_sessionDiagnosticsArray;
        private SessionSecurityDiagnosticsArrayState m_sessionSecurityDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsObjectState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsObjectState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsObjectType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsObjectState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsObjectState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionDiagnosticsObjectType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAFNlc3Npb25EaWFnbm9zdGljc09iamVjdFR5cGVJbnN0YW5jZQEA" +
           "7QcBAO0H7QcAAP////8DAAAAFWCJCgIAAAAAABIAAABTZXNzaW9uRGlhZ25vc3RpY3MBAO4HAC8BAJUI" +
           "7gcAAAEAYQP/////AQH/////KwAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQA7DAAvAD87DAAAABH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAALAAAAU2Vzc2lvbk5hbWUBADwMAC8APzwMAAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABEAAABDbGllbnREZXNjcmlwdGlvbgEAPQwALwA/PQwAAAEANAH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAU2VydmVyVXJpAQA+DAAvAD8+DAAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAALAAAARW5kcG9pbnRVcmwBAD8MAC8APz8MAAAADP////8BAf////8AAAAAF2CJCgIAAAAA" +
           "AAkAAABMb2NhbGVJZHMBAEAMAC8AP0AMAAABACcBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAUAAAAQWN0dWFsU2Vzc2lvblRpbWVvdXQBAEEMAC8AP0EMAAABACIB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFgAAAE1heFJlc3BvbnNlTWVzc2FnZVNpemUBAEIMAC8AP0IMAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABQAAABDbGllbnRDb25uZWN0aW9uVGltZQEAQwwALwA/QwwAAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAAQ2xpZW50TGFzdENvbnRhY3RUaW1lAQBEDAAvAD9EDAAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABkAAABDdXJyZW50U3Vic2NyaXB0aW9uc0NvdW50AQBFDAAvAD9FDAAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAQ3VycmVudE1vbml0b3JlZEl0ZW1zQ291bnQBAEYM" +
           "AC8AP0YMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABDdXJyZW50UHVibGlzaFJlcXVlc3Rz" +
           "SW5RdWV1ZQEARwwALwA/RwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFRvdGFsUmVxdWVz" +
           "dENvdW50AQDCIgAvAD/CIgAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABVbmF1dGhvcml6" +
           "ZWRSZXF1ZXN0Q291bnQBAHMuAC8AP3MuAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABSZWFk" +
           "Q291bnQBAE8MAC8AP08MAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEhpc3RvcnlSZWFk" +
           "Q291bnQBAFAMAC8AP1AMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFdyaXRlQ291bnQB" +
           "AFEMAC8AP1EMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAEhpc3RvcnlVcGRhdGVDb3Vu" +
           "dAEAUgwALwA/UgwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAQ2FsbENvdW50AQBTDAAv" +
           "AD9TDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABkAAABDcmVhdGVNb25pdG9yZWRJdGVtc0Nv" +
           "dW50AQBUDAAvAD9UDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABkAAABNb2RpZnlNb25pdG9y" +
           "ZWRJdGVtc0NvdW50AQBVDAAvAD9VDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABYAAABTZXRN" +
           "b25pdG9yaW5nTW9kZUNvdW50AQBWDAAvAD9WDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIA" +
           "AABTZXRUcmlnZ2VyaW5nQ291bnQBAFcMAC8AP1cMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GQAAAERlbGV0ZU1vbml0b3JlZEl0ZW1zQ291bnQBAFgMAC8AP1gMAAABAGcD/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFwAAAENyZWF0ZVN1YnNjcmlwdGlvbkNvdW50AQBZDAAvAD9ZDAAAAQBnA/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABcAAABNb2RpZnlTdWJzY3JpcHRpb25Db3VudAEAWgwALwA/WgwAAAEAZwP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAWAAAAU2V0UHVibGlzaGluZ01vZGVDb3VudAEAWwwALwA/WwwA" +
           "AAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAUHVibGlzaENvdW50AQBcDAAvAD9cDAAAAQBn" +
           "A/////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABSZXB1Ymxpc2hDb3VudAEAXQwALwA/XQwAAAEAZwP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAaAAAAVHJhbnNmZXJTdWJzY3JpcHRpb25zQ291bnQBAF4MAC8A" +
           "P14MAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAERlbGV0ZVN1YnNjcmlwdGlvbnNDb3Vu" +
           "dAEAXwwALwA/XwwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQWRkTm9kZXNDb3VudAEA" +
           "YAwALwA/YAwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQWRkUmVmZXJlbmNlc0NvdW50" +
           "AQBhDAAvAD9hDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEZWxldGVOb2Rlc0NvdW50" +
           "AQBiDAAvAD9iDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABUAAABEZWxldGVSZWZlcmVuY2Vz" +
           "Q291bnQBAGMMAC8AP2MMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEJyb3dzZUNvdW50" +
           "AQBkDAAvAD9kDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABCcm93c2VOZXh0Q291bnQB" +
           "AGUMAC8AP2UMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAIgAAAFRyYW5zbGF0ZUJyb3dzZVBh" +
           "dGhzVG9Ob2RlSWRzQ291bnQBAGYMAC8AP2YMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAA" +
           "AFF1ZXJ5Rmlyc3RDb3VudAEAZwwALwA/ZwwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "UXVlcnlOZXh0Q291bnQBAGgMAC8AP2gMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAFJl" +
           "Z2lzdGVyTm9kZXNDb3VudAEAaQwALwA/aQwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAUAAAA" +
           "VW5yZWdpc3Rlck5vZGVzQ291bnQBAGoMAC8AP2oMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GgAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzAQDvBwAvAQDECO8HAAABAGQD/////wEB/////wkA" +
           "AAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAawwALwA/awwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFQAAAENsaWVudFVzZXJJZE9mU2Vzc2lvbgEAbAwALwA/bAwAAAAM/////wEB/////wAAAAAXYIkK" +
           "AgAAAAAAEwAAAENsaWVudFVzZXJJZEhpc3RvcnkBAG0MAC8AP20MAAAADAEAAAABAAAAAAAAAAEB////" +
           "/wAAAAAVYIkKAgAAAAAAFwAAAEF1dGhlbnRpY2F0aW9uTWVjaGFuaXNtAQBuDAAvAD9uDAAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAARW5jb2RpbmcBAG8MAC8AP28MAAAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABEAAABUcmFuc3BvcnRQcm90b2NvbAEAcAwALwA/cAwAAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEAcQwALwA/cQwAAAEALgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAARAAAAU2VjdXJpdHlQb2xpY3lVcmkBAHIMAC8AP3IMAAAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABEAAABDbGllbnRDZXJ0aWZpY2F0ZQEAcwwALwA/cwwAAAAP/////wEB/////wAAAAAXYIkKAgAA" +
           "AAAAHAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXkBAPAHAC8BAHsI8AcAAAEAagMBAAAAAQAA" +
           "AAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsVariableState SessionDiagnostics
        {
            get
            {
                return m_sessionDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnostics = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsState SessionSecurityDiagnostics
        {
            get
            {
                return m_sessionSecurityDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnostics = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnostics != null)
            {
                children.Add(m_sessionDiagnostics);
            }

            if (m_sessionSecurityDiagnostics != null)
            {
                children.Add(m_sessionSecurityDiagnostics);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnostics = new SessionDiagnosticsVariableState(this);
                            }
                            else
                            {
                                SessionDiagnostics = (SessionDiagnosticsVariableState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnostics = new SessionSecurityDiagnosticsState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnostics = (SessionSecurityDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsVariableState m_sessionDiagnostics;
        private SessionSecurityDiagnosticsState m_sessionSecurityDiagnostics;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region VendorServerInfoState Class
    #if (!OPCUA_EXCLUDE_VendorServerInfoState)
    /// <summary>
    /// Stores an instance of the VendorServerInfoType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class VendorServerInfoState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public VendorServerInfoState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.VendorServerInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFZlbmRvclNlcnZlckluZm9UeXBlSW5zdGFuY2UBAPEHAQDxB/EH" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerRedundancyState Class
    #if (!OPCUA_EXCLUDE_ServerRedundancyState)
    /// <summary>
    /// Stores an instance of the ServerRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerRedundancyState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFNlcnZlclJlZHVuZGFuY3lUeXBlSW5zdGFuY2UBAPIHAQDyB/IH" +
           "AAD/////AQAAABVgiQoCAAAAAAARAAAAUmVkdW5kYW5jeVN1cHBvcnQBAPMHAC4ARPMHAAABAFMD////" +
           "/wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<RedundancySupport> RedundancySupport
        {
            get
            {
                return m_redundancySupport;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundancySupport, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundancySupport = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_redundancySupport != null)
            {
                children.Add(m_redundancySupport);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RedundancySupport:
                {
                    if (createOrReplace)
                    {
                        if (RedundancySupport == null)
                        {
                            if (replacement == null)
                            {
                                RedundancySupport = new PropertyState<RedundancySupport>(this);
                            }
                            else
                            {
                                RedundancySupport = (PropertyState<RedundancySupport>)replacement;
                            }
                        }
                    }

                    instance = RedundancySupport;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<RedundancySupport> m_redundancySupport;
        #endregion
    }
    #endif
    #endregion

    #region TransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_TransparentRedundancyState)
    /// <summary>
    /// Stores an instance of the TransparentRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA9AcB" +
           "APQH9AcAAP////8DAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEAdAwALgBEdAwAAAEA" +
           "UwP/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQ3VycmVudFNlcnZlcklkAQD1BwAuAET1BwAAAAz/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAUAAAAUmVkdW5kYW50U2VydmVyQXJyYXkBAPYHAC4ARPYHAAAB" +
           "AFUDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> CurrentServerId
        {
            get
            {
                return m_currentServerId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentServerId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentServerId = value;
            }
        }

        /// <remarks />
        public PropertyState<RedundantServerDataType[]> RedundantServerArray
        {
            get
            {
                return m_redundantServerArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundantServerArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundantServerArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentServerId != null)
            {
                children.Add(m_currentServerId);
            }

            if (m_redundantServerArray != null)
            {
                children.Add(m_redundantServerArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentServerId:
                {
                    if (createOrReplace)
                    {
                        if (CurrentServerId == null)
                        {
                            if (replacement == null)
                            {
                                CurrentServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                CurrentServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CurrentServerId;
                    break;
                }

                case Opc.Ua.BrowseNames.RedundantServerArray:
                {
                    if (createOrReplace)
                    {
                        if (RedundantServerArray == null)
                        {
                            if (replacement == null)
                            {
                                RedundantServerArray = new PropertyState<RedundantServerDataType[]>(this);
                            }
                            else
                            {
                                RedundantServerArray = (PropertyState<RedundantServerDataType[]>)replacement;
                            }
                        }
                    }

                    instance = RedundantServerArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_currentServerId;
        private PropertyState<RedundantServerDataType[]> m_redundantServerArray;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentRedundancyState)
    /// <summary>
    /// Stores an instance of the NonTransparentRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonTransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAE5vblRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA" +
           "9wcBAPcH9wcAAP////8CAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEAdQwALgBEdQwA" +
           "AAEAUwP/////AQH/////AAAAABdgiQoCAAAAAAAOAAAAU2VydmVyVXJpQXJyYXkBAPgHAC4ARPgHAAAA" +
           "DAEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerUriArray
        {
            get
            {
                return m_serverUriArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUriArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUriArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverUriArray != null)
            {
                children.Add(m_serverUriArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerUriArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerUriArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerUriArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerUriArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerUriArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverUriArray;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentNetworkRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentNetworkRedundancyState)
    /// <summary>
    /// Stores an instance of the NonTransparentNetworkRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentNetworkRedundancyState : NonTransparentRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonTransparentNetworkRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentNetworkRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAE5vblRyYW5zcGFyZW50TmV0d29ya1JlZHVuZGFuY3lUeXBlSW5z" +
           "dGFuY2UBAKkuAQCpLqkuAAD/////AwAAABVgiQoCAAAAAAARAAAAUmVkdW5kYW5jeVN1cHBvcnQBAKou" +
           "AC4ARKouAAABAFMD/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAFNlcnZlclVyaUFycmF5AQCrLgAu" +
           "AESrLgAAAAwBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABMAAABTZXJ2ZXJOZXR3b3JrR3Jv" +
           "dXBzAQCsLgAuAESsLgAAAQCoLgEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NetworkGroupDataType[]> ServerNetworkGroups
        {
            get
            {
                return m_serverNetworkGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverNetworkGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverNetworkGroups = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverNetworkGroups != null)
            {
                children.Add(m_serverNetworkGroups);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerNetworkGroups:
                {
                    if (createOrReplace)
                    {
                        if (ServerNetworkGroups == null)
                        {
                            if (replacement == null)
                            {
                                ServerNetworkGroups = new PropertyState<NetworkGroupDataType[]>(this);
                            }
                            else
                            {
                                ServerNetworkGroups = (PropertyState<NetworkGroupDataType[]>)replacement;
                            }
                        }
                    }

                    instance = ServerNetworkGroups;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NetworkGroupDataType[]> m_serverNetworkGroups;
        #endregion
    }
    #endif
    #endregion

    #region OperationLimitsState Class
    #if (!OPCUA_EXCLUDE_OperationLimitsState)
    /// <summary>
    /// Stores an instance of the OperationLimitsType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OperationLimitsState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OperationLimitsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OperationLimitsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxNodesPerRead != null)
            {
                MaxNodesPerRead.Initialize(context, MaxNodesPerRead_InitializationString);
            }

            if (MaxNodesPerHistoryReadData != null)
            {
                MaxNodesPerHistoryReadData.Initialize(context, MaxNodesPerHistoryReadData_InitializationString);
            }

            if (MaxNodesPerHistoryReadEvents != null)
            {
                MaxNodesPerHistoryReadEvents.Initialize(context, MaxNodesPerHistoryReadEvents_InitializationString);
            }

            if (MaxNodesPerWrite != null)
            {
                MaxNodesPerWrite.Initialize(context, MaxNodesPerWrite_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateData != null)
            {
                MaxNodesPerHistoryUpdateData.Initialize(context, MaxNodesPerHistoryUpdateData_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateEvents != null)
            {
                MaxNodesPerHistoryUpdateEvents.Initialize(context, MaxNodesPerHistoryUpdateEvents_InitializationString);
            }

            if (MaxNodesPerMethodCall != null)
            {
                MaxNodesPerMethodCall.Initialize(context, MaxNodesPerMethodCall_InitializationString);
            }

            if (MaxNodesPerBrowse != null)
            {
                MaxNodesPerBrowse.Initialize(context, MaxNodesPerBrowse_InitializationString);
            }

            if (MaxNodesPerRegisterNodes != null)
            {
                MaxNodesPerRegisterNodes.Initialize(context, MaxNodesPerRegisterNodes_InitializationString);
            }

            if (MaxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                MaxNodesPerTranslateBrowsePathsToNodeIds.Initialize(context, MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString);
            }

            if (MaxNodesPerNodeManagement != null)
            {
                MaxNodesPerNodeManagement.Initialize(context, MaxNodesPerNodeManagement_InitializationString);
            }

            if (MaxMonitoredItemsPerCall != null)
            {
                MaxMonitoredItemsPerCall.Initialize(context, MaxMonitoredItemsPerCall_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxNodesPerRead_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heE5vZGVzUGVyUmVhZAEALS0ALgBELS0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxNodesPerHistoryReadData_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWREYXRhAQCBLwAuAESBLwAA" +
           "AAf/////AQH/////AAAAAA==";

        private const string MaxNodesPerHistoryReadEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWRFdmVudHMBAIIvAC4ARIIv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerWrite_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAE1heE5vZGVzUGVyV3JpdGUBAC8tAC4ARC8tAAAAB/////8BAf//" +
           "//8AAAAA";

        private const string MaxNodesPerHistoryUpdateData_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZURhdGEBAIMvAC4ARIMv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerHistoryUpdateEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHgAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZUV2ZW50cwEAhC8ALgBE" +
           "hC8AAAAH/////wEB/////wAAAAA=";

        private const string MaxNodesPerMethodCall_InitializationString =
           "//////////8VYIkKAgAAAAAAFQAAAE1heE5vZGVzUGVyTWV0aG9kQ2FsbAEAMS0ALgBEMS0AAAAH////" +
           "/wEB/////wAAAAA=";

        private const string MaxNodesPerBrowse_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE1heE5vZGVzUGVyQnJvd3NlAQAyLQAuAEQyLQAAAAf/////AQH/" +
           "////AAAAAA==";

        private const string MaxNodesPerRegisterNodes_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE5vZGVzUGVyUmVnaXN0ZXJOb2RlcwEAMy0ALgBEMy0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString =
           "//////////8VYIkKAgAAAAAAKAAAAE1heE5vZGVzUGVyVHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJ" +
           "ZHMBADQtAC4ARDQtAAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerNodeManagement_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAE1heE5vZGVzUGVyTm9kZU1hbmFnZW1lbnQBADUtAC4ARDUtAAAA" +
           "B/////8BAf////8AAAAA";

        private const string MaxMonitoredItemsPerCall_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE1vbml0b3JlZEl0ZW1zUGVyQ2FsbAEANi0ALgBENi0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAE9wZXJhdGlvbkxpbWl0c1R5cGVJbnN0YW5jZQEALC0BACwtLC0A" +
           "AP////8MAAAAFWCJCgIAAAAAAA8AAABNYXhOb2Rlc1BlclJlYWQBAC0tAC4ARC0tAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABoAAABNYXhOb2Rlc1Blckhpc3RvcnlSZWFkRGF0YQEAgS8ALgBEgS8AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWRFdmVudHMBAIIv" +
           "AC4ARIIvAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABNYXhOb2Rlc1BlcldyaXRlAQAvLQAu" +
           "AEQvLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAATWF4Tm9kZXNQZXJIaXN0b3J5VXBkYXRl" +
           "RGF0YQEAgy8ALgBEgy8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHgAAAE1heE5vZGVzUGVySGlz" +
           "dG9yeVVwZGF0ZUV2ZW50cwEAhC8ALgBEhC8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAE1h" +
           "eE5vZGVzUGVyTWV0aG9kQ2FsbAEAMS0ALgBEMS0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAA" +
           "AE1heE5vZGVzUGVyQnJvd3NlAQAyLQAuAEQyLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAA" +
           "TWF4Tm9kZXNQZXJSZWdpc3Rlck5vZGVzAQAzLQAuAEQzLQAAAAf/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAoAAAATWF4Tm9kZXNQZXJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkcwEANC0ALgBENC0AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE1heE5vZGVzUGVyTm9kZU1hbmFnZW1lbnQBADUtAC4A" +
           "RDUtAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABNYXhNb25pdG9yZWRJdGVtc1BlckNhbGwB" +
           "ADYtAC4ARDYtAAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> MaxNodesPerRead
        {
            get
            {
                return m_maxNodesPerRead;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRead, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRead = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadData
        {
            get
            {
                return m_maxNodesPerHistoryReadData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadEvents
        {
            get
            {
                return m_maxNodesPerHistoryReadEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerWrite
        {
            get
            {
                return m_maxNodesPerWrite;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerWrite, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerWrite = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateData
        {
            get
            {
                return m_maxNodesPerHistoryUpdateData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateEvents
        {
            get
            {
                return m_maxNodesPerHistoryUpdateEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerMethodCall
        {
            get
            {
                return m_maxNodesPerMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerBrowse
        {
            get
            {
                return m_maxNodesPerBrowse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerBrowse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerBrowse = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerRegisterNodes
        {
            get
            {
                return m_maxNodesPerRegisterNodes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRegisterNodes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRegisterNodes = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerTranslateBrowsePathsToNodeIds
        {
            get
            {
                return m_maxNodesPerTranslateBrowsePathsToNodeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerTranslateBrowsePathsToNodeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerTranslateBrowsePathsToNodeIds = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerNodeManagement
        {
            get
            {
                return m_maxNodesPerNodeManagement;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerNodeManagement, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerNodeManagement = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItemsPerCall
        {
            get
            {
                return m_maxMonitoredItemsPerCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItemsPerCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItemsPerCall = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_maxNodesPerRead != null)
            {
                children.Add(m_maxNodesPerRead);
            }

            if (m_maxNodesPerHistoryReadData != null)
            {
                children.Add(m_maxNodesPerHistoryReadData);
            }

            if (m_maxNodesPerHistoryReadEvents != null)
            {
                children.Add(m_maxNodesPerHistoryReadEvents);
            }

            if (m_maxNodesPerWrite != null)
            {
                children.Add(m_maxNodesPerWrite);
            }

            if (m_maxNodesPerHistoryUpdateData != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateData);
            }

            if (m_maxNodesPerHistoryUpdateEvents != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateEvents);
            }

            if (m_maxNodesPerMethodCall != null)
            {
                children.Add(m_maxNodesPerMethodCall);
            }

            if (m_maxNodesPerBrowse != null)
            {
                children.Add(m_maxNodesPerBrowse);
            }

            if (m_maxNodesPerRegisterNodes != null)
            {
                children.Add(m_maxNodesPerRegisterNodes);
            }

            if (m_maxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                children.Add(m_maxNodesPerTranslateBrowsePathsToNodeIds);
            }

            if (m_maxNodesPerNodeManagement != null)
            {
                children.Add(m_maxNodesPerNodeManagement);
            }

            if (m_maxMonitoredItemsPerCall != null)
            {
                children.Add(m_maxMonitoredItemsPerCall);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MaxNodesPerRead:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRead == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRead = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRead = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRead;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerWrite:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerWrite == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerWrite = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerWrite = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerWrite;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerMethodCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerMethodCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerBrowse:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerBrowse == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerBrowse = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerBrowse = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerBrowse;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerRegisterNodes:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRegisterNodes == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRegisterNodes = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRegisterNodes = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRegisterNodes;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerTranslateBrowsePathsToNodeIds:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerTranslateBrowsePathsToNodeIds == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerTranslateBrowsePathsToNodeIds;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerNodeManagement:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerNodeManagement == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerNodeManagement = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerNodeManagement = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerNodeManagement;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItemsPerCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItemsPerCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItemsPerCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItemsPerCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItemsPerCall;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_maxNodesPerRead;
        private PropertyState<uint> m_maxNodesPerHistoryReadData;
        private PropertyState<uint> m_maxNodesPerHistoryReadEvents;
        private PropertyState<uint> m_maxNodesPerWrite;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateData;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateEvents;
        private PropertyState<uint> m_maxNodesPerMethodCall;
        private PropertyState<uint> m_maxNodesPerBrowse;
        private PropertyState<uint> m_maxNodesPerRegisterNodes;
        private PropertyState<uint> m_maxNodesPerTranslateBrowsePathsToNodeIds;
        private PropertyState<uint> m_maxNodesPerNodeManagement;
        private PropertyState<uint> m_maxMonitoredItemsPerCall;
        #endregion
    }
    #endif
    #endregion

    #region FileState Class
    #if (!OPCUA_EXCLUDE_FileState)
    /// <summary>
    /// Stores an instance of the FileType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FileState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MimeType != null)
            {
                MimeType.Initialize(context, MimeType_InitializationString);
            }
        }

        #region Initialization String
        private const string MimeType_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAE1pbWVUeXBlAQAdNAAuAEQdNAAAAAz/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEAAAAEZpbGVUeXBlSW5zdGFuY2UBADctAQA3LTctAAD/////CwAAABVg" +
           "iQoCAAAAAAAEAAAAU2l6ZQEAOC0ALgBEOC0AAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdy" +
           "aXRhYmxlAQCOMQAuAESOMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxl" +
           "AQCPMQAuAESPMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQA7LQAuAEQ7" +
           "LQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWltZVR5cGUBAB00AC4ARB00AAAADP////8B" +
           "Af////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQA8LQAvAQA8LTwtAAABAf////8CAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAPS0ALgBEPS0AAJYBAAAAAQAqAQETAAAABAAAAE1vZGUAA/////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AD4tAC4ARD4tAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAD8tAC8BAD8tPy0AAAEB/////wEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBALQAuAERALQAAlgEAAAABACoBARkAAAAKAAAARmls" +
           "ZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJl" +
           "YWQBAEEtAC8BAEEtQS0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBCLQAu" +
           "AERCLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExl" +
           "bmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEAQy0ALgBEQy0AAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEARC0ALwEARC1ELQAAAQH/////" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEUtAC4AREUtAACWAgAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQBGLQAvAQBGLUYtAAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEARy0ALgBERy0AAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAEgtAC4AREgtAACWAQAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBvc2l0aW9u" +
           "AQBJLQAvAQBJLUktAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEASi0ALgBE" +
           "Si0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAAAAgAAABQb3Np" +
           "dGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ulong> Size
        {
            get
            {
                return m_size;
            }

            set
            {
                if (!Object.ReferenceEquals(m_size, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_size = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Writable
        {
            get
            {
                return m_writable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UserWritable
        {
            get
            {
                return m_userWritable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userWritable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userWritable = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> OpenCount
        {
            get
            {
                return m_openCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openCount = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MimeType
        {
            get
            {
                return m_mimeType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mimeType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mimeType = value;
            }
        }

        /// <remarks />
        public OpenMethodState Open
        {
            get
            {
                return m_openMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openMethod = value;
            }
        }

        /// <remarks />
        public CloseMethodState Close
        {
            get
            {
                return m_closeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeMethod = value;
            }
        }

        /// <remarks />
        public ReadMethodState Read
        {
            get
            {
                return m_readMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readMethod = value;
            }
        }

        /// <remarks />
        public WriteMethodState Write
        {
            get
            {
                return m_writeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeMethod = value;
            }
        }

        /// <remarks />
        public GetPositionMethodState GetPosition
        {
            get
            {
                return m_getPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getPositionMethod = value;
            }
        }

        /// <remarks />
        public SetPositionMethodState SetPosition
        {
            get
            {
                return m_setPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPositionMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_size != null)
            {
                children.Add(m_size);
            }

            if (m_writable != null)
            {
                children.Add(m_writable);
            }

            if (m_userWritable != null)
            {
                children.Add(m_userWritable);
            }

            if (m_openCount != null)
            {
                children.Add(m_openCount);
            }

            if (m_mimeType != null)
            {
                children.Add(m_mimeType);
            }

            if (m_openMethod != null)
            {
                children.Add(m_openMethod);
            }

            if (m_closeMethod != null)
            {
                children.Add(m_closeMethod);
            }

            if (m_readMethod != null)
            {
                children.Add(m_readMethod);
            }

            if (m_writeMethod != null)
            {
                children.Add(m_writeMethod);
            }

            if (m_getPositionMethod != null)
            {
                children.Add(m_getPositionMethod);
            }

            if (m_setPositionMethod != null)
            {
                children.Add(m_setPositionMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Size:
                {
                    if (createOrReplace)
                    {
                        if (Size == null)
                        {
                            if (replacement == null)
                            {
                                Size = new PropertyState<ulong>(this);
                            }
                            else
                            {
                                Size = (PropertyState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Size;
                    break;
                }

                case Opc.Ua.BrowseNames.Writable:
                {
                    if (createOrReplace)
                    {
                        if (Writable == null)
                        {
                            if (replacement == null)
                            {
                                Writable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Writable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Writable;
                    break;
                }

                case Opc.Ua.BrowseNames.UserWritable:
                {
                    if (createOrReplace)
                    {
                        if (UserWritable == null)
                        {
                            if (replacement == null)
                            {
                                UserWritable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UserWritable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UserWritable;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenCount:
                {
                    if (createOrReplace)
                    {
                        if (OpenCount == null)
                        {
                            if (replacement == null)
                            {
                                OpenCount = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                OpenCount = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = OpenCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MimeType:
                {
                    if (createOrReplace)
                    {
                        if (MimeType == null)
                        {
                            if (replacement == null)
                            {
                                MimeType = new PropertyState<string>(this);
                            }
                            else
                            {
                                MimeType = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MimeType;
                    break;
                }

                case Opc.Ua.BrowseNames.Open:
                {
                    if (createOrReplace)
                    {
                        if (Open == null)
                        {
                            if (replacement == null)
                            {
                                Open = new OpenMethodState(this);
                            }
                            else
                            {
                                Open = (OpenMethodState)replacement;
                            }
                        }
                    }

                    instance = Open;
                    break;
                }

                case Opc.Ua.BrowseNames.Close:
                {
                    if (createOrReplace)
                    {
                        if (Close == null)
                        {
                            if (replacement == null)
                            {
                                Close = new CloseMethodState(this);
                            }
                            else
                            {
                                Close = (CloseMethodState)replacement;
                            }
                        }
                    }

                    instance = Close;
                    break;
                }

                case Opc.Ua.BrowseNames.Read:
                {
                    if (createOrReplace)
                    {
                        if (Read == null)
                        {
                            if (replacement == null)
                            {
                                Read = new ReadMethodState(this);
                            }
                            else
                            {
                                Read = (ReadMethodState)replacement;
                            }
                        }
                    }

                    instance = Read;
                    break;
                }

                case Opc.Ua.BrowseNames.Write:
                {
                    if (createOrReplace)
                    {
                        if (Write == null)
                        {
                            if (replacement == null)
                            {
                                Write = new WriteMethodState(this);
                            }
                            else
                            {
                                Write = (WriteMethodState)replacement;
                            }
                        }
                    }

                    instance = Write;
                    break;
                }

                case Opc.Ua.BrowseNames.GetPosition:
                {
                    if (createOrReplace)
                    {
                        if (GetPosition == null)
                        {
                            if (replacement == null)
                            {
                                GetPosition = new GetPositionMethodState(this);
                            }
                            else
                            {
                                GetPosition = (GetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = GetPosition;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPosition:
                {
                    if (createOrReplace)
                    {
                        if (SetPosition == null)
                        {
                            if (replacement == null)
                            {
                                SetPosition = new SetPositionMethodState(this);
                            }
                            else
                            {
                                SetPosition = (SetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = SetPosition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ulong> m_size;
        private PropertyState<bool> m_writable;
        private PropertyState<bool> m_userWritable;
        private PropertyState<ushort> m_openCount;
        private PropertyState<string> m_mimeType;
        private OpenMethodState m_openMethod;
        private CloseMethodState m_closeMethod;
        private ReadMethodState m_readMethod;
        private WriteMethodState m_writeMethod;
        private GetPositionMethodState m_getPositionMethod;
        private SetPositionMethodState m_setPositionMethod;
        #endregion
    }
    #endif
    #endregion

    #region CreateDirectoryMethodState Class
    #if (!OPCUA_EXCLUDE_CreateDirectoryMethodState)
    /// <summary>
    /// Stores an instance of the CreateDirectoryMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateDirectoryMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateDirectoryMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateDirectoryMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAENyZWF0ZURpcmVjdG9yeU1ldGhvZFR5cGUBAB40AC8BAB40HjQA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAfNAAuAEQfNAAAlgEAAAABACoB" +
           "ARwAAAANAAAARGlyZWN0b3J5TmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAIDQALgBEIDQAAJYBAAAAAQAqAQEeAAAADwAAAERp" +
           "cmVjdG9yeU5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateDirectoryMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string directoryName = (string)_inputArguments[0];

            NodeId directoryNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    directoryName,
                    ref directoryNodeId);
            }

            _outputArguments[0] = directoryNodeId;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateDirectoryMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string directoryName,
        ref NodeId directoryNodeId);
    #endif
    #endregion

    #region CreateFileMethodState Class
    #if (!OPCUA_EXCLUDE_CreateFileMethodState)
    /// <summary>
    /// Stores an instance of the CreateFileMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateFileMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAENyZWF0ZUZpbGVNZXRob2RUeXBlAQAhNAAvAQAhNCE0AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIjQALgBEIjQAAJYCAAAAAQAqAQEXAAAA" +
           "CAAAAEZpbGVOYW1lAAz/////AAAAAAABACoBAR4AAAAPAAAAUmVxdWVzdEZpbGVPcGVuAAH/////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAj" +
           "NAAuAEQjNAAAlgIAAAABACoBARkAAAAKAAAARmlsZU5vZGVJZAAR/////wAAAAAAAQAqAQEZAAAACgAA" +
           "AEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string fileName = (string)_inputArguments[0];
            bool requestFileOpen = (bool)_inputArguments[1];

            NodeId fileNodeId = (NodeId)_outputArguments[0];
            uint fileHandle = (uint)_outputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileName,
                    requestFileOpen,
                    ref fileNodeId,
                    ref fileHandle);
            }

            _outputArguments[0] = fileNodeId;
            _outputArguments[1] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateFileMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string fileName,
        bool requestFileOpen,
        ref NodeId fileNodeId,
        ref uint fileHandle);
    #endif
    #endregion

    #region DeleteFileMethodState Class
    #if (!OPCUA_EXCLUDE_DeleteFileMethodState)
    /// <summary>
    /// Stores an instance of the DeleteFileMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeleteFileMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DeleteFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new DeleteFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAERlbGV0ZUZpbGVNZXRob2RUeXBlAQAkNAAvAQAkNCQ0AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJTQALgBEJTQAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAE9iamVjdFRvRGVsZXRlABH/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public DeleteFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId objectToDelete = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToDelete);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult DeleteFileMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId objectToDelete);
    #endif
    #endregion

    #region MoveOrCopyMethodState Class
    #if (!OPCUA_EXCLUDE_MoveOrCopyMethodState)
    /// <summary>
    /// Stores an instance of the MoveOrCopyMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MoveOrCopyMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MoveOrCopyMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new MoveOrCopyMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAE1vdmVPckNvcHlNZXRob2RUeXBlAQAmNAAvAQAmNCY0AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJzQALgBEJzQAAJYEAAAAAQAqAQEhAAAA" +
           "EgAAAE9iamVjdFRvTW92ZU9yQ29weQAR/////wAAAAAAAQAqAQEeAAAADwAAAFRhcmdldERpcmVjdG9y" +
           "eQAR/////wAAAAAAAQAqAQEZAAAACgAAAENyZWF0ZUNvcHkAAf////8AAAAAAAEAKgEBFgAAAAcAAABO" +
           "ZXdOYW1lAAz/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQAoNAAuAEQoNAAAlgEAAAABACoBARgAAAAJAAAATmV3Tm9kZUlkABH/////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public MoveOrCopyMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId objectToMoveOrCopy = (NodeId)_inputArguments[0];
            NodeId targetDirectory = (NodeId)_inputArguments[1];
            bool createCopy = (bool)_inputArguments[2];
            string newName = (string)_inputArguments[3];

            NodeId newNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToMoveOrCopy,
                    targetDirectory,
                    createCopy,
                    newName,
                    ref newNodeId);
            }

            _outputArguments[0] = newNodeId;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult MoveOrCopyMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId objectToMoveOrCopy,
        NodeId targetDirectory,
        bool createCopy,
        string newName,
        ref NodeId newNodeId);
    #endif
    #endregion

    #region FileDirectoryState Class
    #if (!OPCUA_EXCLUDE_FileDirectoryState)
    /// <summary>
    /// Stores an instance of the FileDirectoryType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileDirectoryState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FileDirectoryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileDirectoryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAEZpbGVEaXJlY3RvcnlUeXBlSW5zdGFuY2UBACk0AQApNCk0AAD/" +
           "////BAAAAARhggoEAAAAAAAPAAAAQ3JlYXRlRGlyZWN0b3J5AQBLNAAvAQBLNEs0AAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDQALgBETDQAAJYBAAAAAQAqAQEcAAAADQAAAERp" +
           "cmVjdG9yeU5hbWUADP////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAE00AC4ARE00AACWAQAAAAEAKgEBHgAAAA8AAABEaXJlY3RvcnlOb2Rl" +
           "SWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAoAAABDcmVhdGVG" +
           "aWxlAQBONAAvAQBONE40AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATzQA" +
           "LgBETzQAAJYCAAAAAQAqAQEXAAAACAAAAEZpbGVOYW1lAAz/////AAAAAAABACoBAR4AAAAPAAAAUmVx" +
           "dWVzdEZpbGVPcGVuAAH/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQBQNAAuAERQNAAAlgIAAAABACoBARkAAAAKAAAARmlsZU5vZGVJZAAR" +
           "/////wAAAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAAAYAAABEZWxldGUBAFE0AC8BAFE0UTQAAAEB/////wEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQBSNAAuAERSNAAAlgEAAAABACoBAR0AAAAOAAAAT2JqZWN0VG9E" +
           "ZWxldGUAEf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAoAAABNb3Zl" +
           "T3JDb3B5AQBTNAAvAQBTNFM0AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "VDQALgBEVDQAAJYEAAAAAQAqAQEhAAAAEgAAAE9iamVjdFRvTW92ZU9yQ29weQAR/////wAAAAAAAQAq" +
           "AQEeAAAADwAAAFRhcmdldERpcmVjdG9yeQAR/////wAAAAAAAQAqAQEZAAAACgAAAENyZWF0ZUNvcHkA" +
           "Af////8AAAAAAAEAKgEBFgAAAAcAAABOZXdOYW1lAAz/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBVNAAuAERVNAAAlgEAAAABACoBARgA" +
           "AAAJAAAATmV3Tm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CreateDirectoryMethodState CreateDirectory
        {
            get
            {
                return m_createDirectoryMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createDirectoryMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createDirectoryMethod = value;
            }
        }

        /// <remarks />
        public CreateFileMethodState CreateFile
        {
            get
            {
                return m_createFileMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createFileMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createFileMethod = value;
            }
        }

        /// <remarks />
        public DeleteFileMethodState Delete
        {
            get
            {
                return m_deleteMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteMethod = value;
            }
        }

        /// <remarks />
        public MoveOrCopyMethodState MoveOrCopy
        {
            get
            {
                return m_moveOrCopyMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_moveOrCopyMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_moveOrCopyMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createDirectoryMethod != null)
            {
                children.Add(m_createDirectoryMethod);
            }

            if (m_createFileMethod != null)
            {
                children.Add(m_createFileMethod);
            }

            if (m_deleteMethod != null)
            {
                children.Add(m_deleteMethod);
            }

            if (m_moveOrCopyMethod != null)
            {
                children.Add(m_moveOrCopyMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateDirectory:
                {
                    if (createOrReplace)
                    {
                        if (CreateDirectory == null)
                        {
                            if (replacement == null)
                            {
                                CreateDirectory = new CreateDirectoryMethodState(this);
                            }
                            else
                            {
                                CreateDirectory = (CreateDirectoryMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateDirectory;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateFile:
                {
                    if (createOrReplace)
                    {
                        if (CreateFile == null)
                        {
                            if (replacement == null)
                            {
                                CreateFile = new CreateFileMethodState(this);
                            }
                            else
                            {
                                CreateFile = (CreateFileMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateFile;
                    break;
                }

                case Opc.Ua.BrowseNames.Delete:
                {
                    if (createOrReplace)
                    {
                        if (Delete == null)
                        {
                            if (replacement == null)
                            {
                                Delete = new DeleteFileMethodState(this);
                            }
                            else
                            {
                                Delete = (DeleteFileMethodState)replacement;
                            }
                        }
                    }

                    instance = Delete;
                    break;
                }

                case Opc.Ua.BrowseNames.MoveOrCopy:
                {
                    if (createOrReplace)
                    {
                        if (MoveOrCopy == null)
                        {
                            if (replacement == null)
                            {
                                MoveOrCopy = new MoveOrCopyMethodState(this);
                            }
                            else
                            {
                                MoveOrCopy = (MoveOrCopyMethodState)replacement;
                            }
                        }
                    }

                    instance = MoveOrCopy;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CreateDirectoryMethodState m_createDirectoryMethod;
        private CreateFileMethodState m_createFileMethod;
        private DeleteFileMethodState m_deleteMethod;
        private MoveOrCopyMethodState m_moveOrCopyMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddressSpaceFileState Class
    #if (!OPCUA_EXCLUDE_AddressSpaceFileState)
    /// <summary>
    /// Stores an instance of the AddressSpaceFileType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddressSpaceFileState : FileState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddressSpaceFileState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AddressSpaceFileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExportNamespace != null)
            {
                ExportNamespace.Initialize(context, ExportNamespace_InitializationString);
            }
        }

        #region Initialization String
        private const string ExportNamespace_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEV4cG9ydE5hbWVzcGFjZQEAXy0ALwEAXy1fLQAAAQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEFkZHJlc3NTcGFjZUZpbGVUeXBlSW5zdGFuY2UBAEstAQBLLUst" +
           "AAD/////CwAAABVgiQoCAAAAAAAEAAAAU2l6ZQEATC0ALgBETC0AAAAJ/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFdyaXRhYmxlAQCQMQAuAESQMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAA" +
           "VXNlcldyaXRhYmxlAQCRMQAuAESRMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNv" +
           "dW50AQBPLQAuAERPLQAAAAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAUC0ALwEAPC1Q" +
           "LQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFEtAC4ARFEtAACWAQAAAAEA" +
           "KgEBEwAAAAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQBSLQAuAERSLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRs" +
           "ZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQBT" +
           "LQAvAQA/LVMtAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAVC0ALgBEVC0A" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAAAQAAABSZWFkAQBVLQAvAQBBLVUtAAABAf////8CAAAAF2CpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEAVi0ALgBEVi0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB///" +
           "//8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFctAC4ARFctAACWAQAAAAEAKgEBEwAAAAQA" +
           "AABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3Jp" +
           "dGUBAFgtAC8BAEQtWC0AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBZLQAu" +
           "AERZLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERh" +
           "dGEAD/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3Np" +
           "dGlvbgEAWi0ALwEARi1aLQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFst" +
           "AC4ARFstAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBcLQAuAERcLQAAlgEAAAAB" +
           "ACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGC" +
           "CgQAAAAAAAsAAABTZXRQb3NpdGlvbgEAXS0ALwEASS1dLQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAF4tAC4ARF4tAACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAA8AAABFeHBvcnROYW1lc3BhY2UBAF8tAC8BAF8tXy0AAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public MethodState ExportNamespace
        {
            get
            {
                return m_exportNamespaceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exportNamespaceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exportNamespaceMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_exportNamespaceMethod != null)
            {
                children.Add(m_exportNamespaceMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExportNamespace:
                {
                    if (createOrReplace)
                    {
                        if (ExportNamespace == null)
                        {
                            if (replacement == null)
                            {
                                ExportNamespace = new MethodState(this);
                            }
                            else
                            {
                                ExportNamespace = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ExportNamespace;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private MethodState m_exportNamespaceMethod;
        #endregion
    }
    #endif
    #endregion

    #region NamespaceMetadataState Class
    #if (!OPCUA_EXCLUDE_NamespaceMetadataState)
    /// <summary>
    /// Stores an instance of the NamespaceMetadataType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespaceMetadataState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NamespaceMetadataState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespaceMetadataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (NamespaceFile != null)
            {
                NamespaceFile.Initialize(context, NamespaceFile_InitializationString);
            }
        }

        #region Initialization String
        private const string NamespaceFile_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAE5hbWVzcGFjZUZpbGUBAGgtAC8BAEstaC0AAP////8KAAAAFWCJ" +
           "CgIAAAAAAAQAAABTaXplAQBpLQAuAERpLQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3Jp" +
           "dGFibGUBAJIxAC4ARJIxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUB" +
           "AJMxAC4ARJMxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAGwtAC4ARGwt" +
           "AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBtLQAvAQA8LW0tAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbi0ALgBEbi0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAG8tAC4ARG8tAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAHAtAC8BAD8tcC0AAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBxLQAuAERxLQAAlgEAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAABAAAAFJlYWQBAHItAC8BAEEtci0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBzLQAuAERzLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEV" +
           "AAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEAdC0ALgBEdC0AAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEAdS0ALwEARC11" +
           "LQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHYtAC4ARHYtAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQB3LQAvAQBG" +
           "LXctAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAeC0ALgBEeC0AAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAHktAC4ARHktAACWAQAAAAEAKgEBFwAAAAgAAABQ" +
           "b3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNl" +
           "dFBvc2l0aW9uAQB6LQAvAQBJLXotAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAey0ALgBEey0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAA" +
           "AAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAE5hbWVzcGFjZU1ldGFkYXRhVHlwZUluc3RhbmNlAQBgLQEAYC1g" +
           "LQAA/////wgAAAAVYIkKAgAAAAAADAAAAE5hbWVzcGFjZVVyaQEAYS0ALgBEYS0AAAAM/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEAAAAE5hbWVzcGFjZVZlcnNpb24BAGItAC4ARGItAAAADP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABgAAABOYW1lc3BhY2VQdWJsaWNhdGlvbkRhdGUBAGMtAC4ARGMtAAAADf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABEAAABJc05hbWVzcGFjZVN1YnNldAEAZC0ALgBEZC0AAAAB/////wEB" +
           "/////wAAAAAXYIkKAgAAAAAAEQAAAFN0YXRpY05vZGVJZFR5cGVzAQBlLQAuAERlLQAAAQAAAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAGAAAAFN0YXRpY051bWVyaWNOb2RlSWRSYW5nZQEAZi0A" +
           "LgBEZi0AAAEAIwEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABkAAABTdGF0aWNTdHJpbmdO" +
           "b2RlSWRQYXR0ZXJuAQBnLQAuAERnLQAAAAz/////AQH/////AAAAAARggAoBAAAAAAANAAAATmFtZXNw" +
           "YWNlRmlsZQEAaC0ALwEASy1oLQAA/////woAAAAVYIkKAgAAAAAABAAAAFNpemUBAGktAC4ARGktAAAA" +
           "Cf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEAkjEALgBEkjEAAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAkzEALgBEkzEAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAE9wZW5Db3VudAEAbC0ALgBEbC0AAAAF/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "BAAAAE9wZW4BAG0tAC8BADwtbS0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQBuLQAuAERuLQAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAAAAAAAQAoAQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAby0ALgBEby0AAJYBAAAAAQAq" +
           "AQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGC" +
           "CgQAAAAAAAUAAABDbG9zZQEAcC0ALwEAPy1wLQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBAHEtAC4ARHEtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEAci0ALwEAQS1yLQAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHMtAC4ARHMtAACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgB" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQB0LQAuAER0" +
           "LQAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAFdyaXRlAQB1LQAvAQBELXUtAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAdi0ALgBEdi0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAHctAC8BAEYtdy0AAAEB/////wIAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQB4LQAuAER4LQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwEAeS0ALgBEeS0AAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRpb24BAHotAC8BAEktei0AAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQB7LQAuAER7LQAAlgIAAAABACoBARkAAAAK" +
           "AAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgB" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> NamespaceUri
        {
            get
            {
                return m_namespaceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> NamespaceVersion
        {
            get
            {
                return m_namespaceVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> NamespacePublicationDate
        {
            get
            {
                return m_namespacePublicationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespacePublicationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespacePublicationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> IsNamespaceSubset
        {
            get
            {
                return m_isNamespaceSubset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isNamespaceSubset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isNamespaceSubset = value;
            }
        }

        /// <remarks />
        public PropertyState<IdType[]> StaticNodeIdTypes
        {
            get
            {
                return m_staticNodeIdTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNodeIdTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNodeIdTypes = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> StaticNumericNodeIdRange
        {
            get
            {
                return m_staticNumericNodeIdRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNumericNodeIdRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNumericNodeIdRange = value;
            }
        }

        /// <remarks />
        public PropertyState<string> StaticStringNodeIdPattern
        {
            get
            {
                return m_staticStringNodeIdPattern;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticStringNodeIdPattern, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticStringNodeIdPattern = value;
            }
        }

        /// <remarks />
        public AddressSpaceFileState NamespaceFile
        {
            get
            {
                return m_namespaceFile;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceFile, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceFile = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_namespaceUri != null)
            {
                children.Add(m_namespaceUri);
            }

            if (m_namespaceVersion != null)
            {
                children.Add(m_namespaceVersion);
            }

            if (m_namespacePublicationDate != null)
            {
                children.Add(m_namespacePublicationDate);
            }

            if (m_isNamespaceSubset != null)
            {
                children.Add(m_isNamespaceSubset);
            }

            if (m_staticNodeIdTypes != null)
            {
                children.Add(m_staticNodeIdTypes);
            }

            if (m_staticNumericNodeIdRange != null)
            {
                children.Add(m_staticNumericNodeIdRange);
            }

            if (m_staticStringNodeIdPattern != null)
            {
                children.Add(m_staticStringNodeIdPattern);
            }

            if (m_namespaceFile != null)
            {
                children.Add(m_namespaceFile);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NamespaceUri:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceUri == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceVersion:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceVersion == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceVersion = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceVersion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespacePublicationDate:
                {
                    if (createOrReplace)
                    {
                        if (NamespacePublicationDate == null)
                        {
                            if (replacement == null)
                            {
                                NamespacePublicationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                NamespacePublicationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = NamespacePublicationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.IsNamespaceSubset:
                {
                    if (createOrReplace)
                    {
                        if (IsNamespaceSubset == null)
                        {
                            if (replacement == null)
                            {
                                IsNamespaceSubset = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsNamespaceSubset = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsNamespaceSubset;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNodeIdTypes:
                {
                    if (createOrReplace)
                    {
                        if (StaticNodeIdTypes == null)
                        {
                            if (replacement == null)
                            {
                                StaticNodeIdTypes = new PropertyState<IdType[]>(this);
                            }
                            else
                            {
                                StaticNodeIdTypes = (PropertyState<IdType[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNodeIdTypes;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNumericNodeIdRange:
                {
                    if (createOrReplace)
                    {
                        if (StaticNumericNodeIdRange == null)
                        {
                            if (replacement == null)
                            {
                                StaticNumericNodeIdRange = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                StaticNumericNodeIdRange = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNumericNodeIdRange;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticStringNodeIdPattern:
                {
                    if (createOrReplace)
                    {
                        if (StaticStringNodeIdPattern == null)
                        {
                            if (replacement == null)
                            {
                                StaticStringNodeIdPattern = new PropertyState<string>(this);
                            }
                            else
                            {
                                StaticStringNodeIdPattern = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = StaticStringNodeIdPattern;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceFile:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceFile == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceFile = new AddressSpaceFileState(this);
                            }
                            else
                            {
                                NamespaceFile = (AddressSpaceFileState)replacement;
                            }
                        }
                    }

                    instance = NamespaceFile;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_namespaceUri;
        private PropertyState<string> m_namespaceVersion;
        private PropertyState<DateTime> m_namespacePublicationDate;
        private PropertyState<bool> m_isNamespaceSubset;
        private PropertyState<IdType[]> m_staticNodeIdTypes;
        private PropertyState<string[]> m_staticNumericNodeIdRange;
        private PropertyState<string> m_staticStringNodeIdPattern;
        private AddressSpaceFileState m_namespaceFile;
        #endregion
    }
    #endif
    #endregion

    #region NamespacesState Class
    #if (!OPCUA_EXCLUDE_NamespacesState)
    /// <summary>
    /// Stores an instance of the NamespacesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespacesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NamespacesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespacesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddressSpaceFile != null)
            {
                AddressSpaceFile.Initialize(context, AddressSpaceFile_InitializationString);
            }
        }

        #region Initialization String
        private const string AddressSpaceFile_InitializationString =
           "//////////8EYIAKAQAAAAAAEAAAAEFkZHJlc3NTcGFjZUZpbGUBAJstAC8BAEstmy0AAP////8KAAAA" +
           "FWCJCgIAAAAAAAQAAABTaXplAQCcLQAuAEScLQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "V3JpdGFibGUBAJYxAC4ARJYxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFi" +
           "bGUBAJcxAC4ARJcxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAJ8tAC4A" +
           "RJ8tAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQCgLQAvAQA8LaAtAAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoS0ALgBEoS0AAJYBAAAAAQAqAQETAAAABAAA" +
           "AE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBAKItAC4ARKItAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAKMtAC8BAD8toy0A" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCkLQAuAESkLQAAlgEAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAABAAAAFJlYWQBAKUtAC8BAEEtpS0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQCmLQAuAESmLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAq" +
           "AQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEApy0ALgBEpy0AAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD///" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEAqC0ALwEA" +
           "RC2oLQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKktAC4ARKktAACWAgAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQCqLQAv" +
           "AQBGLaotAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAqy0ALgBEqy0AAJYB" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAKwtAC4ARKwtAACWAQAAAAEAKgEBFwAAAAgA" +
           "AABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAA" +
           "AFNldFBvc2l0aW9uAQCtLQAvAQBJLa0tAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEAri0ALgBEri0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEB" +
           "FwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAE5hbWVzcGFjZXNUeXBlSW5zdGFuY2UBAH0tAQB9LX0tAAD/////" +
           "AQAAAARggAoBAAAAAAAQAAAAQWRkcmVzc1NwYWNlRmlsZQEAmy0ALwEASy2bLQAA/////woAAAAVYIkK" +
           "AgAAAAAABAAAAFNpemUBAJwtAC4ARJwtAAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0" +
           "YWJsZQEAljEALgBEljEAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEA" +
           "lzEALgBElzEAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAny0ALgBEny0A" +
           "AAAF/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAKAtAC8BADwtoC0AAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQChLQAuAEShLQAAlgEAAAABACoBARMAAAAEAAAATW9k" +
           "ZQAD/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAoi0ALgBEoi0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAoy0ALwEAPy2jLQAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKQtAC4ARKQtAACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAA" +
           "AAAEAAAAUmVhZAEApS0ALwEAQS2lLQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBAKYtAC4ARKYtAACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUA" +
           "AAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQCnLQAuAESnLQAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQCoLQAvAQBELagt" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAqS0ALgBEqS0AAJYCAAAAAQAq" +
           "AQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAKotAC8BAEYt" +
           "qi0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCrLQAuAESrLQAAlgEAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEArC0ALgBErC0AAJYBAAAAAQAqAQEXAAAACAAAAFBv" +
           "c2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0" +
           "UG9zaXRpb24BAK0tAC8BAEktrS0AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQCuLQAuAESuLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAA" +
           "CAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddressSpaceFileState AddressSpaceFile
        {
            get
            {
                return m_addressSpaceFile;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addressSpaceFile, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addressSpaceFile = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addressSpaceFile != null)
            {
                children.Add(m_addressSpaceFile);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddressSpaceFile:
                {
                    if (createOrReplace)
                    {
                        if (AddressSpaceFile == null)
                        {
                            if (replacement == null)
                            {
                                AddressSpaceFile = new AddressSpaceFileState(this);
                            }
                            else
                            {
                                AddressSpaceFile = (AddressSpaceFileState)replacement;
                            }
                        }
                    }

                    instance = AddressSpaceFile;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddressSpaceFileState m_addressSpaceFile;
        #endregion
    }
    #endif
    #endregion

    #region BaseEventState Class
    #if (!OPCUA_EXCLUDE_BaseEventState)
    /// <summary>
    /// Stores an instance of the BaseEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseEventState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAEJhc2VFdmVudFR5cGVJbnN0YW5jZQEA+QcBAPkH+QcAAP////8J" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQD6BwAuAET6BwAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQD7BwAuAET7BwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEA/AcALgBE/AcAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "AP0HAC4ARP0HAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQD+BwAuAET+BwAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA/wcALgBE/wcAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQB2DAAuAER2DAAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQACCAAuAEQCCAAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBAAMIAC4ARAMIAAAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> EventId
        {
            get
            {
                return m_eventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventId = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> EventType
        {
            get
            {
                return m_eventType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventType = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> SourceNode
        {
            get
            {
                return m_sourceNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceNode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SourceName
        {
            get
            {
                return m_sourceName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> Time
        {
            get
            {
                return m_time;
            }

            set
            {
                if (!Object.ReferenceEquals(m_time, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_time = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> ReceiveTime
        {
            get
            {
                return m_receiveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_receiveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_receiveTime = value;
            }
        }

        /// <remarks />
        public PropertyState<TimeZoneDataType> LocalTime
        {
            get
            {
                return m_localTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Message
        {
            get
            {
                return m_message;
            }

            set
            {
                if (!Object.ReferenceEquals(m_message, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_message = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Severity
        {
            get
            {
                return m_severity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severity = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventId != null)
            {
                children.Add(m_eventId);
            }

            if (m_eventType != null)
            {
                children.Add(m_eventType);
            }

            if (m_sourceNode != null)
            {
                children.Add(m_sourceNode);
            }

            if (m_sourceName != null)
            {
                children.Add(m_sourceName);
            }

            if (m_time != null)
            {
                children.Add(m_time);
            }

            if (m_receiveTime != null)
            {
                children.Add(m_receiveTime);
            }

            if (m_localTime != null)
            {
                children.Add(m_localTime);
            }

            if (m_message != null)
            {
                children.Add(m_message);
            }

            if (m_severity != null)
            {
                children.Add(m_severity);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventId:
                {
                    if (createOrReplace)
                    {
                        if (EventId == null)
                        {
                            if (replacement == null)
                            {
                                EventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                EventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = EventId;
                    break;
                }

                case Opc.Ua.BrowseNames.EventType:
                {
                    if (createOrReplace)
                    {
                        if (EventType == null)
                        {
                            if (replacement == null)
                            {
                                EventType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                EventType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = EventType;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceNode:
                {
                    if (createOrReplace)
                    {
                        if (SourceNode == null)
                        {
                            if (replacement == null)
                            {
                                SourceNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SourceNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SourceNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceName:
                {
                    if (createOrReplace)
                    {
                        if (SourceName == null)
                        {
                            if (replacement == null)
                            {
                                SourceName = new PropertyState<string>(this);
                            }
                            else
                            {
                                SourceName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SourceName;
                    break;
                }

                case Opc.Ua.BrowseNames.Time:
                {
                    if (createOrReplace)
                    {
                        if (Time == null)
                        {
                            if (replacement == null)
                            {
                                Time = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                Time = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = Time;
                    break;
                }

                case Opc.Ua.BrowseNames.ReceiveTime:
                {
                    if (createOrReplace)
                    {
                        if (ReceiveTime == null)
                        {
                            if (replacement == null)
                            {
                                ReceiveTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ReceiveTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ReceiveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LocalTime:
                {
                    if (createOrReplace)
                    {
                        if (LocalTime == null)
                        {
                            if (replacement == null)
                            {
                                LocalTime = new PropertyState<TimeZoneDataType>(this);
                            }
                            else
                            {
                                LocalTime = (PropertyState<TimeZoneDataType>)replacement;
                            }
                        }
                    }

                    instance = LocalTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Message:
                {
                    if (createOrReplace)
                    {
                        if (Message == null)
                        {
                            if (replacement == null)
                            {
                                Message = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Message = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Message;
                    break;
                }

                case Opc.Ua.BrowseNames.Severity:
                {
                    if (createOrReplace)
                    {
                        if (Severity == null)
                        {
                            if (replacement == null)
                            {
                                Severity = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Severity = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Severity;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_eventId;
        private PropertyState<NodeId> m_eventType;
        private PropertyState<NodeId> m_sourceNode;
        private PropertyState<string> m_sourceName;
        private PropertyState<DateTime> m_time;
        private PropertyState<DateTime> m_receiveTime;
        private PropertyState<TimeZoneDataType> m_localTime;
        private PropertyState<LocalizedText> m_message;
        private PropertyState<ushort> m_severity;
        #endregion
    }
    #endif
    #endregion

    #region AuditEventState Class
    #if (!OPCUA_EXCLUDE_AuditEventState)
    /// <summary>
    /// Stores an instance of the AuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAEF1ZGl0RXZlbnRUeXBlSW5zdGFuY2UBAAQIAQAECAQIAAD/////" +
           "DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAgAwALgBEgAwAAAAP/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEV2ZW50VHlwZQEAgQwALgBEgQwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5vZGUBAIIMAC4ARIIMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1l" +
           "AQCDDAAuAESDDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAhAwALgBEhAwAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAIUMAC4ARIUMAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAhgwALgBEhgwAAAEA0CL/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAhwwALgBEhwwAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFNldmVyaXR5AQCIDAAuAESIDAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0" +
           "aW9uVGltZVN0YW1wAQAFCAAuAEQFCAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0" +
           "dXMBAAYIAC4ARAYIAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAEABwgALgBE" +
           "BwgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAEACAgALgBE" +
           "CAgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEACQgALgBECQgAAAAM" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ActionTimeStamp
        {
            get
            {
                return m_actionTimeStamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actionTimeStamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actionTimeStamp = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ServerId
        {
            get
            {
                return m_serverId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientAuditEntryId
        {
            get
            {
                return m_clientAuditEntryId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientAuditEntryId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientAuditEntryId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_actionTimeStamp != null)
            {
                children.Add(m_actionTimeStamp);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_serverId != null)
            {
                children.Add(m_serverId);
            }

            if (m_clientAuditEntryId != null)
            {
                children.Add(m_clientAuditEntryId);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActionTimeStamp:
                {
                    if (createOrReplace)
                    {
                        if (ActionTimeStamp == null)
                        {
                            if (replacement == null)
                            {
                                ActionTimeStamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ActionTimeStamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ActionTimeStamp;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Status = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerId:
                {
                    if (createOrReplace)
                    {
                        if (ServerId == null)
                        {
                            if (replacement == null)
                            {
                                ServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientAuditEntryId:
                {
                    if (createOrReplace)
                    {
                        if (ClientAuditEntryId == null)
                        {
                            if (replacement == null)
                            {
                                ClientAuditEntryId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientAuditEntryId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientAuditEntryId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_actionTimeStamp;
        private PropertyState<bool> m_status;
        private PropertyState<string> m_serverId;
        private PropertyState<string> m_clientAuditEntryId;
        private PropertyState<string> m_clientUserId;
        #endregion
    }
    #endif
    #endregion

    #region AuditSecurityEventState Class
    #if (!OPCUA_EXCLUDE_AuditSecurityEventState)
    /// <summary>
    /// Stores an instance of the AuditSecurityEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSecurityEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditSecurityEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSecurityEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEF1ZGl0U2VjdXJpdHlFdmVudFR5cGVJbnN0YW5jZQEACggBAAoI" +
           "CggAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCJDAAuAESJDAAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQCKDAAuAESKDAAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAiwwALgBEiwwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBAIwMAC4ARIwMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCNDAAu" +
           "AESNDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAjgwALgBEjgwA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCPDAAuAESPDAAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCQDAAuAESQDAAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAJEMAC4ARJEMAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABBY3Rpb25UaW1lU3RhbXABAJIMAC4ARJIMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAFN0YXR1cwEAkwwALgBEkwwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklk" +
           "AQCUDAAuAESUDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlk" +
           "AQCVDAAuAESVDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCWDAAu" +
           "AESWDAAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditChannelEventState)
    /// <summary>
    /// Stores an instance of the AuditChannelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditChannelEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEF1ZGl0Q2hhbm5lbEV2ZW50VHlwZUluc3RhbmNlAQALCAEACwgL" +
           "CAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAJcMAC4ARJcMAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAJgMAC4ARJgMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQCZDAAuAESZDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAmgwALgBEmgwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAJsMAC4A" +
           "RJsMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCcDAAuAEScDAAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJ0MAC4ARJ0MAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJ4MAC4ARJ4MAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAnwwALgBEnwwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEAoAwALgBEoAwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQChDAAuAEShDAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "AKIMAC4ARKIMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AKMMAC4ARKMMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAKQMAC4A" +
           "RKQMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVDaGFubmVsSWQBALkKAC4ARLkK" +
           "AAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditOpenSecureChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditOpenSecureChannelEventState)
    /// <summary>
    /// Stores an instance of the AuditOpenSecureChannelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditOpenSecureChannelEventState : AuditChannelEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditOpenSecureChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditOpenSecureChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0T3BlblNlY3VyZUNoYW5uZWxFdmVudFR5cGVJbnN0YW5j" +
           "ZQEADAgBAAwIDAgAAP////8VAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQClDAAuAESlDAAAAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQCmDAAuAESmDAAAABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEApwwALgBEpwwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUBAKgMAC4ARKgMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAQCpDAAuAESpDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA" +
           "qgwALgBEqgwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCrDAAuAESr" +
           "DAAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCsDAAuAESsDAAAABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAK0MAC4ARK0MAAAABf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAK4MAC4ARK4MAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABgAAAFN0YXR1cwEArwwALgBErwwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNlcnZlcklkAQCwDAAuAESwDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVk" +
           "aXRFbnRyeUlkAQCxDAAuAESxDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNl" +
           "cklkAQCyDAAuAESyDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJlQ2hhbm5lbElk" +
           "AQCzDAAuAESzDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUB" +
           "AA0IAC4ARA0IAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAABsAAABDbGllbnRDZXJ0aWZpY2F0ZVRo" +
           "dW1icHJpbnQBALoKAC4ARLoKAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZXF1ZXN0VHlw" +
           "ZQEADggALgBEDggAAAEAOwH/////AQH/////AAAAABVgiQoCAAAAAAARAAAAU2VjdXJpdHlQb2xpY3lV" +
           "cmkBAA8IAC4ARA8IAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZWN1cml0eU1vZGUBABEI" +
           "AC4ARBEIAAABAC4B/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFJlcXVlc3RlZExpZmV0aW1lAQAS" +
           "CAAuAEQSCAAAAQAiAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<SecurityTokenRequestType> RequestType
        {
            get
            {
                return m_requestType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestType = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RequestedLifetime
        {
            get
            {
                return m_requestedLifetime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedLifetime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedLifetime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_requestType != null)
            {
                children.Add(m_requestType);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_requestedLifetime != null)
            {
                children.Add(m_requestedLifetime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestType:
                {
                    if (createOrReplace)
                    {
                        if (RequestType == null)
                        {
                            if (replacement == null)
                            {
                                RequestType = new PropertyState<SecurityTokenRequestType>(this);
                            }
                            else
                            {
                                RequestType = (PropertyState<SecurityTokenRequestType>)replacement;
                            }
                        }
                    }

                    instance = RequestType;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedLifetime:
                {
                    if (createOrReplace)
                    {
                        if (RequestedLifetime == null)
                        {
                            if (replacement == null)
                            {
                                RequestedLifetime = new PropertyState<double>(this);
                            }
                            else
                            {
                                RequestedLifetime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RequestedLifetime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<SecurityTokenRequestType> m_requestType;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<double> m_requestedLifetime;
        #endregion
    }
    #endif
    #endregion

    #region AuditSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSessionEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEF1ZGl0U2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAVCAEAFQgV" +
           "CAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBALQMAC4ARLQMAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBALUMAC4ARLUMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQC2DAAuAES2DAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAtwwALgBEtwwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBALgMAC4A" +
           "RLgMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQC5DAAuAES5DAAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBALoMAC4ARLoMAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBALsMAC4ARLsMAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAvAwALgBEvAwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEAvQwALgBEvQwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQC+DAAuAES+DAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "AL8MAC4ARL8MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AMAMAC4ARMAMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAMEMAC4A" +
           "RMEMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBABYIAC4ARBYIAAAAEf//" +
           "//8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_sessionId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCreateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditCreateSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditCreateSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCreateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCreateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0Q3JlYXRlU2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAX" +
           "CAEAFwgXCAAA/////xMAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAMIMAC4ARMIMAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAMMMAC4ARMMMAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQDEDAAuAETEDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAxQwALgBExQwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AMYMAC4ARMYMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDHDAAu" +
           "AETHDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAMgMAC4ARMgMAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAMkMAC4ARMkMAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAygwALgBEygwAAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAywwALgBEywwAAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQDMDAAuAETMDAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAM0MAC4ARM0MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAM4MAC4ARM4MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AM8MAC4ARM8MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAE04AC4ARE04" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVDaGFubmVsSWQBABgIAC4ARBgIAAAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAABEAAABDbGllbnRDZXJ0aWZpY2F0ZQEAGQgALgBEGQgAAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAGwAAAENsaWVudENlcnRpZmljYXRlVGh1bWJwcmludAEAuwoA" +
           "LgBEuwoAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJldmlzZWRTZXNzaW9uVGltZW91dAEA" +
           "GggALgBEGggAAAEAIgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RevisedSessionTimeout
        {
            get
            {
                return m_revisedSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_revisedSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_revisedSessionTimeout = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_revisedSessionTimeout != null)
            {
                children.Add(m_revisedSessionTimeout);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RevisedSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (RevisedSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                RevisedSessionTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                RevisedSessionTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RevisedSessionTimeout;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<double> m_revisedSessionTimeout;
        #endregion
    }
    #endif
    #endregion

    #region AuditUrlMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditUrlMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditUrlMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUrlMismatchEventState : AuditCreateSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUrlMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUrlMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0VXJsTWlzbWF0Y2hFdmVudFR5cGVJbnN0YW5jZQEAvAoB" +
           "ALwKvAoAAP////8UAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDRDAAuAETRDAAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDSDAAuAETSDAAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEA0wwALgBE0wwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBANQMAC4ARNQMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQDV" +
           "DAAuAETVDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA1gwALgBE" +
           "1gwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDXDAAuAETXDAAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDYDAAuAETYDAAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBANkMAC4ARNkMAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABANoMAC4ARNoMAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEA2wwALgBE2wwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQDcDAAuAETcDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQDdDAAuAETdDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQDe" +
           "DAAuAETeDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQBOOAAuAEROOAAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJlQ2hhbm5lbElkAQDgDAAuAETgDAAAAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUBAOEMAC4AROEMAAAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABsAAABDbGllbnRDZXJ0aWZpY2F0ZVRodW1icHJpbnQBAOIMAC4A" +
           "ROIMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABUAAABSZXZpc2VkU2Vzc2lvblRpbWVvdXQBAOMM" +
           "AC4AROMMAAABACIB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEVuZHBvaW50VXJsAQC9CgAuAES9" +
           "CgAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_endpointUrl;
        #endregion
    }
    #endif
    #endregion

    #region AuditActivateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditActivateSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditActivateSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditActivateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditActivateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditActivateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEF1ZGl0QWN0aXZhdGVTZXNzaW9uRXZlbnRUeXBlSW5zdGFuY2UB" +
           "ABsIAQAbCBsIAAD/////EgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA5AwALgBE5AwAAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA5QwALgBE5QwAAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAOYMAC4AROYMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAQDnDAAuAETnDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQEA6AwALgBE6AwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAOkM" +
           "AC4AROkMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA6gwALgBE6gwA" +
           "AAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA6wwALgBE6wwAAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDsDAAuAETsDAAAAAX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQDtDAAuAETtDAAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAYAAABTdGF0dXMBAO4MAC4ARO4MAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXJ2ZXJJZAEA7wwALgBE7wwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0" +
           "RW50cnlJZAEA8AwALgBE8AwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJ" +
           "ZAEA8QwALgBE8QwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEA8gwALgBE" +
           "8gwAAAAR/////wEB/////wAAAAAXYIkKAgAAAAAAGgAAAENsaWVudFNvZnR3YXJlQ2VydGlmaWNhdGVz" +
           "AQAcCAAuAEQcCAAAAQBYAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAEQAAAFVzZXJJZGVu" +
           "dGl0eVRva2VuAQAdCAAuAEQdCAAAAQA8Af////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVD" +
           "aGFubmVsSWQBAN0sAC4ARN0sAAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> ClientSoftwareCertificates
        {
            get
            {
                return m_clientSoftwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientSoftwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientSoftwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<UserIdentityToken> UserIdentityToken
        {
            get
            {
                return m_userIdentityToken;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userIdentityToken, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userIdentityToken = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientSoftwareCertificates != null)
            {
                children.Add(m_clientSoftwareCertificates);
            }

            if (m_userIdentityToken != null)
            {
                children.Add(m_userIdentityToken);
            }

            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientSoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (ClientSoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                ClientSoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                ClientSoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = ClientSoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.UserIdentityToken:
                {
                    if (createOrReplace)
                    {
                        if (UserIdentityToken == null)
                        {
                            if (replacement == null)
                            {
                                UserIdentityToken = new PropertyState<UserIdentityToken>(this);
                            }
                            else
                            {
                                UserIdentityToken = (PropertyState<UserIdentityToken>)replacement;
                            }
                        }
                    }

                    instance = UserIdentityToken;
                    break;
                }

                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SignedSoftwareCertificate[]> m_clientSoftwareCertificates;
        private PropertyState<UserIdentityToken> m_userIdentityToken;
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCancelEventState Class
    #if (!OPCUA_EXCLUDE_AuditCancelEventState)
    /// <summary>
    /// Stores an instance of the AuditCancelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCancelEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCancelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCancelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEF1ZGl0Q2FuY2VsRXZlbnRUeXBlSW5zdGFuY2UBAB4IAQAeCB4I" +
           "AAD/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA8wwALgBE8wwAAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA9AwALgBE9AwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUBAPUMAC4ARPUMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOYW1lAQD2DAAuAET2DAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA9wwALgBE" +
           "9wwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAPgMAC4ARPgMAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA+QwALgBE+QwAAAEA0CL/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA+gwALgBE+gwAAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFNldmVyaXR5AQD7DAAuAET7DAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAP" +
           "AAAAQWN0aW9uVGltZVN0YW1wAQD8DAAuAET8DAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYA" +
           "AABTdGF0dXMBAP0MAC4ARP0MAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAEA" +
           "/gwALgBE/gwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAEA" +
           "/wwALgBE/wwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAAA0ALgBE" +
           "AA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAAQ0ALgBEAQ0AAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADQAAAFJlcXVlc3RIYW5kbGUBAB8IAC4ARB8IAAAAB/////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> RequestHandle
        {
            get
            {
                return m_requestHandle;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestHandle, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestHandle = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_requestHandle != null)
            {
                children.Add(m_requestHandle);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RequestHandle:
                {
                    if (createOrReplace)
                    {
                        if (RequestHandle == null)
                        {
                            if (replacement == null)
                            {
                                RequestHandle = new PropertyState<uint>(this);
                            }
                            else
                            {
                                RequestHandle = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = RequestHandle;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_requestHandle;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0Q2VydGlmaWNhdGVFdmVudFR5cGVJbnN0YW5jZQEAIAgB" +
           "ACAIIAgAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQACDQAuAEQCDQAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQADDQAuAEQDDQAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEABA0ALgBEBA0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBAAUNAC4ARAUNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAG" +
           "DQAuAEQGDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEABw0ALgBE" +
           "Bw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAIDQAuAEQIDQAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAJDQAuAEQJDQAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAAoNAC4ARAoNAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAAsNAC4ARAsNAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEADA0ALgBEDA0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQANDQAuAEQNDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQAODQAuAEQODQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAP" +
           "DQAuAEQPDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBACEIAC4ARCEI" +
           "AAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateDataMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateDataMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateDataMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateDataMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateDataMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateDataMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEF1ZGl0Q2VydGlmaWNhdGVEYXRhTWlzbWF0Y2hFdmVudFR5cGVJ" +
           "bnN0YW5jZQEAIggBACIIIggAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAQDQAuAEQQDQAA" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQARDQAuAEQRDQAAABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEAEg0ALgBEEg0AAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5hbWUBABMNAC4ARBMNAAAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAQAUDQAuAEQUDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZl" +
           "VGltZQEAFQ0ALgBEFQ0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAW" +
           "DQAuAEQWDQAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAXDQAuAEQXDQAA" +
           "ABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBABgNAC4ARBgNAAAABf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABABkNAC4ARBkNAAABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwEAGg0ALgBEGg0AAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFNlcnZlcklkAQAbDQAuAEQbDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xp" +
           "ZW50QXVkaXRFbnRyeUlkAQAcDQAuAEQcDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xp" +
           "ZW50VXNlcklkAQAdDQAuAEQdDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNh" +
           "dGUBAB4NAC4ARB4NAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABJbnZhbGlkSG9zdG5hbWUB" +
           "ACMIAC4ARCMIAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABJbnZhbGlkVXJpAQAkCAAuAEQk" +
           "CAAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> InvalidHostname
        {
            get
            {
                return m_invalidHostname;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidHostname, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidHostname = value;
            }
        }

        /// <remarks />
        public PropertyState<string> InvalidUri
        {
            get
            {
                return m_invalidUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_invalidHostname != null)
            {
                children.Add(m_invalidHostname);
            }

            if (m_invalidUri != null)
            {
                children.Add(m_invalidUri);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InvalidHostname:
                {
                    if (createOrReplace)
                    {
                        if (InvalidHostname == null)
                        {
                            if (replacement == null)
                            {
                                InvalidHostname = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidHostname = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidHostname;
                    break;
                }

                case Opc.Ua.BrowseNames.InvalidUri:
                {
                    if (createOrReplace)
                    {
                        if (InvalidUri == null)
                        {
                            if (replacement == null)
                            {
                                InvalidUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_invalidHostname;
        private PropertyState<string> m_invalidUri;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateExpiredEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateExpiredEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateExpiredEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateExpiredEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateExpiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateExpiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVFeHBpcmVkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACUIAQAlCCUIAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAHw0ALgBEHw0AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAIA0ALgBEIA0AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBACENAC4ARCENAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQAiDQAuAEQiDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEAIw0ALgBEIw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "ACQNAC4ARCQNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAJQ0ALgBE" +
           "JQ0AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAJg0ALgBEJg0AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAnDQAuAEQnDQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQAoDQAuAEQoDQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBACkNAC4ARCkNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAKg0ALgBEKg0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAKw0ALgBEKw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEALA0ALgBELA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAQAt" +
           "DQAuAEQtDQAAAA//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateInvalidEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateInvalidEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateInvalidEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateInvalidEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateInvalidEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateInvalidEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVJbnZhbGlkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACYIAQAmCCYIAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEALg0ALgBELg0AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEALw0ALgBELw0AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBADANAC4ARDANAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQAxDQAuAEQxDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEAMg0ALgBEMg0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "ADMNAC4ARDMNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEANA0ALgBE" +
           "NA0AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEANQ0ALgBENQ0AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQA2DQAuAEQ2DQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQA3DQAuAEQ3DQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBADgNAC4ARDgNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAOQ0ALgBEOQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAOg0ALgBEOg0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEAOw0ALgBEOw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAQA8" +
           "DQAuAEQ8DQAAAA//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateUntrustedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateUntrustedEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateUntrustedEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateUntrustedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateUntrustedEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateUntrustedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEF1ZGl0Q2VydGlmaWNhdGVVbnRydXN0ZWRFdmVudFR5cGVJbnN0" +
           "YW5jZQEAJwgBACcIJwgAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQA9DQAuAEQ9DQAAAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQA+DQAuAEQ+DQAAABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEAPw0ALgBEPw0AAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUBAEANAC4AREANAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQA" +
           "AABUaW1lAQBBDQAuAERBDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGlt" +
           "ZQEAQg0ALgBEQg0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBDDQAu" +
           "AERDDQAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBEDQAuAEREDQAAABX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAEUNAC4AREUNAAAABf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAEYNAC4AREYNAAABACYB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABgAAAFN0YXR1cwEARw0ALgBERw0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAFNlcnZlcklkAQBIDQAuAERIDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50" +
           "QXVkaXRFbnRyeUlkAQBJDQAuAERJDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50" +
           "VXNlcklkAQBKDQAuAERKDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUB" +
           "AEsNAC4AREsNAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateRevokedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateRevokedEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateRevokedEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateRevokedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateRevokedEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateRevokedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVSZXZva2VkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACgIAQAoCCgIAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEATA0ALgBETA0AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEATQ0ALgBETQ0AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAE4NAC4ARE4NAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQBPDQAuAERPDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEAUA0ALgBEUA0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "AFENAC4ARFENAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAUg0ALgBE" +
           "Ug0AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAUw0ALgBEUw0AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBUDQAuAERUDQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQBVDQAuAERVDQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBAFYNAC4ARFYNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAVw0ALgBEVw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAWA0ALgBEWA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEAWQ0ALgBEWQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAQBa" +
           "DQAuAERaDQAAAA//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAEF1ZGl0Q2VydGlmaWNhdGVNaXNtYXRjaEV2ZW50VHlwZUluc3Rh" +
           "bmNlAQApCAEAKQgpCAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAFsNAC4ARFsNAAAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAFwNAC4ARFwNAAAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQBdDQAuAERdDQAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQEAXg0ALgBEXg0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUBAF8NAC4ARF8NAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AQBgDQAuAERgDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAGENAC4A" +
           "RGENAAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAGINAC4ARGINAAAAFf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAYw0ALgBEYw0AAAAF/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAZA0ALgBEZA0AAAEAJgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAGAAAAU3RhdHVzAQBlDQAuAERlDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAU2VydmVySWQBAGYNAC4ARGYNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRB" +
           "dWRpdEVudHJ5SWQBAGcNAC4ARGcNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBAGgNAC4ARGgNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEA" +
           "aQ0ALgBEaQ0AAAAP/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditNodeManagementEventState Class
    #if (!OPCUA_EXCLUDE_AuditNodeManagementEventState)
    /// <summary>
    /// Stores an instance of the AuditNodeManagementEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditNodeManagementEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditNodeManagementEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEF1ZGl0Tm9kZU1hbmFnZW1lbnRFdmVudFR5cGVJbnN0YW5jZQEA" +
           "KggBACoIKggAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBqDQAuAERqDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBrDQAuAERrDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEAbA0ALgBEbA0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAG0NAC4ARG0NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQBuDQAuAERuDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAbw0A" +
           "LgBEbw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBwDQAuAERwDQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBxDQAuAERxDQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAHINAC4ARHINAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAHMNAC4ARHMNAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAdA0ALgBEdA0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQB1DQAuAER1DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQB2DQAuAER2DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQB3DQAuAER3DQAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditAddNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddNodesEventState)
    /// <summary>
    /// Stores an instance of the AuditAddNodesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditAddNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEF1ZGl0QWRkTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEAKwgBACsI" +
           "KwgAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQB4DQAuAER4DQAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQB5DQAuAER5DQAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAeg0ALgBEeg0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBAHsNAC4ARHsNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQB8DQAu" +
           "AER8DQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAfQ0ALgBEfQ0A" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQB+DQAuAER+DQAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQB/DQAuAER/DQAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAIANAC4ARIANAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABBY3Rpb25UaW1lU3RhbXABAIENAC4ARIENAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAFN0YXR1cwEAgg0ALgBEgg0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklk" +
           "AQCDDQAuAESDDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlk" +
           "AQCEDQAuAESEDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCFDQAu" +
           "AESFDQAAAAz/////AQH/////AAAAABdgiQoCAAAAAAAKAAAATm9kZXNUb0FkZAEALAgALgBELAgAAAEA" +
           "eAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddNodesItem[]> NodesToAdd
        {
            get
            {
                return m_nodesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToAdd != null)
            {
                children.Add(m_nodesToAdd);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (NodesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                NodesToAdd = new PropertyState<AddNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToAdd = (PropertyState<AddNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddNodesItem[]> m_nodesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteNodesEventState)
    /// <summary>
    /// Stores an instance of the AuditDeleteNodesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditDeleteNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0RGVsZXRlTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEALQgB" +
           "AC0ILQgAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCGDQAuAESGDQAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQCHDQAuAESHDQAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEAiA0ALgBEiA0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBAIkNAC4ARIkNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCK" +
           "DQAuAESKDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAiw0ALgBE" +
           "iw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCMDQAuAESMDQAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCNDQAuAESNDQAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAI4NAC4ARI4NAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAI8NAC4ARI8NAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEAkA0ALgBEkA0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQCRDQAuAESRDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQCSDQAuAESSDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCT" +
           "DQAuAESTDQAAAAz/////AQH/////AAAAABdgiQoCAAAAAAANAAAATm9kZXNUb0RlbGV0ZQEALggALgBE" +
           "LggAAAEAfgEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteNodesItem[]> NodesToDelete
        {
            get
            {
                return m_nodesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToDelete != null)
            {
                children.Add(m_nodesToDelete);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (NodesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                NodesToDelete = new PropertyState<DeleteNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToDelete = (PropertyState<DeleteNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteNodesItem[]> m_nodesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditAddReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddReferencesEventState)
    /// <summary>
    /// Stores an instance of the AuditAddReferencesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditAddReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0QWRkUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNlAQAv" +
           "CAEALwgvCAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAJQNAC4ARJQNAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAJUNAC4ARJUNAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQCWDQAuAESWDQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAlw0ALgBElw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AJgNAC4ARJgNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCZDQAu" +
           "AESZDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJoNAC4ARJoNAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJsNAC4ARJsNAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAnA0ALgBEnA0AAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAnQ0ALgBEnQ0AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQCeDQAuAESeDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAJ8NAC4ARJ8NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAKANAC4ARKANAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AKENAC4ARKENAAAADP////8BAf////8AAAAAF2CJCgIAAAAAAA8AAABSZWZlcmVuY2VzVG9BZGQBADAI" +
           "AC4ARDAIAAABAHsBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddReferencesItem[]> ReferencesToAdd
        {
            get
            {
                return m_referencesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToAdd != null)
            {
                children.Add(m_referencesToAdd);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToAdd = new PropertyState<AddReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToAdd = (PropertyState<AddReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddReferencesItem[]> m_referencesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteReferencesEventState)
    /// <summary>
    /// Stores an instance of the AuditDeleteReferencesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditDeleteReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0RGVsZXRlUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNl" +
           "AQAxCAEAMQgxCAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAKINAC4ARKINAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAKMNAC4ARKMNAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQCkDQAuAESkDQAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEApQ0ALgBEpQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAKYNAC4ARKYNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCn" +
           "DQAuAESnDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAKgNAC4ARKgN" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAKkNAC4ARKkNAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAqg0ALgBEqg0AAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAqw0ALgBEqw0AAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQCsDQAuAESsDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAK0NAC4ARK0NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAK4NAC4ARK4NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAK8NAC4ARK8NAAAADP////8BAf////8AAAAAF2CJCgIAAAAAABIAAABSZWZlcmVuY2VzVG9EZWxl" +
           "dGUBADIIAC4ARDIIAAABAIEBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteReferencesItem[]> ReferencesToDelete
        {
            get
            {
                return m_referencesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToDelete != null)
            {
                children.Add(m_referencesToDelete);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToDelete = new PropertyState<DeleteReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToDelete = (PropertyState<DeleteReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteReferencesItem[]> m_referencesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEF1ZGl0VXBkYXRlRXZlbnRUeXBlSW5zdGFuY2UBADMIAQAzCDMI" +
           "AAD/////DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAsA0ALgBEsA0AAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAsQ0ALgBEsQ0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUBALINAC4ARLINAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOYW1lAQCzDQAuAESzDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAtA0ALgBE" +
           "tA0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBALUNAC4ARLUNAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAtg0ALgBEtg0AAAEA0CL/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAtw0ALgBEtw0AAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFNldmVyaXR5AQC4DQAuAES4DQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAP" +
           "AAAAQWN0aW9uVGltZVN0YW1wAQC5DQAuAES5DQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYA" +
           "AABTdGF0dXMBALoNAC4ARLoNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAEA" +
           "uw0ALgBEuw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAEA" +
           "vA0ALgBEvA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAvQ0ALgBE" +
           "vQ0AAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditWriteUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditWriteUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditWriteUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditWriteUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditWriteUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditWriteUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0V3JpdGVVcGRhdGVFdmVudFR5cGVJbnN0YW5jZQEANAgB" +
           "ADQINAgAAP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQC+DQAuAES+DQAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQC/DQAuAES/DQAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEAwA0ALgBEwA0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBAMENAC4ARMENAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQDC" +
           "DQAuAETCDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAww0ALgBE" +
           "ww0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDEDQAuAETEDQAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDFDQAuAETFDQAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAMYNAC4ARMYNAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAMcNAC4ARMcNAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEAyA0ALgBEyA0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQDJDQAuAETJDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQDKDQAuAETKDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQDL" +
           "DQAuAETLDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQXR0cmlidXRlSWQBAL4KAC4ARL4K" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABJbmRleFJhbmdlAQA1CAAuAEQ1CAAAAQAjAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABPbGRWYWx1ZQEANggALgBENggAAAAY/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAE5ld1ZhbHVlAQA3CAAuAEQ3CAAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> AttributeId
        {
            get
            {
                return m_attributeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_attributeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_attributeId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> IndexRange
        {
            get
            {
                return m_indexRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_indexRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_indexRange = value;
            }
        }

        /// <remarks />
        public PropertyState OldValue
        {
            get
            {
                return m_oldValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValue = value;
            }
        }

        /// <remarks />
        public PropertyState NewValue
        {
            get
            {
                return m_newValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValue = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_attributeId != null)
            {
                children.Add(m_attributeId);
            }

            if (m_indexRange != null)
            {
                children.Add(m_indexRange);
            }

            if (m_oldValue != null)
            {
                children.Add(m_oldValue);
            }

            if (m_newValue != null)
            {
                children.Add(m_newValue);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AttributeId:
                {
                    if (createOrReplace)
                    {
                        if (AttributeId == null)
                        {
                            if (replacement == null)
                            {
                                AttributeId = new PropertyState<uint>(this);
                            }
                            else
                            {
                                AttributeId = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = AttributeId;
                    break;
                }

                case Opc.Ua.BrowseNames.IndexRange:
                {
                    if (createOrReplace)
                    {
                        if (IndexRange == null)
                        {
                            if (replacement == null)
                            {
                                IndexRange = new PropertyState<string>(this);
                            }
                            else
                            {
                                IndexRange = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = IndexRange;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValue:
                {
                    if (createOrReplace)
                    {
                        if (OldValue == null)
                        {
                            if (replacement == null)
                            {
                                OldValue = new PropertyState(this);
                            }
                            else
                            {
                                OldValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldValue;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValue:
                {
                    if (createOrReplace)
                    {
                        if (NewValue == null)
                        {
                            if (replacement == null)
                            {
                                NewValue = new PropertyState(this);
                            }
                            else
                            {
                                NewValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewValue;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_attributeId;
        private PropertyState<string> m_indexRange;
        private PropertyState m_oldValue;
        private PropertyState m_newValue;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeVVwZGF0ZUV2ZW50VHlwZUluc3RhbmNlAQA4" +
           "CAEAOAg4CAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAMwNAC4ARMwNAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAM0NAC4ARM0NAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQDODQAuAETODQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAzw0ALgBEzw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "ANANAC4ARNANAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDRDQAu" +
           "AETRDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBANINAC4ARNINAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBANMNAC4ARNMNAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA1A0ALgBE1A0AAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEA1Q0ALgBE1Q0AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQDWDQAuAETWDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBANcNAC4ARNcNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBANgNAC4ARNgNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "ANkNAC4ARNkNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRhVHlwZUlk" +
           "AQC/CgAuAES/CgAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ParameterDataTypeId
        {
            get
            {
                return m_parameterDataTypeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_parameterDataTypeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_parameterDataTypeId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_parameterDataTypeId != null)
            {
                children.Add(m_parameterDataTypeId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ParameterDataTypeId:
                {
                    if (createOrReplace)
                    {
                        if (ParameterDataTypeId == null)
                        {
                            if (replacement == null)
                            {
                                ParameterDataTypeId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ParameterDataTypeId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ParameterDataTypeId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_parameterDataTypeId;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateMethodEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateMethodEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateMethodEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateMethodEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateMethodEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEF1ZGl0VXBkYXRlTWV0aG9kRXZlbnRUeXBlSW5zdGFuY2UBAE8I" +
           "AQBPCE8IAAD/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEANw4ALgBENw4AAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAOA4ALgBEOA4AAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBADkOAC4ARDkOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQA6DgAuAEQ6DgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "Ow4ALgBEOw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBADwOAC4A" +
           "RDwOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAPQ4ALgBEPQ4AAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAPg4ALgBEPg4AAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQA/DgAuAEQ/DgAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQBADgAuAERADgAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBAEEOAC4AREEOAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEAQg4ALgBEQg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEAQw4ALgBEQw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "RA4ALgBERA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQBQCAAuAERQCAAA" +
           "ABH/////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFEIAC4ARFEIAAAAGAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> MethodId
        {
            get
            {
                return m_methodId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_methodId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_methodId = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> InputArguments
        {
            get
            {
                return m_inputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputArguments = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_methodId != null)
            {
                children.Add(m_methodId);
            }

            if (m_inputArguments != null)
            {
                children.Add(m_inputArguments);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MethodId:
                {
                    if (createOrReplace)
                    {
                        if (MethodId == null)
                        {
                            if (replacement == null)
                            {
                                MethodId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                MethodId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = MethodId;
                    break;
                }

                case Opc.Ua.BrowseNames.InputArguments:
                {
                    if (createOrReplace)
                    {
                        if (InputArguments == null)
                        {
                            if (replacement == null)
                            {
                                InputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                InputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = InputArguments;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_methodId;
        private PropertyState<object[]> m_inputArguments;
        #endregion
    }
    #endif
    #endregion

    #region SystemEventState Class
    #if (!OPCUA_EXCLUDE_SystemEventState)
    /// <summary>
    /// Stores an instance of the SystemEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAFN5c3RlbUV2ZW50VHlwZUluc3RhbmNlAQBSCAEAUghSCAAA////" +
           "/wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAEUOAC4AREUOAAAAD/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAkAAABFdmVudFR5cGUBAEYOAC4AREYOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOb2RlAQBHDgAuAERHDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFt" +
           "ZQEASA4ALgBESA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAEkOAC4AREkOAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBKDgAuAERKDgAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAEsOAC4AREsOAAABANAi/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAEwOAC4AREwOAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABTZXZlcml0eQEATQ4ALgBETQ4AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DeviceFailureEventState Class
    #if (!OPCUA_EXCLUDE_DeviceFailureEventState)
    /// <summary>
    /// Stores an instance of the DeviceFailureEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeviceFailureEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DeviceFailureEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DeviceFailureEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAERldmljZUZhaWx1cmVFdmVudFR5cGVJbnN0YW5jZQEAUwgBAFMI" +
           "UwgAAP////8JAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBODgAuAERODgAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBPDgAuAERPDgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAUA4ALgBEUA4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBAFEOAC4ARFEOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQBSDgAu" +
           "AERSDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAUw4ALgBEUw4A" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBUDgAuAERUDgAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBVDgAuAERVDgAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAFYOAC4ARFYOAAAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemStatusChangeEventState Class
    #if (!OPCUA_EXCLUDE_SystemStatusChangeEventState)
    /// <summary>
    /// Stores an instance of the SystemStatusChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemStatusChangeEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemStatusChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemStatusChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAFN5c3RlbVN0YXR1c0NoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQC2" +
           "LAEAtiy2LAAA/////woAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBALcsAC4ARLcsAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBALgsAC4ARLgsAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQC5LAAuAES5LAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAuiwALgBEuiwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "ALssAC4ARLssAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQC8LAAu" +
           "AES8LAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAL0sAC4ARL0sAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAL4sAC4ARL4sAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAvywALgBEvywAAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACwAAAFN5c3RlbVN0YXRlAQCwLQAuAESwLQAAAQBUA/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ServerState> SystemState
        {
            get
            {
                return m_systemState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_systemState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_systemState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_systemState != null)
            {
                children.Add(m_systemState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SystemState:
                {
                    if (createOrReplace)
                    {
                        if (SystemState == null)
                        {
                            if (replacement == null)
                            {
                                SystemState = new PropertyState<ServerState>(this);
                            }
                            else
                            {
                                SystemState = (PropertyState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = SystemState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ServerState> m_systemState;
        #endregion
    }
    #endif
    #endregion

    #region BaseModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_BaseModelChangeEventState)
    /// <summary>
    /// Stores an instance of the BaseModelChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseModelChangeEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAEJhc2VNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBUCAEA" +
           "VAhUCAAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAFcOAC4ARFcOAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAFgOAC4ARFgOAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAQBZDgAuAERZDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQEAWg4ALgBEWg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAFsO" +
           "AC4ARFsOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBcDgAuAERc" +
           "DgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAF0OAC4ARF0OAAABANAi" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAF4OAC4ARF4OAAAAFf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAXw4ALgBEXw4AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region GeneralModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_GeneralModelChangeEventState)
    /// <summary>
    /// Stores an instance of the GeneralModelChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GeneralModelChangeEventState : BaseModelChangeEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GeneralModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.GeneralModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEdlbmVyYWxNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBV" +
           "CAEAVQhVCAAA/////woAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAGAOAC4ARGAOAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAGEOAC4ARGEOAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQBiDgAuAERiDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAYw4ALgBEYw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AGQOAC4ARGQOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBlDgAu" +
           "AERlDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAGYOAC4ARGYOAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAGcOAC4ARGcOAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAaA4ALgBEaA4AAAAF/////wEB/////wAAAAAXYIkK" +
           "AgAAAAAABwAAAENoYW5nZXMBAFYIAC4ARFYIAAABAG0DAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ModelChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<ModelChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<ModelChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ModelChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region SemanticChangeEventState Class
    #if (!OPCUA_EXCLUDE_SemanticChangeEventState)
    /// <summary>
    /// Stores an instance of the SemanticChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SemanticChangeEventState : BaseModelChangeEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SemanticChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SemanticChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNlbWFudGljQ2hhbmdlRXZlbnRUeXBlSW5zdGFuY2UBALIKAQCy" +
           "CrIKAAD/////CgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAaQ4ALgBEaQ4AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAag4ALgBEag4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAGsOAC4ARGsOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQBsDgAuAERsDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAbQ4A" +
           "LgBEbQ4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAG4OAC4ARG4O" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAbw4ALgBEbw4AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAcA4ALgBEcA4AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBxDgAuAERxDgAAAAX/////AQH/////AAAAABdgiQoCAAAA" +
           "AAAHAAAAQ2hhbmdlcwEAswoALgBEswoAAAEAgQMBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SemanticChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<SemanticChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<SemanticChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SemanticChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region EventQueueOverflowEventState Class
    #if (!OPCUA_EXCLUDE_EventQueueOverflowEventState)
    /// <summary>
    /// Stores an instance of the EventQueueOverflowEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EventQueueOverflowEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public EventQueueOverflowEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EventQueueOverflowEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEV2ZW50UXVldWVPdmVyZmxvd0V2ZW50VHlwZUluc3RhbmNlAQDb" +
           "CwEA2wvbCwAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAHcMAC4ARHcMAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAHgMAC4ARHgMAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQB5DAAuAER5DAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAegwALgBEegwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AHsMAC4ARHsMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQB8DAAu" +
           "AER8DAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAH0MAC4ARH0MAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAH4MAC4ARH4MAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAfwwALgBEfwwAAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProgressEventState Class
    #if (!OPCUA_EXCLUDE_ProgressEventState)
    /// <summary>
    /// Stores an instance of the ProgressEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgressEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgressEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgressEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAFByb2dyZXNzRXZlbnRUeXBlSW5zdGFuY2UBAKwsAQCsLKwsAAD/" +
           "////CwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEArSwALgBErSwAAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQEAriwALgBEriwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5vZGUBAK8sAC4ARK8sAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "YW1lAQCwLAAuAESwLAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAsSwALgBEsSwA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBALIsAC4ARLIsAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAsywALgBEsywAAAEA0CL/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAtCwALgBEtCwAAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFNldmVyaXR5AQC1LAAuAES1LAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "Q29udGV4dAEA1jAALgBE1jAAAAAY/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFByb2dyZXNzAQDX" +
           "MAAuAETXMAAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Context
        {
            get
            {
                return m_context;
            }

            set
            {
                if (!Object.ReferenceEquals(m_context, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_context = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Progress
        {
            get
            {
                return m_progress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_progress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_progress = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_context != null)
            {
                children.Add(m_context);
            }

            if (m_progress != null)
            {
                children.Add(m_progress);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Context:
                {
                    if (createOrReplace)
                    {
                        if (Context == null)
                        {
                            if (replacement == null)
                            {
                                Context = new PropertyState(this);
                            }
                            else
                            {
                                Context = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Context;
                    break;
                }

                case Opc.Ua.BrowseNames.Progress:
                {
                    if (createOrReplace)
                    {
                        if (Progress == null)
                        {
                            if (replacement == null)
                            {
                                Progress = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Progress = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Progress;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_context;
        private PropertyState<ushort> m_progress;
        #endregion
    }
    #endif
    #endregion

    #region AggregateFunctionState Class
    #if (!OPCUA_EXCLUDE_AggregateFunctionState)
    /// <summary>
    /// Stores an instance of the AggregateFunctionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateFunctionState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AggregateFunctionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateFunctionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEFnZ3JlZ2F0ZUZ1bmN0aW9uVHlwZUluc3RhbmNlAQAkCQEAJAkk" +
           "CQAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerVendorCapabilityState Class
    #if (!OPCUA_EXCLUDE_ServerVendorCapabilityState)
    /// <summary>
    /// Stores an instance of the ServerVendorCapabilityType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerVendorCapabilityState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerVendorCapabilityType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIgAAAFNlcnZlclZlbmRvckNhcGFiaWxpdHlUeXBlSW5zdGFuY2UBAFkI" +
           "AQBZCFkIAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region ServerVendorCapabilityState<T> Class
    /// <summary>
    /// A typed version of the ServerVendorCapabilityType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerVendorCapabilityState<T> : ServerVendorCapabilityState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerStatusState Class
    #if (!OPCUA_EXCLUDE_ServerStatusState)
    /// <summary>
    /// Stores an instance of the ServerStatusType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerStatusState : BaseDataVariableState<ServerStatusDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerStatusState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerStatusType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerStatusDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGAAAAFNlcnZlclN0YXR1c1R5cGVJbnN0YW5jZQEAWggBAFoIWggAAAEA" +
           "XgP/////AQH/////BgAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQBbCAAvAD9bCAAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABDdXJyZW50VGltZQEAXAgALwA/XAgAAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAFAAAAU3RhdGUBAF0IAC8AP10IAAABAFQD/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEJ1aWxkSW5mbwEAXggALwEA6wteCAAAAQBSAf////8BAf////8GAAAAFXCJCgIAAAAAAAoA" +
           "AABQcm9kdWN0VXJpAQByDgAvAD9yDgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAABAA" +
           "AABNYW51ZmFjdHVyZXJOYW1lAQBzDgAvAD9zDgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIA" +
           "AAAAAAsAAABQcm9kdWN0TmFtZQEAdA4ALwA/dA4AAAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoC" +
           "AAAAAAAPAAAAU29mdHdhcmVWZXJzaW9uAQB1DgAvAD91DgAAAAz/////AQEAAAAAAECPQP////8AAAAA" +
           "FXCJCgIAAAAAAAsAAABCdWlsZE51bWJlcgEAdg4ALwA/dg4AAAAM/////wEBAAAAAABAj0D/////AAAA" +
           "ABVwiQoCAAAAAAAJAAAAQnVpbGREYXRlAQB3DgAvAD93DgAAAQAmAf////8BAQAAAAAAQI9A/////wAA" +
           "AAAVYIkKAgAAAAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24BAMAKAC8AP8AKAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA4AAABTaHV0ZG93blJlYXNvbgEAwQoALwA/wQoAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> CurrentTime
        {
            get
            {
                return m_currentTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServerState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }

        /// <remarks />
        public BuildInfoVariableState BuildInfo
        {
            get
            {
                return m_buildInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildInfo = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecondsTillShutdown
        {
            get
            {
                return m_secondsTillShutdown;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secondsTillShutdown, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secondsTillShutdown = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<LocalizedText> ShutdownReason
        {
            get
            {
                return m_shutdownReason;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shutdownReason, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shutdownReason = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_currentTime != null)
            {
                children.Add(m_currentTime);
            }

            if (m_state != null)
            {
                children.Add(m_state);
            }

            if (m_buildInfo != null)
            {
                children.Add(m_buildInfo);
            }

            if (m_secondsTillShutdown != null)
            {
                children.Add(m_secondsTillShutdown);
            }

            if (m_shutdownReason != null)
            {
                children.Add(m_shutdownReason);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentTime:
                {
                    if (createOrReplace)
                    {
                        if (CurrentTime == null)
                        {
                            if (replacement == null)
                            {
                                CurrentTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                CurrentTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = CurrentTime;
                    break;
                }

                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new BaseDataVariableState<ServerState>(this);
                            }
                            else
                            {
                                State = (BaseDataVariableState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildInfo:
                {
                    if (createOrReplace)
                    {
                        if (BuildInfo == null)
                        {
                            if (replacement == null)
                            {
                                BuildInfo = new BuildInfoVariableState(this);
                            }
                            else
                            {
                                BuildInfo = (BuildInfoVariableState)replacement;
                            }
                        }
                    }

                    instance = BuildInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.SecondsTillShutdown:
                {
                    if (createOrReplace)
                    {
                        if (SecondsTillShutdown == null)
                        {
                            if (replacement == null)
                            {
                                SecondsTillShutdown = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecondsTillShutdown = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecondsTillShutdown;
                    break;
                }

                case Opc.Ua.BrowseNames.ShutdownReason:
                {
                    if (createOrReplace)
                    {
                        if (ShutdownReason == null)
                        {
                            if (replacement == null)
                            {
                                ShutdownReason = new BaseDataVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                ShutdownReason = (BaseDataVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ShutdownReason;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<DateTime> m_startTime;
        private BaseDataVariableState<DateTime> m_currentTime;
        private BaseDataVariableState<ServerState> m_state;
        private BuildInfoVariableState m_buildInfo;
        private BaseDataVariableState<uint> m_secondsTillShutdown;
        private BaseDataVariableState<LocalizedText> m_shutdownReason;
        #endregion
    }

    #region ServerStatusValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerStatusValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerStatusValue(ServerStatusState variable, ServerStatusDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerStatusDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ServerStatusState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ServerStatusDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ServerStatusState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.StartTime;
                instance.OnReadValue = OnRead_StartTime;
                instance.OnSimpleWriteValue = OnWrite_StartTime;
                updateList.Add(instance);
                instance = m_variable.CurrentTime;
                instance.OnReadValue = OnRead_CurrentTime;
                instance.OnSimpleWriteValue = OnWrite_CurrentTime;
                updateList.Add(instance);
                instance = m_variable.State;
                instance.OnReadValue = OnRead_State;
                instance.OnSimpleWriteValue = OnWrite_State;
                updateList.Add(instance);
                instance = m_variable.BuildInfo;
                instance.OnReadValue = OnRead_BuildInfo;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ProductUri;
                instance.OnReadValue = OnRead_BuildInfo_ProductUri;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ProductUri;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ManufacturerName;
                instance.OnReadValue = OnRead_BuildInfo_ManufacturerName;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ManufacturerName;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ProductName;
                instance.OnReadValue = OnRead_BuildInfo_ProductName;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ProductName;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.SoftwareVersion;
                instance.OnReadValue = OnRead_BuildInfo_SoftwareVersion;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_SoftwareVersion;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.BuildNumber;
                instance.OnReadValue = OnRead_BuildInfo_BuildNumber;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_BuildNumber;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.BuildDate;
                instance.OnReadValue = OnRead_BuildInfo_BuildDate;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_BuildDate;
                updateList.Add(instance);
                instance = m_variable.SecondsTillShutdown;
                instance.OnReadValue = OnRead_SecondsTillShutdown;
                instance.OnSimpleWriteValue = OnWrite_SecondsTillShutdown;
                updateList.Add(instance);
                instance = m_variable.ShutdownReason;
                instance.OnReadValue = OnRead_ShutdownReason;
                instance.OnSimpleWriteValue = OnWrite_ShutdownReason;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ServerStatusDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region StartTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_StartTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.StartTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_StartTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.StartTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region State Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_State(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.State;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_State(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.State = (ServerState)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo = (BuildInfo)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ProductUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ProductUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ProductUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ProductUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ManufacturerName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ManufacturerName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ManufacturerName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ManufacturerName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ProductName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ProductName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ProductName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ProductName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_SoftwareVersion Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.SoftwareVersion;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_SoftwareVersion(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.SoftwareVersion = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_BuildNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.BuildNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_BuildNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.BuildNumber = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_BuildDate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.BuildDate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_BuildDate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.BuildDate = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecondsTillShutdown Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecondsTillShutdown(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecondsTillShutdown;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecondsTillShutdown(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecondsTillShutdown = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ShutdownReason Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ShutdownReason(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ShutdownReason;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ShutdownReason(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ShutdownReason = (LocalizedText)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerStatusDataType m_value;
        private ServerStatusState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region BuildInfoVariableState Class
    #if (!OPCUA_EXCLUDE_BuildInfoVariableState)
    /// <summary>
    /// Stores an instance of the BuildInfoType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BuildInfoVariableState : BaseDataVariableState<BuildInfo>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BuildInfoVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.BuildInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BuildInfo, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAEJ1aWxkSW5mb1R5cGVJbnN0YW5jZQEA6wsBAOsL6wsAAAEAUgH/" +
           "////AQH/////BgAAABVwiQoCAAAAAAAKAAAAUHJvZHVjdFVyaQEA7AsALwA/7AsAAAAM/////wEBAAAA" +
           "AABAj0D/////AAAAABVwiQoCAAAAAAAQAAAATWFudWZhY3R1cmVyTmFtZQEA7QsALwA/7QsAAAAM////" +
           "/wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAALAAAAUHJvZHVjdE5hbWUBAO4LAC8AP+4LAAAADP//" +
           "//8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAADwAAAFNvZnR3YXJlVmVyc2lvbgEA7wsALwA/7wsA" +
           "AAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAALAAAAQnVpbGROdW1iZXIBAPALAC8AP/AL" +
           "AAAADP////8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAACQAAAEJ1aWxkRGF0ZQEA8QsALwA/8QsA" +
           "AAEAJgH/////AQEAAAAAAECPQP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> ProductUri
        {
            get
            {
                return m_productUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ManufacturerName
        {
            get
            {
                return m_manufacturerName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_manufacturerName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_manufacturerName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ProductName
        {
            get
            {
                return m_productName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SoftwareVersion
        {
            get
            {
                return m_softwareVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareVersion = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> BuildNumber
        {
            get
            {
                return m_buildNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> BuildDate
        {
            get
            {
                return m_buildDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildDate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_productUri != null)
            {
                children.Add(m_productUri);
            }

            if (m_manufacturerName != null)
            {
                children.Add(m_manufacturerName);
            }

            if (m_productName != null)
            {
                children.Add(m_productName);
            }

            if (m_softwareVersion != null)
            {
                children.Add(m_softwareVersion);
            }

            if (m_buildNumber != null)
            {
                children.Add(m_buildNumber);
            }

            if (m_buildDate != null)
            {
                children.Add(m_buildDate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ProductUri:
                {
                    if (createOrReplace)
                    {
                        if (ProductUri == null)
                        {
                            if (replacement == null)
                            {
                                ProductUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ManufacturerName:
                {
                    if (createOrReplace)
                    {
                        if (ManufacturerName == null)
                        {
                            if (replacement == null)
                            {
                                ManufacturerName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ManufacturerName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ManufacturerName;
                    break;
                }

                case Opc.Ua.BrowseNames.ProductName:
                {
                    if (createOrReplace)
                    {
                        if (ProductName == null)
                        {
                            if (replacement == null)
                            {
                                ProductName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductName;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareVersion:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareVersion == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareVersion = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SoftwareVersion = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SoftwareVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildNumber:
                {
                    if (createOrReplace)
                    {
                        if (BuildNumber == null)
                        {
                            if (replacement == null)
                            {
                                BuildNumber = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                BuildNumber = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = BuildNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildDate:
                {
                    if (createOrReplace)
                    {
                        if (BuildDate == null)
                        {
                            if (replacement == null)
                            {
                                BuildDate = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                BuildDate = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = BuildDate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_productUri;
        private BaseDataVariableState<string> m_manufacturerName;
        private BaseDataVariableState<string> m_productName;
        private BaseDataVariableState<string> m_softwareVersion;
        private BaseDataVariableState<string> m_buildNumber;
        private BaseDataVariableState<DateTime> m_buildDate;
        #endregion
    }

    #region BuildInfoVariableValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class BuildInfoVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public BuildInfoVariableValue(BuildInfoVariableState variable, BuildInfo value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new BuildInfo();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public BuildInfoVariableState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public BuildInfo Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(BuildInfoVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ProductUri;
                instance.OnReadValue = OnRead_ProductUri;
                instance.OnSimpleWriteValue = OnWrite_ProductUri;
                updateList.Add(instance);
                instance = m_variable.ManufacturerName;
                instance.OnReadValue = OnRead_ManufacturerName;
                instance.OnSimpleWriteValue = OnWrite_ManufacturerName;
                updateList.Add(instance);
                instance = m_variable.ProductName;
                instance.OnReadValue = OnRead_ProductName;
                instance.OnSimpleWriteValue = OnWrite_ProductName;
                updateList.Add(instance);
                instance = m_variable.SoftwareVersion;
                instance.OnReadValue = OnRead_SoftwareVersion;
                instance.OnSimpleWriteValue = OnWrite_SoftwareVersion;
                updateList.Add(instance);
                instance = m_variable.BuildNumber;
                instance.OnReadValue = OnRead_BuildNumber;
                instance.OnSimpleWriteValue = OnWrite_BuildNumber;
                updateList.Add(instance);
                instance = m_variable.BuildDate;
                instance.OnReadValue = OnRead_BuildDate;
                instance.OnSimpleWriteValue = OnWrite_BuildDate;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (BuildInfo)Write(value);
            }

            return ServiceResult.Good;
        }

        #region ProductUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ProductUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ProductUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ProductUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ManufacturerName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ManufacturerName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ManufacturerName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ManufacturerName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ProductName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ProductName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ProductName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ProductName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SoftwareVersion Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SoftwareVersion;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SoftwareVersion(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SoftwareVersion = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildNumber = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildDate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildDate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildDate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildDate = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private BuildInfo m_value;
        private BuildInfoVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsSummaryState)
    /// <summary>
    /// Stores an instance of the ServerDiagnosticsSummaryType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsSummaryState : BaseDataVariableState<ServerDiagnosticsSummaryDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerDiagnosticsSummaryDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJAAAAFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeVR5cGVJbnN0YW5jZQEA" +
           "ZggBAGYIZggAAAEAWwP/////AQH/////DAAAABVgiQoCAAAAAAAPAAAAU2VydmVyVmlld0NvdW50AQBn" +
           "CAAvAD9nCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAQ3VycmVudFNlc3Npb25Db3VudAEA" +
           "aAgALwA/aAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAEN1bXVsYXRlZFNlc3Npb25Db3Vu" +
           "dAEAaQgALwA/aQgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAFNlY3VyaXR5UmVqZWN0ZWRT" +
           "ZXNzaW9uQ291bnQBAGoIAC8AP2oIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABSZWplY3Rl" +
           "ZFNlc3Npb25Db3VudAEAawgALwA/awgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFNlc3Np" +
           "b25UaW1lb3V0Q291bnQBAGwIAC8AP2wIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABEAAABTZXNz" +
           "aW9uQWJvcnRDb3VudAEAbQgALwA/bQgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAFB1Ymxp" +
           "c2hpbmdJbnRlcnZhbENvdW50AQBvCAAvAD9vCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAA" +
           "Q3VycmVudFN1YnNjcmlwdGlvbkNvdW50AQBwCAAvAD9wCAAAAAf/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAaAAAAQ3VtdWxhdGVkU3Vic2NyaXB0aW9uQ291bnQBAHEIAC8AP3EIAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAB0AAABTZWN1cml0eVJlamVjdGVkUmVxdWVzdHNDb3VudAEAcggALwA/cggAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJlamVjdGVkUmVxdWVzdHNDb3VudAEAcwgALwA/cwgAAAAH" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> ServerViewCount
        {
            get
            {
                return m_serverViewCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverViewCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverViewCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSessionCount
        {
            get
            {
                return m_currentSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSessionCount
        {
            get
            {
                return m_cumulatedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedSessionCount
        {
            get
            {
                return m_securityRejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedSessionCount
        {
            get
            {
                return m_rejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionTimeoutCount
        {
            get
            {
                return m_sessionTimeoutCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionTimeoutCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionTimeoutCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionAbortCount
        {
            get
            {
                return m_sessionAbortCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionAbortCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionAbortCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishingIntervalCount
        {
            get
            {
                return m_publishingIntervalCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingIntervalCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingIntervalCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionCount
        {
            get
            {
                return m_currentSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSubscriptionCount
        {
            get
            {
                return m_cumulatedSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedRequestsCount
        {
            get
            {
                return m_securityRejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedRequestsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedRequestsCount
        {
            get
            {
                return m_rejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedRequestsCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverViewCount != null)
            {
                children.Add(m_serverViewCount);
            }

            if (m_currentSessionCount != null)
            {
                children.Add(m_currentSessionCount);
            }

            if (m_cumulatedSessionCount != null)
            {
                children.Add(m_cumulatedSessionCount);
            }

            if (m_securityRejectedSessionCount != null)
            {
                children.Add(m_securityRejectedSessionCount);
            }

            if (m_rejectedSessionCount != null)
            {
                children.Add(m_rejectedSessionCount);
            }

            if (m_sessionTimeoutCount != null)
            {
                children.Add(m_sessionTimeoutCount);
            }

            if (m_sessionAbortCount != null)
            {
                children.Add(m_sessionAbortCount);
            }

            if (m_publishingIntervalCount != null)
            {
                children.Add(m_publishingIntervalCount);
            }

            if (m_currentSubscriptionCount != null)
            {
                children.Add(m_currentSubscriptionCount);
            }

            if (m_cumulatedSubscriptionCount != null)
            {
                children.Add(m_cumulatedSubscriptionCount);
            }

            if (m_securityRejectedRequestsCount != null)
            {
                children.Add(m_securityRejectedRequestsCount);
            }

            if (m_rejectedRequestsCount != null)
            {
                children.Add(m_rejectedRequestsCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerViewCount:
                {
                    if (createOrReplace)
                    {
                        if (ServerViewCount == null)
                        {
                            if (replacement == null)
                            {
                                ServerViewCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ServerViewCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ServerViewCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionTimeoutCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionTimeoutCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionTimeoutCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionTimeoutCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionTimeoutCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionAbortCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionAbortCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionAbortCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionAbortCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionAbortCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingIntervalCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishingIntervalCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishingIntervalCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishingIntervalCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishingIntervalCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedRequestsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedRequestsCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_serverViewCount;
        private BaseDataVariableState<uint> m_currentSessionCount;
        private BaseDataVariableState<uint> m_cumulatedSessionCount;
        private BaseDataVariableState<uint> m_securityRejectedSessionCount;
        private BaseDataVariableState<uint> m_rejectedSessionCount;
        private BaseDataVariableState<uint> m_sessionTimeoutCount;
        private BaseDataVariableState<uint> m_sessionAbortCount;
        private BaseDataVariableState<uint> m_publishingIntervalCount;
        private BaseDataVariableState<uint> m_currentSubscriptionCount;
        private BaseDataVariableState<uint> m_cumulatedSubscriptionCount;
        private BaseDataVariableState<uint> m_securityRejectedRequestsCount;
        private BaseDataVariableState<uint> m_rejectedRequestsCount;
        #endregion
    }

    #region ServerDiagnosticsSummaryValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerDiagnosticsSummaryValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerDiagnosticsSummaryValue(ServerDiagnosticsSummaryState variable, ServerDiagnosticsSummaryDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerDiagnosticsSummaryDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ServerDiagnosticsSummaryState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ServerDiagnosticsSummaryDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ServerDiagnosticsSummaryState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ServerViewCount;
                instance.OnReadValue = OnRead_ServerViewCount;
                instance.OnSimpleWriteValue = OnWrite_ServerViewCount;
                updateList.Add(instance);
                instance = m_variable.CurrentSessionCount;
                instance.OnReadValue = OnRead_CurrentSessionCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSessionCount;
                updateList.Add(instance);
                instance = m_variable.CumulatedSessionCount;
                instance.OnReadValue = OnRead_CumulatedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_CumulatedSessionCount;
                updateList.Add(instance);
                instance = m_variable.SecurityRejectedSessionCount;
                instance.OnReadValue = OnRead_SecurityRejectedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_SecurityRejectedSessionCount;
                updateList.Add(instance);
                instance = m_variable.RejectedSessionCount;
                instance.OnReadValue = OnRead_RejectedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_RejectedSessionCount;
                updateList.Add(instance);
                instance = m_variable.SessionTimeoutCount;
                instance.OnReadValue = OnRead_SessionTimeoutCount;
                instance.OnSimpleWriteValue = OnWrite_SessionTimeoutCount;
                updateList.Add(instance);
                instance = m_variable.SessionAbortCount;
                instance.OnReadValue = OnRead_SessionAbortCount;
                instance.OnSimpleWriteValue = OnWrite_SessionAbortCount;
                updateList.Add(instance);
                instance = m_variable.CurrentSubscriptionCount;
                instance.OnReadValue = OnRead_CurrentSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.CumulatedSubscriptionCount;
                instance.OnReadValue = OnRead_CumulatedSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CumulatedSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.PublishingIntervalCount;
                instance.OnReadValue = OnRead_PublishingIntervalCount;
                instance.OnSimpleWriteValue = OnWrite_PublishingIntervalCount;
                updateList.Add(instance);
                instance = m_variable.SecurityRejectedRequestsCount;
                instance.OnReadValue = OnRead_SecurityRejectedRequestsCount;
                instance.OnSimpleWriteValue = OnWrite_SecurityRejectedRequestsCount;
                updateList.Add(instance);
                instance = m_variable.RejectedRequestsCount;
                instance.OnReadValue = OnRead_RejectedRequestsCount;
                instance.OnSimpleWriteValue = OnWrite_RejectedRequestsCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ServerDiagnosticsSummaryDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region ServerViewCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ServerViewCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ServerViewCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ServerViewCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ServerViewCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CumulatedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CumulatedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CumulatedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CumulatedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityRejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityRejectedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityRejectedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RejectedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RejectedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RejectedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionTimeoutCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionTimeoutCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionTimeoutCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionTimeoutCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionTimeoutCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionAbortCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionAbortCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionAbortCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionAbortCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionAbortCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSubscriptionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CumulatedSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CumulatedSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CumulatedSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CumulatedSubscriptionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingIntervalCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingIntervalCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingIntervalCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingIntervalCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingIntervalCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedRequestsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityRejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedRequestsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityRejectedRequestsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityRejectedRequestsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedRequestsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RejectedRequestsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RejectedRequestsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RejectedRequestsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryDataType m_value;
        private ServerDiagnosticsSummaryState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SamplingIntervalDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsArrayState : BaseDataVariableState<SamplingIntervalDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAALAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5VHlwZUlu" +
           "c3RhbmNlAQB0CAEAdAh0CAAAAQBYAwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SamplingIntervalDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsState : BaseDataVariableState<SamplingIntervalDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJwAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc1R5cGVJbnN0YW5j" +
           "ZQEAdQgBAHUIdQgAAAEAWAP/////AQH/////BAAAABVgiQoCAAAAAAAQAAAAU2FtcGxpbmdJbnRlcnZh" +
           "bAEAdggALwA/dggAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAU2FtcGxlZE1vbml0b3Jl" +
           "ZEl0ZW1zQ291bnQBALEtAC8AP7EtAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABNYXhTYW1w" +
           "bGVkTW9uaXRvcmVkSXRlbXNDb3VudAEAsi0ALwA/si0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "IwAAAERpc2FibGVkTW9uaXRvcmVkSXRlbXNTYW1wbGluZ0NvdW50AQCzLQAvAD+zLQAAAAf/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> SamplingInterval
        {
            get
            {
                return m_samplingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SampledMonitoredItemsCount
        {
            get
            {
                return m_sampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxSampledMonitoredItemsCount
        {
            get
            {
                return m_maxSampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemsSamplingCount
        {
            get
            {
                return m_disabledMonitoredItemsSamplingCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemsSamplingCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemsSamplingCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_samplingInterval != null)
            {
                children.Add(m_samplingInterval);
            }

            if (m_sampledMonitoredItemsCount != null)
            {
                children.Add(m_sampledMonitoredItemsCount);
            }

            if (m_maxSampledMonitoredItemsCount != null)
            {
                children.Add(m_maxSampledMonitoredItemsCount);
            }

            if (m_disabledMonitoredItemsSamplingCount != null)
            {
                children.Add(m_disabledMonitoredItemsSamplingCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SamplingInterval:
                {
                    if (createOrReplace)
                    {
                        if (SamplingInterval == null)
                        {
                            if (replacement == null)
                            {
                                SamplingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                SamplingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = SamplingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.SampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (SampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                SampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxSampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxSampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxSampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemsSamplingCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemsSamplingCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemsSamplingCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemsSamplingCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_samplingInterval;
        private BaseDataVariableState<uint> m_sampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_maxSampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemsSamplingCount;
        #endregion
    }

    #region SamplingIntervalDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SamplingIntervalDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsValue(SamplingIntervalDiagnosticsState variable, SamplingIntervalDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SamplingIntervalDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SamplingIntervalDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SamplingIntervalDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SamplingIntervalDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SamplingInterval;
                instance.OnReadValue = OnRead_SamplingInterval;
                instance.OnSimpleWriteValue = OnWrite_SamplingInterval;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SamplingIntervalDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SamplingInterval Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SamplingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SamplingInterval;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SamplingInterval(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SamplingInterval = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SamplingIntervalDiagnosticsDataType m_value;
        private SamplingIntervalDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SubscriptionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SubscriptionDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsArrayState : BaseDataVariableState<SubscriptionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SubscriptionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAKAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXlUeXBlSW5zdGFu" +
           "Y2UBAHsIAQB7CHsIAAABAGoDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SubscriptionDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SubscriptionDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsState : BaseDataVariableState<SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SubscriptionDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIwAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQB8" +
           "CAEAfAh8CAAAAQBqA/////8BAf////8fAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAH0IAC8AP30I" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABTdWJzY3JpcHRpb25JZAEAfggALwA/fggAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFByaW9yaXR5AQB/CAAvAD9/CAAAAAP/////AQH/////" +
           "AAAAABVgiQoCAAAAAAASAAAAUHVibGlzaGluZ0ludGVydmFsAQCACAAvAD+ACAAAAAv/////AQH/////" +
           "AAAAABVgiQoCAAAAAAARAAAATWF4S2VlcEFsaXZlQ291bnQBAIEIAC8AP4EIAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABAAAABNYXhMaWZldGltZUNvdW50AQC4IgAvAD+4IgAAAAf/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAaAAAATWF4Tm90aWZpY2F0aW9uc1BlclB1Ymxpc2gBAIMIAC8AP4MIAAAAB/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABEAAABQdWJsaXNoaW5nRW5hYmxlZAEAhAgALwA/hAgAAAAB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACwAAAE1vZGlmeUNvdW50AQCFCAAvAD+FCAAAAAf/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAALAAAARW5hYmxlQ291bnQBAIYIAC8AP4YIAAAAB/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAwAAABEaXNhYmxlQ291bnQBAIcIAC8AP4cIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABUA" +
           "AABSZXB1Ymxpc2hSZXF1ZXN0Q291bnQBAIgIAC8AP4gIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABwAAABSZXB1Ymxpc2hNZXNzYWdlUmVxdWVzdENvdW50AQCJCAAvAD+JCAAAAAf/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAVAAAAUmVwdWJsaXNoTWVzc2FnZUNvdW50AQCKCAAvAD+KCAAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAUAAAAVHJhbnNmZXJSZXF1ZXN0Q291bnQBAIsIAC8AP4sIAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABsAAABUcmFuc2ZlcnJlZFRvQWx0Q2xpZW50Q291bnQBAIwIAC8AP4wIAAAA" +
           "B/////8BAf////8AAAAAFWCJCgIAAAAAABwAAABUcmFuc2ZlcnJlZFRvU2FtZUNsaWVudENvdW50AQCN" +
           "CAAvAD+NCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUHVibGlzaFJlcXVlc3RDb3VudAEA" +
           "jggALwA/jggAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAERhdGFDaGFuZ2VOb3RpZmljYXRp" +
           "b25zQ291bnQBAI8IAC8AP48IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABcAAABFdmVudE5vdGlm" +
           "aWNhdGlvbnNDb3VudAEAtgsALwA/tgsAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAE5vdGlm" +
           "aWNhdGlvbnNDb3VudAEAkQgALwA/kQgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAExhdGVQ" +
           "dWJsaXNoUmVxdWVzdENvdW50AQC5IgAvAD+5IgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAA" +
           "Q3VycmVudEtlZXBBbGl2ZUNvdW50AQC6IgAvAD+6IgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAU" +
           "AAAAQ3VycmVudExpZmV0aW1lQ291bnQBALsiAC8AP7siAAAAB/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABoAAABVbmFja25vd2xlZGdlZE1lc3NhZ2VDb3VudAEAvCIALwA/vCIAAAAH/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFQAAAERpc2NhcmRlZE1lc3NhZ2VDb3VudAEAvSIALwA/vSIAAAAH/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEgAAAE1vbml0b3JlZEl0ZW1Db3VudAEAviIALwA/viIAAAAH/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAGgAAAERpc2FibGVkTW9uaXRvcmVkSXRlbUNvdW50AQC/IgAvAD+/IgAAAAf/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAcAAAATW9uaXRvcmluZ1F1ZXVlT3ZlcmZsb3dDb3VudAEAwCIALwA/" +
           "wCIAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAE5leHRTZXF1ZW5jZU51bWJlcgEAwSIALwA/" +
           "wSIAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAEV2ZW50UXVldWVPdmVyZmxvd0NvdW50AQDG" +
           "IgAvAD/GIgAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SubscriptionId
        {
            get
            {
                return m_subscriptionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> Priority
        {
            get
            {
                return m_priority;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priority, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priority = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> PublishingInterval
        {
            get
            {
                return m_publishingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxKeepAliveCount
        {
            get
            {
                return m_maxKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxLifetimeCount
        {
            get
            {
                return m_maxLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxNotificationsPerPublish
        {
            get
            {
                return m_maxNotificationsPerPublish;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNotificationsPerPublish, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNotificationsPerPublish = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<bool> PublishingEnabled
        {
            get
            {
                return m_publishingEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingEnabled = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> ModifyCount
        {
            get
            {
                return m_modifyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EnableCount
        {
            get
            {
                return m_enableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisableCount
        {
            get
            {
                return m_disableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishRequestCount
        {
            get
            {
                return m_republishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageRequestCount
        {
            get
            {
                return m_republishMessageRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageCount
        {
            get
            {
                return m_republishMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferRequestCount
        {
            get
            {
                return m_transferRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToAltClientCount
        {
            get
            {
                return m_transferredToAltClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToAltClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToAltClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToSameClientCount
        {
            get
            {
                return m_transferredToSameClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToSameClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToSameClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishRequestCount
        {
            get
            {
                return m_publishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DataChangeNotificationsCount
        {
            get
            {
                return m_dataChangeNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataChangeNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataChangeNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventNotificationsCount
        {
            get
            {
                return m_eventNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NotificationsCount
        {
            get
            {
                return m_notificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_notificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_notificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> LatePublishRequestCount
        {
            get
            {
                return m_latePublishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_latePublishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_latePublishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentKeepAliveCount
        {
            get
            {
                return m_currentKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentLifetimeCount
        {
            get
            {
                return m_currentLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnacknowledgedMessageCount
        {
            get
            {
                return m_unacknowledgedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unacknowledgedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unacknowledgedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DiscardedMessageCount
        {
            get
            {
                return m_discardedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discardedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discardedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoredItemCount
        {
            get
            {
                return m_monitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemCount
        {
            get
            {
                return m_disabledMonitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoringQueueOverflowCount
        {
            get
            {
                return m_monitoringQueueOverflowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoringQueueOverflowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoringQueueOverflowCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NextSequenceNumber
        {
            get
            {
                return m_nextSequenceNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nextSequenceNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nextSequenceNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventQueueOverflowCount
        {
            get
            {
                return m_eventQueueOverflowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventQueueOverflowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventQueueOverflowCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_subscriptionId != null)
            {
                children.Add(m_subscriptionId);
            }

            if (m_priority != null)
            {
                children.Add(m_priority);
            }

            if (m_publishingInterval != null)
            {
                children.Add(m_publishingInterval);
            }

            if (m_maxKeepAliveCount != null)
            {
                children.Add(m_maxKeepAliveCount);
            }

            if (m_maxLifetimeCount != null)
            {
                children.Add(m_maxLifetimeCount);
            }

            if (m_maxNotificationsPerPublish != null)
            {
                children.Add(m_maxNotificationsPerPublish);
            }

            if (m_publishingEnabled != null)
            {
                children.Add(m_publishingEnabled);
            }

            if (m_modifyCount != null)
            {
                children.Add(m_modifyCount);
            }

            if (m_enableCount != null)
            {
                children.Add(m_enableCount);
            }

            if (m_disableCount != null)
            {
                children.Add(m_disableCount);
            }

            if (m_republishRequestCount != null)
            {
                children.Add(m_republishRequestCount);
            }

            if (m_republishMessageRequestCount != null)
            {
                children.Add(m_republishMessageRequestCount);
            }

            if (m_republishMessageCount != null)
            {
                children.Add(m_republishMessageCount);
            }

            if (m_transferRequestCount != null)
            {
                children.Add(m_transferRequestCount);
            }

            if (m_transferredToAltClientCount != null)
            {
                children.Add(m_transferredToAltClientCount);
            }

            if (m_transferredToSameClientCount != null)
            {
                children.Add(m_transferredToSameClientCount);
            }

            if (m_publishRequestCount != null)
            {
                children.Add(m_publishRequestCount);
            }

            if (m_dataChangeNotificationsCount != null)
            {
                children.Add(m_dataChangeNotificationsCount);
            }

            if (m_eventNotificationsCount != null)
            {
                children.Add(m_eventNotificationsCount);
            }

            if (m_notificationsCount != null)
            {
                children.Add(m_notificationsCount);
            }

            if (m_latePublishRequestCount != null)
            {
                children.Add(m_latePublishRequestCount);
            }

            if (m_currentKeepAliveCount != null)
            {
                children.Add(m_currentKeepAliveCount);
            }

            if (m_currentLifetimeCount != null)
            {
                children.Add(m_currentLifetimeCount);
            }

            if (m_unacknowledgedMessageCount != null)
            {
                children.Add(m_unacknowledgedMessageCount);
            }

            if (m_discardedMessageCount != null)
            {
                children.Add(m_discardedMessageCount);
            }

            if (m_monitoredItemCount != null)
            {
                children.Add(m_monitoredItemCount);
            }

            if (m_disabledMonitoredItemCount != null)
            {
                children.Add(m_disabledMonitoredItemCount);
            }

            if (m_monitoringQueueOverflowCount != null)
            {
                children.Add(m_monitoringQueueOverflowCount);
            }

            if (m_nextSequenceNumber != null)
            {
                children.Add(m_nextSequenceNumber);
            }

            if (m_eventQueueOverflowCount != null)
            {
                children.Add(m_eventQueueOverflowCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionId:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionId == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionId = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SubscriptionId = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SubscriptionId;
                    break;
                }

                case Opc.Ua.BrowseNames.Priority:
                {
                    if (createOrReplace)
                    {
                        if (Priority == null)
                        {
                            if (replacement == null)
                            {
                                Priority = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                Priority = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = Priority;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingInterval:
                {
                    if (createOrReplace)
                    {
                        if (PublishingInterval == null)
                        {
                            if (replacement == null)
                            {
                                PublishingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                PublishingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = PublishingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNotificationsPerPublish:
                {
                    if (createOrReplace)
                    {
                        if (MaxNotificationsPerPublish == null)
                        {
                            if (replacement == null)
                            {
                                MaxNotificationsPerPublish = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxNotificationsPerPublish = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNotificationsPerPublish;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingEnabled:
                {
                    if (createOrReplace)
                    {
                        if (PublishingEnabled == null)
                        {
                            if (replacement == null)
                            {
                                PublishingEnabled = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                PublishingEnabled = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = PublishingEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ModifyCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ModifyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EnableCount:
                {
                    if (createOrReplace)
                    {
                        if (EnableCount == null)
                        {
                            if (replacement == null)
                            {
                                EnableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EnableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EnableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisableCount:
                {
                    if (createOrReplace)
                    {
                        if (DisableCount == null)
                        {
                            if (replacement == null)
                            {
                                DisableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToAltClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToAltClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToAltClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToAltClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToAltClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToSameClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToSameClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToSameClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToSameClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToSameClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DataChangeNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (DataChangeNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                DataChangeNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DataChangeNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataChangeNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EventNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (EventNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                EventNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (NotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                NotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.LatePublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (LatePublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                LatePublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                LatePublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = LatePublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnacknowledgedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (UnacknowledgedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                UnacknowledgedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnacknowledgedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnacknowledgedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscardedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (DiscardedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                DiscardedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DiscardedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscardedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoringQueueOverflowCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoringQueueOverflowCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoringQueueOverflowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoringQueueOverflowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoringQueueOverflowCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NextSequenceNumber:
                {
                    if (createOrReplace)
                    {
                        if (NextSequenceNumber == null)
                        {
                            if (replacement == null)
                            {
                                NextSequenceNumber = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NextSequenceNumber = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NextSequenceNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.EventQueueOverflowCount:
                {
                    if (createOrReplace)
                    {
                        if (EventQueueOverflowCount == null)
                        {
                            if (replacement == null)
                            {
                                EventQueueOverflowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventQueueOverflowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventQueueOverflowCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<uint> m_subscriptionId;
        private BaseDataVariableState<byte> m_priority;
        private BaseDataVariableState<double> m_publishingInterval;
        private BaseDataVariableState<uint> m_maxKeepAliveCount;
        private BaseDataVariableState<uint> m_maxLifetimeCount;
        private BaseDataVariableState<uint> m_maxNotificationsPerPublish;
        private BaseDataVariableState<bool> m_publishingEnabled;
        private BaseDataVariableState<uint> m_modifyCount;
        private BaseDataVariableState<uint> m_enableCount;
        private BaseDataVariableState<uint> m_disableCount;
        private BaseDataVariableState<uint> m_republishRequestCount;
        private BaseDataVariableState<uint> m_republishMessageRequestCount;
        private BaseDataVariableState<uint> m_republishMessageCount;
        private BaseDataVariableState<uint> m_transferRequestCount;
        private BaseDataVariableState<uint> m_transferredToAltClientCount;
        private BaseDataVariableState<uint> m_transferredToSameClientCount;
        private BaseDataVariableState<uint> m_publishRequestCount;
        private BaseDataVariableState<uint> m_dataChangeNotificationsCount;
        private BaseDataVariableState<uint> m_eventNotificationsCount;
        private BaseDataVariableState<uint> m_notificationsCount;
        private BaseDataVariableState<uint> m_latePublishRequestCount;
        private BaseDataVariableState<uint> m_currentKeepAliveCount;
        private BaseDataVariableState<uint> m_currentLifetimeCount;
        private BaseDataVariableState<uint> m_unacknowledgedMessageCount;
        private BaseDataVariableState<uint> m_discardedMessageCount;
        private BaseDataVariableState<uint> m_monitoredItemCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemCount;
        private BaseDataVariableState<uint> m_monitoringQueueOverflowCount;
        private BaseDataVariableState<uint> m_nextSequenceNumber;
        private BaseDataVariableState<uint> m_eventQueueOverflowCount;
        #endregion
    }

    #region SubscriptionDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SubscriptionDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SubscriptionDiagnosticsValue(SubscriptionDiagnosticsState variable, SubscriptionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SubscriptionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SubscriptionDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SubscriptionDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SubscriptionDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.SubscriptionId;
                instance.OnReadValue = OnRead_SubscriptionId;
                instance.OnSimpleWriteValue = OnWrite_SubscriptionId;
                updateList.Add(instance);
                instance = m_variable.Priority;
                instance.OnReadValue = OnRead_Priority;
                instance.OnSimpleWriteValue = OnWrite_Priority;
                updateList.Add(instance);
                instance = m_variable.PublishingInterval;
                instance.OnReadValue = OnRead_PublishingInterval;
                instance.OnSimpleWriteValue = OnWrite_PublishingInterval;
                updateList.Add(instance);
                instance = m_variable.MaxKeepAliveCount;
                instance.OnReadValue = OnRead_MaxKeepAliveCount;
                instance.OnSimpleWriteValue = OnWrite_MaxKeepAliveCount;
                updateList.Add(instance);
                instance = m_variable.MaxLifetimeCount;
                instance.OnReadValue = OnRead_MaxLifetimeCount;
                instance.OnSimpleWriteValue = OnWrite_MaxLifetimeCount;
                updateList.Add(instance);
                instance = m_variable.MaxNotificationsPerPublish;
                instance.OnReadValue = OnRead_MaxNotificationsPerPublish;
                instance.OnSimpleWriteValue = OnWrite_MaxNotificationsPerPublish;
                updateList.Add(instance);
                instance = m_variable.PublishingEnabled;
                instance.OnReadValue = OnRead_PublishingEnabled;
                instance.OnSimpleWriteValue = OnWrite_PublishingEnabled;
                updateList.Add(instance);
                instance = m_variable.ModifyCount;
                instance.OnReadValue = OnRead_ModifyCount;
                instance.OnSimpleWriteValue = OnWrite_ModifyCount;
                updateList.Add(instance);
                instance = m_variable.EnableCount;
                instance.OnReadValue = OnRead_EnableCount;
                instance.OnSimpleWriteValue = OnWrite_EnableCount;
                updateList.Add(instance);
                instance = m_variable.DisableCount;
                instance.OnReadValue = OnRead_DisableCount;
                instance.OnSimpleWriteValue = OnWrite_DisableCount;
                updateList.Add(instance);
                instance = m_variable.RepublishRequestCount;
                instance.OnReadValue = OnRead_RepublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.RepublishMessageRequestCount;
                instance.OnReadValue = OnRead_RepublishMessageRequestCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishMessageRequestCount;
                updateList.Add(instance);
                instance = m_variable.RepublishMessageCount;
                instance.OnReadValue = OnRead_RepublishMessageCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishMessageCount;
                updateList.Add(instance);
                instance = m_variable.TransferRequestCount;
                instance.OnReadValue = OnRead_TransferRequestCount;
                instance.OnSimpleWriteValue = OnWrite_TransferRequestCount;
                updateList.Add(instance);
                instance = m_variable.TransferredToAltClientCount;
                instance.OnReadValue = OnRead_TransferredToAltClientCount;
                instance.OnSimpleWriteValue = OnWrite_TransferredToAltClientCount;
                updateList.Add(instance);
                instance = m_variable.TransferredToSameClientCount;
                instance.OnReadValue = OnRead_TransferredToSameClientCount;
                instance.OnSimpleWriteValue = OnWrite_TransferredToSameClientCount;
                updateList.Add(instance);
                instance = m_variable.PublishRequestCount;
                instance.OnReadValue = OnRead_PublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_PublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.DataChangeNotificationsCount;
                instance.OnReadValue = OnRead_DataChangeNotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_DataChangeNotificationsCount;
                updateList.Add(instance);
                instance = m_variable.EventNotificationsCount;
                instance.OnReadValue = OnRead_EventNotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_EventNotificationsCount;
                updateList.Add(instance);
                instance = m_variable.NotificationsCount;
                instance.OnReadValue = OnRead_NotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_NotificationsCount;
                updateList.Add(instance);
                instance = m_variable.LatePublishRequestCount;
                instance.OnReadValue = OnRead_LatePublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_LatePublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.CurrentKeepAliveCount;
                instance.OnReadValue = OnRead_CurrentKeepAliveCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentKeepAliveCount;
                updateList.Add(instance);
                instance = m_variable.CurrentLifetimeCount;
                instance.OnReadValue = OnRead_CurrentLifetimeCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentLifetimeCount;
                updateList.Add(instance);
                instance = m_variable.UnacknowledgedMessageCount;
                instance.OnReadValue = OnRead_UnacknowledgedMessageCount;
                instance.OnSimpleWriteValue = OnWrite_UnacknowledgedMessageCount;
                updateList.Add(instance);
                instance = m_variable.DiscardedMessageCount;
                instance.OnReadValue = OnRead_DiscardedMessageCount;
                instance.OnSimpleWriteValue = OnWrite_DiscardedMessageCount;
                updateList.Add(instance);
                instance = m_variable.MonitoredItemCount;
                instance.OnReadValue = OnRead_MonitoredItemCount;
                instance.OnSimpleWriteValue = OnWrite_MonitoredItemCount;
                updateList.Add(instance);
                instance = m_variable.DisabledMonitoredItemCount;
                instance.OnReadValue = OnRead_DisabledMonitoredItemCount;
                instance.OnSimpleWriteValue = OnWrite_DisabledMonitoredItemCount;
                updateList.Add(instance);
                instance = m_variable.MonitoringQueueOverflowCount;
                instance.OnReadValue = OnRead_MonitoringQueueOverflowCount;
                instance.OnSimpleWriteValue = OnWrite_MonitoringQueueOverflowCount;
                updateList.Add(instance);
                instance = m_variable.NextSequenceNumber;
                instance.OnReadValue = OnRead_NextSequenceNumber;
                instance.OnSimpleWriteValue = OnWrite_NextSequenceNumber;
                updateList.Add(instance);
                instance = m_variable.EventQueueOverflowCount;
                instance.OnReadValue = OnRead_EventQueueOverflowCount;
                instance.OnSimpleWriteValue = OnWrite_EventQueueOverflowCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SubscriptionDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SubscriptionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SubscriptionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SubscriptionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SubscriptionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SubscriptionId = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Priority Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_Priority(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.Priority;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_Priority(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.Priority = (byte)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingInterval Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingInterval;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingInterval(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingInterval = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxKeepAliveCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxKeepAliveCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxKeepAliveCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxKeepAliveCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxLifetimeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxLifetimeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxLifetimeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxLifetimeCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxNotificationsPerPublish Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxNotificationsPerPublish(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxNotificationsPerPublish;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxNotificationsPerPublish(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxNotificationsPerPublish = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingEnabled Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingEnabled(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingEnabled;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingEnabled(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingEnabled = (bool)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifyCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifyCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifyCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifyCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EnableCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EnableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EnableCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EnableCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EnableCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisableCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DisableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DisableCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DisableCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DisableCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishMessageRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishMessageRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishMessageRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishMessageRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToAltClientCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferredToAltClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferredToAltClientCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferredToAltClientCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferredToAltClientCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToSameClientCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferredToSameClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferredToSameClientCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferredToSameClientCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferredToSameClientCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DataChangeNotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DataChangeNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DataChangeNotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DataChangeNotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DataChangeNotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EventNotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EventNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EventNotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EventNotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EventNotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_NotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.NotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_NotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.NotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LatePublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LatePublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LatePublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LatePublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LatePublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentKeepAliveCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentKeepAliveCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentKeepAliveCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentKeepAliveCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentLifetimeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentLifetimeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentLifetimeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentLifetimeCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnacknowledgedMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnacknowledgedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnacknowledgedMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnacknowledgedMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnacknowledgedMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DiscardedMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DiscardedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DiscardedMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DiscardedMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DiscardedMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoredItemCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MonitoredItemCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MonitoredItemCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MonitoredItemCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisabledMonitoredItemCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DisabledMonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DisabledMonitoredItemCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DisabledMonitoredItemCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DisabledMonitoredItemCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoringQueueOverflowCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MonitoringQueueOverflowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MonitoringQueueOverflowCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MonitoringQueueOverflowCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MonitoringQueueOverflowCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NextSequenceNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_NextSequenceNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.NextSequenceNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_NextSequenceNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.NextSequenceNumber = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EventQueueOverflowCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EventQueueOverflowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EventQueueOverflowCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EventQueueOverflowCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EventQueueOverflowCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SubscriptionDiagnosticsDataType m_value;
        private SubscriptionDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsArrayState : BaseDataVariableState<SessionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAIwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5VHlwZUluc3RhbmNlAQCU" +
           "CAEAlAiUCAAAAQBhAwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsVariableState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsVariableState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsVariableState : BaseDataVariableState<SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJgAAAFNlc3Npb25EaWFnbm9zdGljc1ZhcmlhYmxlVHlwZUluc3RhbmNl" +
           "AQCVCAEAlQiVCAAAAQBhA/////8BAf////8rAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAJYIAC8A" +
           "P5YIAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABTZXNzaW9uTmFtZQEAlwgALwA/lwgAAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAENsaWVudERlc2NyaXB0aW9uAQCYCAAvAD+YCAAAAQA0" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXJ2ZXJVcmkBAJkIAC8AP5kIAAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAsAAABFbmRwb2ludFVybAEAmggALwA/mggAAAAM/////wEB/////wAAAAAX" +
           "YIkKAgAAAAAACQAAAExvY2FsZUlkcwEAmwgALwA/mwgAAAEAJwEBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAABQAAABBY3R1YWxTZXNzaW9uVGltZW91dAEAnAgALwA/nAgAAAEAIgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAWAAAATWF4UmVzcG9uc2VNZXNzYWdlU2l6ZQEA6gsALwA/6gsAAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAFAAAAENsaWVudENvbm5lY3Rpb25UaW1lAQCdCAAvAD+dCAAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABUAAABDbGllbnRMYXN0Q29udGFjdFRpbWUBAJ4IAC8AP54IAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAEN1cnJlbnRTdWJzY3JpcHRpb25zQ291bnQBAJ8I" +
           "AC8AP58IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABDdXJyZW50TW9uaXRvcmVkSXRlbXND" +
           "b3VudAEAoAgALwA/oAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHQAAAEN1cnJlbnRQdWJsaXNo" +
           "UmVxdWVzdHNJblF1ZXVlAQChCAAvAD+hCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVG90" +
           "YWxSZXF1ZXN0Q291bnQBAMQiAC8AP8QiAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFVu" +
           "YXV0aG9yaXplZFJlcXVlc3RDb3VudAEAdC4ALwA/dC4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAFJlYWRDb3VudAEAqQgALwA/qQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAQAAAASGlz" +
           "dG9yeVJlYWRDb3VudAEAqggALwA/qggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAV3Jp" +
           "dGVDb3VudAEAqwgALwA/qwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAASGlzdG9yeVVw" +
           "ZGF0ZUNvdW50AQCsCAAvAD+sCAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABDYWxsQ291" +
           "bnQBAK0IAC8AP60IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAENyZWF0ZU1vbml0b3Jl" +
           "ZEl0ZW1zQ291bnQBAK4IAC8AP64IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE1vZGlm" +
           "eU1vbml0b3JlZEl0ZW1zQ291bnQBAK8IAC8AP68IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FgAAAFNldE1vbml0b3JpbmdNb2RlQ291bnQBALAIAC8AP7AIAAABAGcD/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEgAAAFNldFRyaWdnZXJpbmdDb3VudAEAsQgALwA/sQgAAAEAZwP/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAZAAAARGVsZXRlTW9uaXRvcmVkSXRlbXNDb3VudAEAsggALwA/sggAAAEAZwP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAXAAAAQ3JlYXRlU3Vic2NyaXB0aW9uQ291bnQBALMIAC8AP7MIAAABAGcD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAE1vZGlmeVN1YnNjcmlwdGlvbkNvdW50AQC0CAAvAD+0" +
           "CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABYAAABTZXRQdWJsaXNoaW5nTW9kZUNvdW50AQC1" +
           "CAAvAD+1CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABQdWJsaXNoQ291bnQBALYIAC8A" +
           "P7YIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFJlcHVibGlzaENvdW50AQC3CAAvAD+3" +
           "CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABUcmFuc2ZlclN1YnNjcmlwdGlvbnNDb3Vu" +
           "dAEAuAgALwA/uAgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAYAAAARGVsZXRlU3Vic2NyaXB0" +
           "aW9uc0NvdW50AQC5CAAvAD+5CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABBZGROb2Rl" +
           "c0NvdW50AQC6CAAvAD+6CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIAAABBZGRSZWZlcmVu" +
           "Y2VzQ291bnQBALsIAC8AP7sIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERlbGV0ZU5v" +
           "ZGVzQ291bnQBALwIAC8AP7wIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAERlbGV0ZVJl" +
           "ZmVyZW5jZXNDb3VudAEAvQgALwA/vQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQnJv" +
           "d3NlQ291bnQBAL4IAC8AP74IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEJyb3dzZU5l" +
           "eHRDb3VudAEAvwgALwA/vwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAiAAAAVHJhbnNsYXRl" +
           "QnJvd3NlUGF0aHNUb05vZGVJZHNDb3VudAEAwAgALwA/wAgAAAEAZwP/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAUXVlcnlGaXJzdENvdW50AQDBCAAvAD/BCAAAAQBnA/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABRdWVyeU5leHRDb3VudAEAwggALwA/wggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAA" +
           "AAASAAAAUmVnaXN0ZXJOb2Rlc0NvdW50AQCqCgAvAD+qCgAAAQBnA/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABQAAABVbnJlZ2lzdGVyTm9kZXNDb3VudAEAqwoALwA/qwoAAAEAZwP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SessionName
        {
            get
            {
                return m_sessionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ApplicationDescription> ClientDescription
        {
            get
            {
                return m_clientDescription;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientDescription, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientDescription = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ServerUri
        {
            get
            {
                return m_serverUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIds = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> ActualSessionTimeout
        {
            get
            {
                return m_actualSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actualSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actualSessionTimeout = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxResponseMessageSize
        {
            get
            {
                return m_maxResponseMessageSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxResponseMessageSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxResponseMessageSize = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientConnectionTime
        {
            get
            {
                return m_clientConnectionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientConnectionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientConnectionTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientLastContactTime
        {
            get
            {
                return m_clientLastContactTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientLastContactTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientLastContactTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionsCount
        {
            get
            {
                return m_currentSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentMonitoredItemsCount
        {
            get
            {
                return m_currentMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentPublishRequestsInQueue
        {
            get
            {
                return m_currentPublishRequestsInQueue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentPublishRequestsInQueue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentPublishRequestsInQueue = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TotalRequestCount
        {
            get
            {
                return m_totalRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_totalRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_totalRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnauthorizedRequestCount
        {
            get
            {
                return m_unauthorizedRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unauthorizedRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unauthorizedRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ReadCount
        {
            get
            {
                return m_readCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryReadCount
        {
            get
            {
                return m_historyReadCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyReadCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyReadCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> WriteCount
        {
            get
            {
                return m_writeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryUpdateCount
        {
            get
            {
                return m_historyUpdateCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyUpdateCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyUpdateCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CallCount
        {
            get
            {
                return m_callCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_callCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_callCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateMonitoredItemsCount
        {
            get
            {
                return m_createMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifyMonitoredItemsCount
        {
            get
            {
                return m_modifyMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetMonitoringModeCount
        {
            get
            {
                return m_setMonitoringModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setMonitoringModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setMonitoringModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetTriggeringCount
        {
            get
            {
                return m_setTriggeringCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setTriggeringCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setTriggeringCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteMonitoredItemsCount
        {
            get
            {
                return m_deleteMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateSubscriptionCount
        {
            get
            {
                return m_createSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifySubscriptionCount
        {
            get
            {
                return m_modifySubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifySubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifySubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetPublishingModeCount
        {
            get
            {
                return m_setPublishingModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPublishingModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPublishingModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> PublishCount
        {
            get
            {
                return m_publishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RepublishCount
        {
            get
            {
                return m_republishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TransferSubscriptionsCount
        {
            get
            {
                return m_transferSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteSubscriptionsCount
        {
            get
            {
                return m_deleteSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddNodesCount
        {
            get
            {
                return m_addNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddReferencesCount
        {
            get
            {
                return m_addReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteNodesCount
        {
            get
            {
                return m_deleteNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteReferencesCount
        {
            get
            {
                return m_deleteReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseCount
        {
            get
            {
                return m_browseCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseNextCount
        {
            get
            {
                return m_browseNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TranslateBrowsePathsToNodeIdsCount
        {
            get
            {
                return m_translateBrowsePathsToNodeIdsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_translateBrowsePathsToNodeIdsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_translateBrowsePathsToNodeIdsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryFirstCount
        {
            get
            {
                return m_queryFirstCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryFirstCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryFirstCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryNextCount
        {
            get
            {
                return m_queryNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RegisterNodesCount
        {
            get
            {
                return m_registerNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_registerNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_registerNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> UnregisterNodesCount
        {
            get
            {
                return m_unregisterNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unregisterNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unregisterNodesCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_sessionName != null)
            {
                children.Add(m_sessionName);
            }

            if (m_clientDescription != null)
            {
                children.Add(m_clientDescription);
            }

            if (m_serverUri != null)
            {
                children.Add(m_serverUri);
            }

            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            if (m_localeIds != null)
            {
                children.Add(m_localeIds);
            }

            if (m_actualSessionTimeout != null)
            {
                children.Add(m_actualSessionTimeout);
            }

            if (m_maxResponseMessageSize != null)
            {
                children.Add(m_maxResponseMessageSize);
            }

            if (m_clientConnectionTime != null)
            {
                children.Add(m_clientConnectionTime);
            }

            if (m_clientLastContactTime != null)
            {
                children.Add(m_clientLastContactTime);
            }

            if (m_currentSubscriptionsCount != null)
            {
                children.Add(m_currentSubscriptionsCount);
            }

            if (m_currentMonitoredItemsCount != null)
            {
                children.Add(m_currentMonitoredItemsCount);
            }

            if (m_currentPublishRequestsInQueue != null)
            {
                children.Add(m_currentPublishRequestsInQueue);
            }

            if (m_totalRequestCount != null)
            {
                children.Add(m_totalRequestCount);
            }

            if (m_unauthorizedRequestCount != null)
            {
                children.Add(m_unauthorizedRequestCount);
            }

            if (m_readCount != null)
            {
                children.Add(m_readCount);
            }

            if (m_historyReadCount != null)
            {
                children.Add(m_historyReadCount);
            }

            if (m_writeCount != null)
            {
                children.Add(m_writeCount);
            }

            if (m_historyUpdateCount != null)
            {
                children.Add(m_historyUpdateCount);
            }

            if (m_callCount != null)
            {
                children.Add(m_callCount);
            }

            if (m_createMonitoredItemsCount != null)
            {
                children.Add(m_createMonitoredItemsCount);
            }

            if (m_modifyMonitoredItemsCount != null)
            {
                children.Add(m_modifyMonitoredItemsCount);
            }

            if (m_setMonitoringModeCount != null)
            {
                children.Add(m_setMonitoringModeCount);
            }

            if (m_setTriggeringCount != null)
            {
                children.Add(m_setTriggeringCount);
            }

            if (m_deleteMonitoredItemsCount != null)
            {
                children.Add(m_deleteMonitoredItemsCount);
            }

            if (m_createSubscriptionCount != null)
            {
                children.Add(m_createSubscriptionCount);
            }

            if (m_modifySubscriptionCount != null)
            {
                children.Add(m_modifySubscriptionCount);
            }

            if (m_setPublishingModeCount != null)
            {
                children.Add(m_setPublishingModeCount);
            }

            if (m_publishCount != null)
            {
                children.Add(m_publishCount);
            }

            if (m_republishCount != null)
            {
                children.Add(m_republishCount);
            }

            if (m_transferSubscriptionsCount != null)
            {
                children.Add(m_transferSubscriptionsCount);
            }

            if (m_deleteSubscriptionsCount != null)
            {
                children.Add(m_deleteSubscriptionsCount);
            }

            if (m_addNodesCount != null)
            {
                children.Add(m_addNodesCount);
            }

            if (m_addReferencesCount != null)
            {
                children.Add(m_addReferencesCount);
            }

            if (m_deleteNodesCount != null)
            {
                children.Add(m_deleteNodesCount);
            }

            if (m_deleteReferencesCount != null)
            {
                children.Add(m_deleteReferencesCount);
            }

            if (m_browseCount != null)
            {
                children.Add(m_browseCount);
            }

            if (m_browseNextCount != null)
            {
                children.Add(m_browseNextCount);
            }

            if (m_translateBrowsePathsToNodeIdsCount != null)
            {
                children.Add(m_translateBrowsePathsToNodeIdsCount);
            }

            if (m_queryFirstCount != null)
            {
                children.Add(m_queryFirstCount);
            }

            if (m_queryNextCount != null)
            {
                children.Add(m_queryNextCount);
            }

            if (m_registerNodesCount != null)
            {
                children.Add(m_registerNodesCount);
            }

            if (m_unregisterNodesCount != null)
            {
                children.Add(m_unregisterNodesCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionName:
                {
                    if (createOrReplace)
                    {
                        if (SessionName == null)
                        {
                            if (replacement == null)
                            {
                                SessionName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SessionName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SessionName;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientDescription:
                {
                    if (createOrReplace)
                    {
                        if (ClientDescription == null)
                        {
                            if (replacement == null)
                            {
                                ClientDescription = new BaseDataVariableState<ApplicationDescription>(this);
                            }
                            else
                            {
                                ClientDescription = (BaseDataVariableState<ApplicationDescription>)replacement;
                            }
                        }
                    }

                    instance = ClientDescription;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerUri:
                {
                    if (createOrReplace)
                    {
                        if (ServerUri == null)
                        {
                            if (replacement == null)
                            {
                                ServerUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ServerUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerUri;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIds:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIds == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIds = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                LocaleIds = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIds;
                    break;
                }

                case Opc.Ua.BrowseNames.ActualSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (ActualSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                ActualSessionTimeout = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                ActualSessionTimeout = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = ActualSessionTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxResponseMessageSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxResponseMessageSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxResponseMessageSize = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxResponseMessageSize = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxResponseMessageSize;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientConnectionTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientConnectionTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientConnectionTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientConnectionTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientConnectionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientLastContactTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientLastContactTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientLastContactTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientLastContactTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientLastContactTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue:
                {
                    if (createOrReplace)
                    {
                        if (CurrentPublishRequestsInQueue == null)
                        {
                            if (replacement == null)
                            {
                                CurrentPublishRequestsInQueue = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentPublishRequestsInQueue = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentPublishRequestsInQueue;
                    break;
                }

                case Opc.Ua.BrowseNames.TotalRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TotalRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TotalRequestCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TotalRequestCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TotalRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnauthorizedRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (UnauthorizedRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                UnauthorizedRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnauthorizedRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnauthorizedRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ReadCount:
                {
                    if (createOrReplace)
                    {
                        if (ReadCount == null)
                        {
                            if (replacement == null)
                            {
                                ReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryReadCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryReadCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.WriteCount:
                {
                    if (createOrReplace)
                    {
                        if (WriteCount == null)
                        {
                            if (replacement == null)
                            {
                                WriteCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                WriteCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = WriteCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryUpdateCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryUpdateCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryUpdateCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryUpdateCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryUpdateCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CallCount:
                {
                    if (createOrReplace)
                    {
                        if (CallCount == null)
                        {
                            if (replacement == null)
                            {
                                CallCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CallCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CallCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifyMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifyMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetMonitoringModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetMonitoringModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetMonitoringModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetMonitoringModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetMonitoringModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetTriggeringCount:
                {
                    if (createOrReplace)
                    {
                        if (SetTriggeringCount == null)
                        {
                            if (replacement == null)
                            {
                                SetTriggeringCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetTriggeringCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetTriggeringCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateSubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateSubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifySubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifySubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifySubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifySubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifySubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPublishingModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetPublishingModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetPublishingModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetPublishingModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetPublishingModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                PublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = PublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RepublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RepublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TransferSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TransferSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseNextCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseNextCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount:
                {
                    if (createOrReplace)
                    {
                        if (TranslateBrowsePathsToNodeIdsCount == null)
                        {
                            if (replacement == null)
                            {
                                TranslateBrowsePathsToNodeIdsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TranslateBrowsePathsToNodeIdsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TranslateBrowsePathsToNodeIdsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryFirstCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryFirstCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryFirstCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryFirstCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryFirstCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryNextCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryNextCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RegisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (RegisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                RegisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RegisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RegisterNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnregisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (UnregisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                UnregisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                UnregisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = UnregisterNodesCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_sessionName;
        private BaseDataVariableState<ApplicationDescription> m_clientDescription;
        private BaseDataVariableState<string> m_serverUri;
        private BaseDataVariableState<string> m_endpointUrl;
        private BaseDataVariableState<string[]> m_localeIds;
        private BaseDataVariableState<double> m_actualSessionTimeout;
        private BaseDataVariableState<uint> m_maxResponseMessageSize;
        private BaseDataVariableState<DateTime> m_clientConnectionTime;
        private BaseDataVariableState<DateTime> m_clientLastContactTime;
        private BaseDataVariableState<uint> m_currentSubscriptionsCount;
        private BaseDataVariableState<uint> m_currentMonitoredItemsCount;
        private BaseDataVariableState<uint> m_currentPublishRequestsInQueue;
        private BaseDataVariableState<ServiceCounterDataType> m_totalRequestCount;
        private BaseDataVariableState<uint> m_unauthorizedRequestCount;
        private BaseDataVariableState<ServiceCounterDataType> m_readCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyReadCount;
        private BaseDataVariableState<ServiceCounterDataType> m_writeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyUpdateCount;
        private BaseDataVariableState<ServiceCounterDataType> m_callCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifyMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setMonitoringModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setTriggeringCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createSubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifySubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setPublishingModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_publishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_republishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_transferSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_translateBrowsePathsToNodeIdsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryFirstCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_registerNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_unregisterNodesCount;
        #endregion
    }

    #region SessionDiagnosticsVariableValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionDiagnosticsVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SessionDiagnosticsVariableValue(SessionDiagnosticsVariableState variable, SessionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SessionDiagnosticsVariableState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SessionDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SessionDiagnosticsVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.SessionName;
                instance.OnReadValue = OnRead_SessionName;
                instance.OnSimpleWriteValue = OnWrite_SessionName;
                updateList.Add(instance);
                instance = m_variable.ClientDescription;
                instance.OnReadValue = OnRead_ClientDescription;
                instance.OnSimpleWriteValue = OnWrite_ClientDescription;
                updateList.Add(instance);
                instance = m_variable.ServerUri;
                instance.OnReadValue = OnRead_ServerUri;
                instance.OnSimpleWriteValue = OnWrite_ServerUri;
                updateList.Add(instance);
                instance = m_variable.EndpointUrl;
                instance.OnReadValue = OnRead_EndpointUrl;
                instance.OnSimpleWriteValue = OnWrite_EndpointUrl;
                updateList.Add(instance);
                instance = m_variable.LocaleIds;
                instance.OnReadValue = OnRead_LocaleIds;
                instance.OnSimpleWriteValue = OnWrite_LocaleIds;
                updateList.Add(instance);
                instance = m_variable.ActualSessionTimeout;
                instance.OnReadValue = OnRead_ActualSessionTimeout;
                instance.OnSimpleWriteValue = OnWrite_ActualSessionTimeout;
                updateList.Add(instance);
                instance = m_variable.MaxResponseMessageSize;
                instance.OnReadValue = OnRead_MaxResponseMessageSize;
                instance.OnSimpleWriteValue = OnWrite_MaxResponseMessageSize;
                updateList.Add(instance);
                instance = m_variable.ClientConnectionTime;
                instance.OnReadValue = OnRead_ClientConnectionTime;
                instance.OnSimpleWriteValue = OnWrite_ClientConnectionTime;
                updateList.Add(instance);
                instance = m_variable.ClientLastContactTime;
                instance.OnReadValue = OnRead_ClientLastContactTime;
                instance.OnSimpleWriteValue = OnWrite_ClientLastContactTime;
                updateList.Add(instance);
                instance = m_variable.CurrentSubscriptionsCount;
                instance.OnReadValue = OnRead_CurrentSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.CurrentMonitoredItemsCount;
                instance.OnReadValue = OnRead_CurrentMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.CurrentPublishRequestsInQueue;
                instance.OnReadValue = OnRead_CurrentPublishRequestsInQueue;
                instance.OnSimpleWriteValue = OnWrite_CurrentPublishRequestsInQueue;
                updateList.Add(instance);
                instance = m_variable.TotalRequestCount;
                instance.OnReadValue = OnRead_TotalRequestCount;
                instance.OnSimpleWriteValue = OnWrite_TotalRequestCount;
                updateList.Add(instance);
                instance = m_variable.UnauthorizedRequestCount;
                instance.OnReadValue = OnRead_UnauthorizedRequestCount;
                instance.OnSimpleWriteValue = OnWrite_UnauthorizedRequestCount;
                updateList.Add(instance);
                instance = m_variable.ReadCount;
                instance.OnReadValue = OnRead_ReadCount;
                instance.OnSimpleWriteValue = OnWrite_ReadCount;
                updateList.Add(instance);
                instance = m_variable.HistoryReadCount;
                instance.OnReadValue = OnRead_HistoryReadCount;
                instance.OnSimpleWriteValue = OnWrite_HistoryReadCount;
                updateList.Add(instance);
                instance = m_variable.WriteCount;
                instance.OnReadValue = OnRead_WriteCount;
                instance.OnSimpleWriteValue = OnWrite_WriteCount;
                updateList.Add(instance);
                instance = m_variable.HistoryUpdateCount;
                instance.OnReadValue = OnRead_HistoryUpdateCount;
                instance.OnSimpleWriteValue = OnWrite_HistoryUpdateCount;
                updateList.Add(instance);
                instance = m_variable.CallCount;
                instance.OnReadValue = OnRead_CallCount;
                instance.OnSimpleWriteValue = OnWrite_CallCount;
                updateList.Add(instance);
                instance = m_variable.CreateMonitoredItemsCount;
                instance.OnReadValue = OnRead_CreateMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_CreateMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.ModifyMonitoredItemsCount;
                instance.OnReadValue = OnRead_ModifyMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_ModifyMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.SetMonitoringModeCount;
                instance.OnReadValue = OnRead_SetMonitoringModeCount;
                instance.OnSimpleWriteValue = OnWrite_SetMonitoringModeCount;
                updateList.Add(instance);
                instance = m_variable.SetTriggeringCount;
                instance.OnReadValue = OnRead_SetTriggeringCount;
                instance.OnSimpleWriteValue = OnWrite_SetTriggeringCount;
                updateList.Add(instance);
                instance = m_variable.DeleteMonitoredItemsCount;
                instance.OnReadValue = OnRead_DeleteMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.CreateSubscriptionCount;
                instance.OnReadValue = OnRead_CreateSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CreateSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.ModifySubscriptionCount;
                instance.OnReadValue = OnRead_ModifySubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_ModifySubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.SetPublishingModeCount;
                instance.OnReadValue = OnRead_SetPublishingModeCount;
                instance.OnSimpleWriteValue = OnWrite_SetPublishingModeCount;
                updateList.Add(instance);
                instance = m_variable.PublishCount;
                instance.OnReadValue = OnRead_PublishCount;
                instance.OnSimpleWriteValue = OnWrite_PublishCount;
                updateList.Add(instance);
                instance = m_variable.RepublishCount;
                instance.OnReadValue = OnRead_RepublishCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishCount;
                updateList.Add(instance);
                instance = m_variable.TransferSubscriptionsCount;
                instance.OnReadValue = OnRead_TransferSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_TransferSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.DeleteSubscriptionsCount;
                instance.OnReadValue = OnRead_DeleteSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.AddNodesCount;
                instance.OnReadValue = OnRead_AddNodesCount;
                instance.OnSimpleWriteValue = OnWrite_AddNodesCount;
                updateList.Add(instance);
                instance = m_variable.AddReferencesCount;
                instance.OnReadValue = OnRead_AddReferencesCount;
                instance.OnSimpleWriteValue = OnWrite_AddReferencesCount;
                updateList.Add(instance);
                instance = m_variable.DeleteNodesCount;
                instance.OnReadValue = OnRead_DeleteNodesCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteNodesCount;
                updateList.Add(instance);
                instance = m_variable.DeleteReferencesCount;
                instance.OnReadValue = OnRead_DeleteReferencesCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteReferencesCount;
                updateList.Add(instance);
                instance = m_variable.BrowseCount;
                instance.OnReadValue = OnRead_BrowseCount;
                instance.OnSimpleWriteValue = OnWrite_BrowseCount;
                updateList.Add(instance);
                instance = m_variable.BrowseNextCount;
                instance.OnReadValue = OnRead_BrowseNextCount;
                instance.OnSimpleWriteValue = OnWrite_BrowseNextCount;
                updateList.Add(instance);
                instance = m_variable.TranslateBrowsePathsToNodeIdsCount;
                instance.OnReadValue = OnRead_TranslateBrowsePathsToNodeIdsCount;
                instance.OnSimpleWriteValue = OnWrite_TranslateBrowsePathsToNodeIdsCount;
                updateList.Add(instance);
                instance = m_variable.QueryFirstCount;
                instance.OnReadValue = OnRead_QueryFirstCount;
                instance.OnSimpleWriteValue = OnWrite_QueryFirstCount;
                updateList.Add(instance);
                instance = m_variable.QueryNextCount;
                instance.OnReadValue = OnRead_QueryNextCount;
                instance.OnSimpleWriteValue = OnWrite_QueryNextCount;
                updateList.Add(instance);
                instance = m_variable.RegisterNodesCount;
                instance.OnReadValue = OnRead_RegisterNodesCount;
                instance.OnSimpleWriteValue = OnWrite_RegisterNodesCount;
                updateList.Add(instance);
                instance = m_variable.UnregisterNodesCount;
                instance.OnReadValue = OnRead_UnregisterNodesCount;
                instance.OnSimpleWriteValue = OnWrite_UnregisterNodesCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SessionDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientDescription Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientDescription(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientDescription;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientDescription(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientDescription = (ApplicationDescription)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ServerUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ServerUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ServerUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ServerUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ServerUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EndpointUrl Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EndpointUrl(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EndpointUrl;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EndpointUrl(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EndpointUrl = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LocaleIds Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LocaleIds(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LocaleIds;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LocaleIds(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LocaleIds = (StringCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ActualSessionTimeout Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ActualSessionTimeout(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ActualSessionTimeout;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ActualSessionTimeout(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ActualSessionTimeout = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxResponseMessageSize Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxResponseMessageSize(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxResponseMessageSize;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxResponseMessageSize(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxResponseMessageSize = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientConnectionTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientConnectionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientConnectionTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientConnectionTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientConnectionTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientLastContactTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientLastContactTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientLastContactTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientLastContactTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientLastContactTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSubscriptionsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentMonitoredItemsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentPublishRequestsInQueue Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentPublishRequestsInQueue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentPublishRequestsInQueue;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentPublishRequestsInQueue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentPublishRequestsInQueue = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TotalRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TotalRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TotalRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TotalRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TotalRequestCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnauthorizedRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnauthorizedRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnauthorizedRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnauthorizedRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnauthorizedRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ReadCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ReadCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ReadCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ReadCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryReadCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_HistoryReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.HistoryReadCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_HistoryReadCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.HistoryReadCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region WriteCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_WriteCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.WriteCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_WriteCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.WriteCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryUpdateCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_HistoryUpdateCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.HistoryUpdateCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_HistoryUpdateCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.HistoryUpdateCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CallCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CallCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CallCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CallCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CallCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifyMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifyMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifyMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifyMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetMonitoringModeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetMonitoringModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetMonitoringModeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetMonitoringModeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetMonitoringModeCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetTriggeringCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetTriggeringCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetTriggeringCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetTriggeringCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetTriggeringCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateSubscriptionCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifySubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifySubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifySubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifySubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifySubscriptionCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetPublishingModeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetPublishingModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetPublishingModeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetPublishingModeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetPublishingModeCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferSubscriptionsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteSubscriptionsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AddNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AddNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AddNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AddNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddReferencesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AddReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AddReferencesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AddReferencesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AddReferencesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteReferencesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteReferencesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteReferencesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteReferencesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BrowseCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BrowseCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BrowseCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BrowseCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseNextCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BrowseNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BrowseNextCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BrowseNextCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BrowseNextCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TranslateBrowsePathsToNodeIdsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TranslateBrowsePathsToNodeIdsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TranslateBrowsePathsToNodeIdsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TranslateBrowsePathsToNodeIdsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TranslateBrowsePathsToNodeIdsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryFirstCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_QueryFirstCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.QueryFirstCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_QueryFirstCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.QueryFirstCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryNextCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_QueryNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.QueryNextCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_QueryNextCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.QueryNextCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RegisterNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RegisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RegisterNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RegisterNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RegisterNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnregisterNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnregisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnregisterNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnregisterNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnregisterNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionDiagnosticsDataType m_value;
        private SessionDiagnosticsVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionSecurityDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SessionSecurityDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsArrayState : BaseDataVariableState<SessionSecurityDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAKwAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzQXJyYXlUeXBlSW5z" +
           "dGFuY2UBAMMIAQDDCMMIAAABAGQDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionSecurityDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SessionSecurityDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsState : BaseDataVariableState<SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJgAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzVHlwZUluc3RhbmNl" +
           "AQDECAEAxAjECAAAAQBkA/////8BAf////8JAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAMUIAC8A" +
           "P8UIAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABDbGllbnRVc2VySWRPZlNlc3Npb24BAMYI" +
           "AC8AP8YIAAAADP////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDbGllbnRVc2VySWRIaXN0b3J5AQDH" +
           "CAAvAD/HCAAAAAwBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABcAAABBdXRoZW50aWNhdGlv" +
           "bk1lY2hhbmlzbQEAyAgALwA/yAgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEVuY29kaW5n" +
           "AQDJCAAvAD/JCAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVHJhbnNwb3J0UHJvdG9jb2wB" +
           "AMoIAC8AP8oIAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZWN1cml0eU1vZGUBAMsIAC8A" +
           "P8sIAAABAC4B/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQDMCAAv" +
           "AD/MCAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUBAPILAC8A" +
           "P/ILAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ClientUserIdOfSession
        {
            get
            {
                return m_clientUserIdOfSession;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdOfSession, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdOfSession = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> ClientUserIdHistory
        {
            get
            {
                return m_clientUserIdHistory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdHistory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdHistory = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> AuthenticationMechanism
        {
            get
            {
                return m_authenticationMechanism;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationMechanism, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationMechanism = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> Encoding
        {
            get
            {
                return m_encoding;
            }

            set
            {
                if (!Object.ReferenceEquals(m_encoding, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_encoding = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> TransportProtocol
        {
            get
            {
                return m_transportProtocol;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportProtocol, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportProtocol = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_clientUserIdOfSession != null)
            {
                children.Add(m_clientUserIdOfSession);
            }

            if (m_clientUserIdHistory != null)
            {
                children.Add(m_clientUserIdHistory);
            }

            if (m_authenticationMechanism != null)
            {
                children.Add(m_authenticationMechanism);
            }

            if (m_encoding != null)
            {
                children.Add(m_encoding);
            }

            if (m_transportProtocol != null)
            {
                children.Add(m_transportProtocol);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdOfSession:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdOfSession == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdOfSession = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ClientUserIdOfSession = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdOfSession;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdHistory:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdHistory == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdHistory = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                ClientUserIdHistory = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdHistory;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationMechanism:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationMechanism == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationMechanism = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                AuthenticationMechanism = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationMechanism;
                    break;
                }

                case Opc.Ua.BrowseNames.Encoding:
                {
                    if (createOrReplace)
                    {
                        if (Encoding == null)
                        {
                            if (replacement == null)
                            {
                                Encoding = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                Encoding = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = Encoding;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportProtocol:
                {
                    if (createOrReplace)
                    {
                        if (TransportProtocol == null)
                        {
                            if (replacement == null)
                            {
                                TransportProtocol = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                TransportProtocol = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = TransportProtocol;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new BaseDataVariableState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (BaseDataVariableState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_clientUserIdOfSession;
        private BaseDataVariableState<string[]> m_clientUserIdHistory;
        private BaseDataVariableState<string> m_authenticationMechanism;
        private BaseDataVariableState<string> m_encoding;
        private BaseDataVariableState<string> m_transportProtocol;
        private BaseDataVariableState<MessageSecurityMode> m_securityMode;
        private BaseDataVariableState<string> m_securityPolicyUri;
        private BaseDataVariableState<byte[]> m_clientCertificate;
        #endregion
    }

    #region SessionSecurityDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionSecurityDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsValue(SessionSecurityDiagnosticsState variable, SessionSecurityDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionSecurityDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SessionSecurityDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SessionSecurityDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SessionSecurityDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.ClientUserIdOfSession;
                instance.OnReadValue = OnRead_ClientUserIdOfSession;
                instance.OnSimpleWriteValue = OnWrite_ClientUserIdOfSession;
                updateList.Add(instance);
                instance = m_variable.ClientUserIdHistory;
                instance.OnReadValue = OnRead_ClientUserIdHistory;
                instance.OnSimpleWriteValue = OnWrite_ClientUserIdHistory;
                updateList.Add(instance);
                instance = m_variable.AuthenticationMechanism;
                instance.OnReadValue = OnRead_AuthenticationMechanism;
                instance.OnSimpleWriteValue = OnWrite_AuthenticationMechanism;
                updateList.Add(instance);
                instance = m_variable.Encoding;
                instance.OnReadValue = OnRead_Encoding;
                instance.OnSimpleWriteValue = OnWrite_Encoding;
                updateList.Add(instance);
                instance = m_variable.TransportProtocol;
                instance.OnReadValue = OnRead_TransportProtocol;
                instance.OnSimpleWriteValue = OnWrite_TransportProtocol;
                updateList.Add(instance);
                instance = m_variable.SecurityMode;
                instance.OnReadValue = OnRead_SecurityMode;
                instance.OnSimpleWriteValue = OnWrite_SecurityMode;
                updateList.Add(instance);
                instance = m_variable.SecurityPolicyUri;
                instance.OnReadValue = OnRead_SecurityPolicyUri;
                instance.OnSimpleWriteValue = OnWrite_SecurityPolicyUri;
                updateList.Add(instance);
                instance = m_variable.ClientCertificate;
                instance.OnReadValue = OnRead_ClientCertificate;
                instance.OnSimpleWriteValue = OnWrite_ClientCertificate;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SessionSecurityDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdOfSession Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientUserIdOfSession(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientUserIdOfSession;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientUserIdOfSession(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientUserIdOfSession = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdHistory Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientUserIdHistory(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientUserIdHistory;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientUserIdHistory(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientUserIdHistory = (StringCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AuthenticationMechanism Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AuthenticationMechanism(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AuthenticationMechanism;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AuthenticationMechanism(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AuthenticationMechanism = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Encoding Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_Encoding(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.Encoding;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_Encoding(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.Encoding = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransportProtocol Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransportProtocol(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransportProtocol;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransportProtocol(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransportProtocol = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityMode Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityMode(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityMode;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityMode(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityMode = (MessageSecurityMode)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityPolicyUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityPolicyUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityPolicyUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityPolicyUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityPolicyUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientCertificate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientCertificate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientCertificate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientCertificate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientCertificate = (byte[])Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionSecurityDiagnosticsDataType m_value;
        private SessionSecurityDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region OptionSetState Class
    #if (!OPCUA_EXCLUDE_OptionSetState)
    /// <summary>
    /// Stores an instance of the OptionSetType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OptionSetState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OptionSetState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.OptionSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (BitMask != null)
            {
                BitMask.Initialize(context, BitMask_InitializationString);
            }
        }

        #region Initialization String
        private const string BitMask_InitializationString =
           "//////////8XYIkKAgAAAAAABwAAAEJpdE1hc2sBALUtAC4ARLUtAAAAAQEAAAABAAAAAAAAAAEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAE9wdGlvblNldFR5cGVJbnN0YW5jZQEA3ywBAN8s3ywAAAAY////" +
           "/wEB/////wIAAAAXYIkKAgAAAAAADwAAAE9wdGlvblNldFZhbHVlcwEA4CwALgBE4CwAAAAVAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAHAAAAQml0TWFzawEAtS0ALgBEtS0AAAABAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText[]> OptionSetValues
        {
            get
            {
                return m_optionSetValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_optionSetValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_optionSetValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool[]> BitMask
        {
            get
            {
                return m_bitMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_bitMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_bitMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_optionSetValues != null)
            {
                children.Add(m_optionSetValues);
            }

            if (m_bitMask != null)
            {
                children.Add(m_bitMask);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OptionSetValues:
                {
                    if (createOrReplace)
                    {
                        if (OptionSetValues == null)
                        {
                            if (replacement == null)
                            {
                                OptionSetValues = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                OptionSetValues = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = OptionSetValues;
                    break;
                }

                case Opc.Ua.BrowseNames.BitMask:
                {
                    if (createOrReplace)
                    {
                        if (BitMask == null)
                        {
                            if (replacement == null)
                            {
                                BitMask = new PropertyState<bool[]>(this);
                            }
                            else
                            {
                                BitMask = (PropertyState<bool[]>)replacement;
                            }
                        }
                    }

                    instance = BitMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText[]> m_optionSetValues;
        private PropertyState<bool[]> m_bitMask;
        #endregion
    }

    #region OptionSetState<T> Class
    /// <summary>
    /// A typed version of the OptionSetType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class OptionSetState<T> : OptionSetState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public OptionSetState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region GetMonitoredItemsMethodState Class
    #if (!OPCUA_EXCLUDE_GetMonitoredItemsMethodState)
    /// <summary>
    /// Stores an instance of the GetMonitoredItemsMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetMonitoredItemsMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetMonitoredItemsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetMonitoredItemsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAEdldE1vbml0b3JlZEl0ZW1zTWV0aG9kVHlwZQEA5ywALwEA5yzn" +
           "LAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgsAC4AROgsAACWAQAAAAEA" +
           "KgEBHQAAAA4AAABTdWJzY3JpcHRpb25JZAAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA6SwALgBE6SwAAJYCAAAAAQAqAQEgAAAADQAA" +
           "AFNlcnZlckhhbmRsZXMABwEAAAABAAAAAAAAAAABACoBASAAAAANAAAAQ2xpZW50SGFuZGxlcwAHAQAA" +
           "AAEAAAAAAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetMonitoredItemsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            uint[] serverHandles = (uint[])_outputArguments[0];
            uint[] clientHandles = (uint[])_outputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    ref serverHandles,
                    ref clientHandles);
            }

            _outputArguments[0] = serverHandles;
            _outputArguments[1] = clientHandles;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetMonitoredItemsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        ref uint[] serverHandles,
        ref uint[] clientHandles);
    #endif
    #endregion

    #region ResendDataMethodState Class
    #if (!OPCUA_EXCLUDE_ResendDataMethodState)
    /// <summary>
    /// Stores an instance of the ResendDataMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ResendDataMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ResendDataMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ResendDataMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAFJlc2VuZERhdGFNZXRob2RUeXBlAQBLMgAvAQBLMksyAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDIALgBETDIAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ResendDataMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ResendDataMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region SetSubscriptionDurableMethodState Class
    #if (!OPCUA_EXCLUDE_SetSubscriptionDurableMethodState)
    /// <summary>
    /// Stores an instance of the SetSubscriptionDurableMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetSubscriptionDurableMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SetSubscriptionDurableMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new SetSubscriptionDurableMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGVNZXRob2RUeXBlAQDQMQAv" +
           "AQDQMdAxAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA0TEALgBE0TEAAJYC" +
           "AAAAAQAqAQEdAAAADgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACoBAR4AAAAPAAAATGlmZXRp" +
           "bWVJbkhvdXJzAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAQDSMQAuAETSMQAAlgEAAAABACoBASUAAAAWAAAAUmV2aXNlZExpZmV0aW1l" +
           "SW5Ib3VycwAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public SetSubscriptionDurableMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint lifetimeInHours = (uint)_inputArguments[1];

            uint revisedLifetimeInHours = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    lifetimeInHours,
                    ref revisedLifetimeInHours);
            }

            _outputArguments[0] = revisedLifetimeInHours;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult SetSubscriptionDurableMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        uint lifetimeInHours,
        ref uint revisedLifetimeInHours);
    #endif
    #endregion

    #region RequestServerStateChangeMethodState Class
    #if (!OPCUA_EXCLUDE_RequestServerStateChangeMethodState)
    /// <summary>
    /// Stores an instance of the RequestServerStateChangeMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RequestServerStateChangeMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RequestServerStateChangeMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new RequestServerStateChangeMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZU1ldGhvZFR5cGUBAFgy" +
           "AC8BAFgyWDIAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBZMgAuAERZMgAA" +
           "lgUAAAABACoBARYAAAAFAAAAU3RhdGUBAFQD/////wAAAAAAAQAqAQEiAAAAEwAAAEVzdGltYXRlZFJl" +
           "dHVyblRpbWUADf////8AAAAAAAEAKgEBIgAAABMAAABTZWNvbmRzVGlsbFNodXRkb3duAAf/////AAAA" +
           "AAABACoBARUAAAAGAAAAUmVhc29uABX/////AAAAAAABACoBARYAAAAHAAAAUmVzdGFydAAB/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public RequestServerStateChangeMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            ServerState state = (ServerState)_inputArguments[0];
            DateTime estimatedReturnTime = (DateTime)_inputArguments[1];
            uint secondsTillShutdown = (uint)_inputArguments[2];
            LocalizedText reason = (LocalizedText)_inputArguments[3];
            bool restart = (bool)_inputArguments[4];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    state,
                    estimatedReturnTime,
                    secondsTillShutdown,
                    reason,
                    restart);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult RequestServerStateChangeMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ServerState state,
        DateTime estimatedReturnTime,
        uint secondsTillShutdown,
        LocalizedText reason,
        bool restart);
    #endif
    #endregion

    #region StateMachineState Class
    #if (!OPCUA_EXCLUDE_StateMachineState)
    /// <summary>
    /// Stores an instance of the StateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDSCgAvAQDKCtIKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAjA4ALgBEjA4AAAAY/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAFN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA+wgBAPsI+wgAAP//" +
           "//8CAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANEKAC8BAMMK0QoAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQCIDgAuAESIDgAAABj/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFRyYW5zaXRpb24BANIKAC8BAMoK0goAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQCMDgAuAESMDgAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public StateVariableState CurrentState
        {
            get
            {
                return m_currentState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentState = value;
            }
        }

        /// <remarks />
        public TransitionVariableState LastTransition
        {
            get
            {
                return m_lastTransition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentState != null)
            {
                children.Add(m_currentState);
            }

            if (m_lastTransition != null)
            {
                children.Add(m_lastTransition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new StateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new TransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private StateVariableState m_currentState;
        private TransitionVariableState m_lastTransition;
        #endregion
    }
    #endif
    #endregion

    #region StateVariableState Class
    #if (!OPCUA_EXCLUDE_StateVariableState)
    /// <summary>
    /// Stores an instance of the StateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.StateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (EffectiveDisplayName != null)
            {
                EffectiveDisplayName.Initialize(context, EffectiveDisplayName_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMUKAC4ARMUKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAxgoALgBExgoAAAAH/////wEB/////wAAAAA=";

        private const string EffectiveDisplayName_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQDHCgAuAETHCgAAABX/////" +
           "AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGQAAAFN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMMKAQDDCsMKAAAA" +
           "Ff////8BAf////8EAAAAFWCJCgIAAAAAAAIAAABJZAEAxAoALgBExAoAAAAY/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABAAAAE5hbWUBAMUKAC4ARMUKAAAAFP////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABO" +
           "dW1iZXIBAMYKAC4ARMYKAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABFZmZlY3RpdmVEaXNw" +
           "bGF5TmFtZQEAxwoALgBExwoAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> EffectiveDisplayName
        {
            get
            {
                return m_effectiveDisplayName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveDisplayName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveDisplayName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_effectiveDisplayName != null)
            {
                children.Add(m_effectiveDisplayName);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveDisplayName:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveDisplayName == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveDisplayName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                EffectiveDisplayName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = EffectiveDisplayName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<LocalizedText> m_effectiveDisplayName;
        #endregion
    }
    #endif
    #endregion

    #region TransitionVariableState Class
    #if (!OPCUA_EXCLUDE_TransitionVariableState)
    /// <summary>
    /// Stores an instance of the TransitionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMwKAC4ARMwKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAzQoALgBEzQoAAAAH/////wEB/////wAAAAA=";

        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQDOCgAuAETOCgAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQDALAAuAETALAAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHgAAAFRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEAygoBAMoK" +
           "ygoAAAAV/////wEB/////wUAAAAVYIkKAgAAAAAAAgAAAElkAQDLCgAuAETLCgAAABj/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAEAAAATmFtZQEAzAoALgBEzAoAAAAU/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAE51bWJlcgEAzQoALgBEzQoAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRp" +
           "b25UaW1lAQDOCgAuAETOCgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABcAAABFZmZlY3RpdmVU" +
           "cmFuc2l0aW9uVGltZQEAwCwALgBEwCwAAAEAJgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateMachineState Class
    #if (!OPCUA_EXCLUDE_FiniteStateMachineState)
    /// <summary>
    /// Stores an instance of the FiniteStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateMachineState : StateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FiniteStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDVCgAvAQDPCtUKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAlA4ALgBElA4AAAAR/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEZpbml0ZVN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA0woBANMK" +
           "0woAAP////8CAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANQKAC8BAMgK1AoAAAAV/////wEB" +
           "/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQCQDgAuAESQDgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAATGFzdFRyYW5zaXRpb24BANUKAC8BAM8K1QoAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQCUDgAuAESUDgAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new FiniteStateVariableState CurrentState
        {
            get { return (FiniteStateVariableState)base.CurrentState; }
            set { base.CurrentState = value; }
        }

        /// <remarks />
        public new FiniteTransitionVariableState LastTransition
        {
            get { return (FiniteTransitionVariableState)base.LastTransition; }
            set { base.LastTransition = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new FiniteStateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (FiniteStateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteStateVariableState)
    /// <summary>
    /// Stores an instance of the FiniteStateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateVariableState : StateVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHwAAAEZpbml0ZVN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMgKAQDI" +
           "CsgKAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAyQoALgBEyQoAAAAR/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region FiniteTransitionVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteTransitionVariableState)
    /// <summary>
    /// Stores an instance of the FiniteTransitionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteTransitionVariableState : TransitionVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteTransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteTransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJAAAAEZpbml0ZVRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEA" +
           "zwoBAM8KzwoAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDQCgAuAETQCgAAABH/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineStateState)
    /// <summary>
    /// Stores an instance of the StateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineStateState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineStateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEQAAAFN0YXRlVHlwZUluc3RhbmNlAQADCQEAAwkDCQAA/////wEAAAAV" +
           "YIkKAgAAAAAACwAAAFN0YXRlTnVtYmVyAQAECQAuAEQECQAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> StateNumber
        {
            get
            {
                return m_stateNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stateNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stateNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_stateNumber != null)
            {
                children.Add(m_stateNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StateNumber:
                {
                    if (createOrReplace)
                    {
                        if (StateNumber == null)
                        {
                            if (replacement == null)
                            {
                                StateNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                StateNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = StateNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_stateNumber;
        #endregion
    }
    #endif
    #endregion

    #region StateMachineInitialStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineInitialStateState)
    /// <summary>
    /// Stores an instance of the InitialStateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineInitialStateState : StateMachineStateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineInitialStateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.InitialStateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAEluaXRpYWxTdGF0ZVR5cGVJbnN0YW5jZQEABQkBAAUJBQkAAP//" +
           "//8BAAAAFWCJCgIAAAAAAAsAAABTdGF0ZU51bWJlcgEAmA4ALgBEmA4AAAAH/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineTransitionState Class
    #if (!OPCUA_EXCLUDE_StateMachineTransitionState)
    /// <summary>
    /// Stores an instance of the TransitionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineTransitionState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineTransitionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAFRyYW5zaXRpb25UeXBlSW5zdGFuY2UBAAYJAQAGCQYJAAD/////" +
           "AQAAABVgiQoCAAAAAAAQAAAAVHJhbnNpdGlvbk51bWJlcgEACAkALgBECAkAAAAH/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region TransitionEventState Class
    #if (!OPCUA_EXCLUDE_TransitionEventState)
    /// <summary>
    /// Stores an instance of the TransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5jZQEABwkBAAcJBwkA" +
           "AP////8MAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCZDgAuAESZDgAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQCaDgAuAESaDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAmw4ALgBEmw4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAJwOAC4ARJwOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCdDgAuAESd" +
           "DgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAng4ALgBEng4AAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCfDgAuAESfDgAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCgDgAuAESgDgAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAKEOAC4ARKEOAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABUcmFuc2l0aW9uAQDWCgAvAQDKCtYKAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEA" +
           "qg4ALgBEqg4AAAAY/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEZyb21TdGF0ZQEA1woALwEAwwrX" +
           "CgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAKIOAC4ARKIOAAAAGP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABUb1N0YXRlAQDYCgAvAQDDCtgKAAAAFf////8BAf////8BAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEApg4ALgBEpg4AAAAY/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }

        /// <remarks />
        public StateVariableState FromState
        {
            get
            {
                return m_fromState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_fromState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_fromState = value;
            }
        }

        /// <remarks />
        public StateVariableState ToState
        {
            get
            {
                return m_toState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_toState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_toState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            if (m_fromState != null)
            {
                children.Add(m_fromState);
            }

            if (m_toState != null)
            {
                children.Add(m_toState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new TransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }

                case Opc.Ua.BrowseNames.FromState:
                {
                    if (createOrReplace)
                    {
                        if (FromState == null)
                        {
                            if (replacement == null)
                            {
                                FromState = new StateVariableState(this);
                            }
                            else
                            {
                                FromState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = FromState;
                    break;
                }

                case Opc.Ua.BrowseNames.ToState:
                {
                    if (createOrReplace)
                    {
                        if (ToState == null)
                        {
                            if (replacement == null)
                            {
                                ToState = new StateVariableState(this);
                            }
                            else
                            {
                                ToState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = ToState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TransitionVariableState m_transition;
        private StateVariableState m_fromState;
        private StateVariableState m_toState;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateStateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateStateEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateStateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateStateEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateStateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0VXBkYXRlU3RhdGVFdmVudFR5cGVJbnN0YW5jZQEACwkB" +
           "AAsJCwkAAP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCuDgAuAESuDgAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQCvDgAuAESvDgAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEAsA4ALgBEsA4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBALEOAC4ARLEOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCy" +
           "DgAuAESyDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAsw4ALgBE" +
           "sw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQC0DgAuAES0DgAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC1DgAuAES1DgAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBALYOAC4ARLYOAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABALcOAC4ARLcOAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEAuA4ALgBEuA4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQC5DgAuAES5DgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQC6DgAuAES6DgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQC7" +
           "DgAuAES7DgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBALwOAC4ARLwOAAAA" +
           "Ef////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAvQ4ALgBEvQ4AAAAYAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEA2QoALgBE2QoAAAAY////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBANoKAC4ARNoKAAAAGP////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState OldStateId
        {
            get
            {
                return m_oldStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldStateId = value;
            }
        }

        /// <remarks />
        public PropertyState NewStateId
        {
            get
            {
                return m_newStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newStateId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_oldStateId != null)
            {
                children.Add(m_oldStateId);
            }

            if (m_newStateId != null)
            {
                children.Add(m_newStateId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OldStateId:
                {
                    if (createOrReplace)
                    {
                        if (OldStateId == null)
                        {
                            if (replacement == null)
                            {
                                OldStateId = new PropertyState(this);
                            }
                            else
                            {
                                OldStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldStateId;
                    break;
                }

                case Opc.Ua.BrowseNames.NewStateId:
                {
                    if (createOrReplace)
                    {
                        if (NewStateId == null)
                        {
                            if (replacement == null)
                            {
                                NewStateId = new PropertyState(this);
                            }
                            else
                            {
                                NewStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewStateId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_oldStateId;
        private PropertyState m_newStateId;
        #endregion
    }
    #endif
    #endregion

    #region OpenMethodState Class
    #if (!OPCUA_EXCLUDE_OpenMethodState)
    /// <summary>
    /// Stores an instance of the OpenMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OpenMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAE9wZW5NZXRob2RUeXBlAQDaLQAvAQDaLdotAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA2y0ALgBE2y0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBANwtAC4ARNwtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public OpenMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte mode = (byte)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    mode,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult OpenMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte mode,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseMethodState Class
    #if (!OPCUA_EXCLUDE_CloseMethodState)
    /// <summary>
    /// Stores an instance of the CloseMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CloseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAENsb3NlTWV0aG9kVHlwZQEA3S0ALwEA3S3dLQAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAN4tAC4ARN4tAACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CloseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CloseMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle);
    #endif
    #endregion

    #region ReadMethodState Class
    #if (!OPCUA_EXCLUDE_ReadMethodState)
    /// <summary>
    /// Stores an instance of the ReadMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReadMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ReadMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ReadMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFJlYWRNZXRob2RUeXBlAQDfLQAvAQDfLd8tAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4C0ALgBE4C0AAJYCAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOEtAC4AROEtAACWAQAA" +
           "AAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ReadMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            int length = (int)_inputArguments[1];

            byte[] data = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    length,
                    ref data);
            }

            _outputArguments[0] = data;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ReadMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        int length,
        ref byte[] data);
    #endif
    #endregion

    #region WriteMethodState Class
    #if (!OPCUA_EXCLUDE_WriteMethodState)
    /// <summary>
    /// Stores an instance of the WriteMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriteMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public WriteMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new WriteMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFdyaXRlTWV0aG9kVHlwZQEA4i0ALwEA4i3iLQAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOMtAC4AROMtAACWAgAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public WriteMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            byte[] data = (byte[])_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    data);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult WriteMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        byte[] data);
    #endif
    #endregion

    #region GetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_GetPositionMethodState)
    /// <summary>
    /// Stores an instance of the GetPositionMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetPositionMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEdldFBvc2l0aW9uTWV0aG9kVHlwZQEA5C0ALwEA5C3kLQAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOUtAC4AROUtAACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQDmLQAuAETmLQAAlgEAAAABACoBARcAAAAIAAAAUG9zaXRpb24A" +
           "Cf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            ulong position = (ulong)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref position);
            }

            _outputArguments[0] = position;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetPositionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ref ulong position);
    #endif
    #endregion

    #region SetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_SetPositionMethodState)
    /// <summary>
    /// Stores an instance of the SetPositionMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetPositionMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new SetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFNldFBvc2l0aW9uTWV0aG9kVHlwZQEA5y0ALwEA5y3nLQAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgtAC4AROgtAACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public SetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            ulong position = (ulong)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    position);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult SetPositionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ulong position);
    #endif
    #endregion

    #region DataItemState Class
    #if (!OPCUA_EXCLUDE_DataItemState)
    /// <summary>
    /// Stores an instance of the DataItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataItemState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DataItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DataItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Any;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (ValuePrecision != null)
            {
                ValuePrecision.Initialize(context, ValuePrecision_InitializationString);
            }
        }

        #region Initialization String
        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BAD4JAC4ARD4JAAAADP////8BAf////8AAAAA";

        private const string ValuePrecision_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFZhbHVlUHJlY2lzaW9uAQA/CQAuAEQ/CQAAAAv/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFAAAAERhdGFJdGVtVHlwZUluc3RhbmNlAQA9CQEAPQk9CQAAABgBAf//" +
           "//8CAAAAFWCJCgIAAAAAAAoAAABEZWZpbml0aW9uAQA+CQAuAEQ+CQAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVmFsdWVQcmVjaXNpb24BAD8JAC4ARD8JAAAAC/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ValuePrecision
        {
            get
            {
                return m_valuePrecision;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valuePrecision, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valuePrecision = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_valuePrecision != null)
            {
                children.Add(m_valuePrecision);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.ValuePrecision:
                {
                    if (createOrReplace)
                    {
                        if (ValuePrecision == null)
                        {
                            if (replacement == null)
                            {
                                ValuePrecision = new PropertyState<double>(this);
                            }
                            else
                            {
                                ValuePrecision = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ValuePrecision;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_definition;
        private PropertyState<double> m_valuePrecision;
        #endregion
    }

    #region DataItemState<T> Class
    /// <summary>
    /// A typed version of the DataItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DataItemState<T> : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public DataItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AnalogItemState Class
    #if (!OPCUA_EXCLUDE_AnalogItemState)
    /// <summary>
    /// Stores an instance of the AnalogItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AnalogItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AnalogItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AnalogItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }

            if (EngineeringUnits != null)
            {
                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEAQgkALgBEQgkAAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string EngineeringUnits_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAEMJAC4AREMJAAABAHcD/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFgAAAEFuYWxvZ0l0ZW1UeXBlSW5zdGFuY2UBAEAJAQBACUAJAAAAGgEB" +
           "/////wMAAAAVYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEAQgkALgBEQgkAAAEAdAP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEAQQkALgBEQQkAAAEAdAP/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAQwkALgBEQwkAAAEAdwP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        #endregion
    }

    #region AnalogItemState<T> Class
    /// <summary>
    /// A typed version of the AnalogItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class AnalogItemState<T> : AnalogItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public AnalogItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region DiscreteItemState Class
    #if (!OPCUA_EXCLUDE_DiscreteItemState)
    /// <summary>
    /// Stores an instance of the DiscreteItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DiscreteItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DiscreteItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAGAAAAERpc2NyZXRlSXRlbVR5cGVJbnN0YW5jZQEARAkBAEQJRAkAAAAY" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region DiscreteItemState<T> Class
    /// <summary>
    /// A typed version of the DiscreteItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DiscreteItemState<T> : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public DiscreteItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TwoStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_TwoStateDiscreteState)
    /// <summary>
    /// Stores an instance of the TwoStateDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateDiscreteState : DiscreteItemState<bool>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TwoStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Boolean, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHAAAAFR3b1N0YXRlRGlzY3JldGVUeXBlSW5zdGFuY2UBAEUJAQBFCUUJ" +
           "AAAAAQEB/////wIAAAAVYIkKAgAAAAAACgAAAEZhbHNlU3RhdGUBAEYJAC4AREYJAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABUcnVlU3RhdGUBAEcJAC4AREcJAAAAFf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_falseState;
        private PropertyState<LocalizedText> m_trueState;
        #endregion
    }
    #endif
    #endregion

    #region MultiStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateDiscreteState)
    /// <summary>
    /// Stores an instance of the MultiStateDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.UInteger, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHgAAAE11bHRpU3RhdGVEaXNjcmV0ZVR5cGVJbnN0YW5jZQEASAkBAEgJ" +
           "SAkAAAAcAQH/////AQAAABdgiQoCAAAAAAALAAAARW51bVN0cmluZ3MBAEkJAC4AREkJAAAAFQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region MultiStateDiscreteState<T> Class
    /// <summary>
    /// A typed version of the MultiStateDiscreteType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateDiscreteState<T> : MultiStateDiscreteState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region MultiStateValueDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateValueDiscreteState)
    /// <summary>
    /// Stores an instance of the MultiStateValueDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateValueDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateValueDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAIwAAAE11bHRpU3RhdGVWYWx1ZURpc2NyZXRlVHlwZUluc3RhbmNlAQDm" +
           "KwEA5ivmKwAAABoBAf////8CAAAAF2CJCgIAAAAAAAoAAABFbnVtVmFsdWVzAQDpKwAuAETpKwAAAQCq" +
           "HQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAFZhbHVlQXNUZXh0AQDFLAAuAETFLAAA" +
           "ABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EnumValueType[]> EnumValues
        {
            get
            {
                return m_enumValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enumValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enumValues = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ValueAsText
        {
            get
            {
                return m_valueAsText;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valueAsText, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valueAsText = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_enumValues != null)
            {
                children.Add(m_enumValues);
            }

            if (m_valueAsText != null)
            {
                children.Add(m_valueAsText);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EnumValues:
                {
                    if (createOrReplace)
                    {
                        if (EnumValues == null)
                        {
                            if (replacement == null)
                            {
                                EnumValues = new PropertyState<EnumValueType[]>(this);
                            }
                            else
                            {
                                EnumValues = (PropertyState<EnumValueType[]>)replacement;
                            }
                        }
                    }

                    instance = EnumValues;
                    break;
                }

                case Opc.Ua.BrowseNames.ValueAsText:
                {
                    if (createOrReplace)
                    {
                        if (ValueAsText == null)
                        {
                            if (replacement == null)
                            {
                                ValueAsText = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ValueAsText = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ValueAsText;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EnumValueType[]> m_enumValues;
        private PropertyState<LocalizedText> m_valueAsText;
        #endregion
    }

    #region MultiStateValueDiscreteState<T> Class
    /// <summary>
    /// A typed version of the MultiStateValueDiscreteType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateValueDiscreteState<T> : MultiStateValueDiscreteState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ArrayItemState Class
    #if (!OPCUA_EXCLUDE_ArrayItemState)
    /// <summary>
    /// Stores an instance of the ArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ArrayItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEA+C4ALgBE+C4AAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAEFycmF5SXRlbVR5cGVJbnN0YW5jZQEA9S4BAPUu9S4AAAAYAAAA" +
           "AAEB/////wUAAAAVYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEA+C4ALgBE+C4AAAEAdAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEA+S4ALgBE+S4AAAEAdAP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEA+i4ALgBE+i4AAAEAdwP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAFAAAAVGl0bGUBAPsuAC4ARPsuAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0A" +
           "AABBeGlzU2NhbGVUeXBlAQD8LgAuAET8LgAAAQAtL/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Title
        {
            get
            {
                return m_title;
            }

            set
            {
                if (!Object.ReferenceEquals(m_title, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_title = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisScaleEnumeration> AxisScaleType
        {
            get
            {
                return m_axisScaleType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisScaleType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisScaleType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            if (m_title != null)
            {
                children.Add(m_title);
            }

            if (m_axisScaleType != null)
            {
                children.Add(m_axisScaleType);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }

                case Opc.Ua.BrowseNames.Title:
                {
                    if (createOrReplace)
                    {
                        if (Title == null)
                        {
                            if (replacement == null)
                            {
                                Title = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Title = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Title;
                    break;
                }

                case Opc.Ua.BrowseNames.AxisScaleType:
                {
                    if (createOrReplace)
                    {
                        if (AxisScaleType == null)
                        {
                            if (replacement == null)
                            {
                                AxisScaleType = new PropertyState<AxisScaleEnumeration>(this);
                            }
                            else
                            {
                                AxisScaleType = (PropertyState<AxisScaleEnumeration>)replacement;
                            }
                        }
                    }

                    instance = AxisScaleType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        private PropertyState<LocalizedText> m_title;
        private PropertyState<AxisScaleEnumeration> m_axisScaleType;
        #endregion
    }

    #region ArrayItemState<T> Class
    /// <summary>
    /// A typed version of the ArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ArrayItemState<T> : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region YArrayItemState Class
    #if (!OPCUA_EXCLUDE_YArrayItemState)
    /// <summary>
    /// Stores an instance of the YArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class YArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public YArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.YArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFgAAAFlBcnJheUl0ZW1UeXBlSW5zdGFuY2UBAP0uAQD9Lv0uAAAAGAEA" +
           "AAABAAAAAAAAAAEB/////wUAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBAAEvAC4ARAEvAAABAHQD////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAAIvAC4ARAIvAAABAHcD////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAQADLwAuAEQDLwAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQEABC8ALgBEBC8AAAEALS//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAFLwAuAEQFLwAAAQAvL/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }

    #region YArrayItemState<T> Class
    /// <summary>
    /// A typed version of the YArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class YArrayItemState<T> : YArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public YArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region XYArrayItemState Class
    #if (!OPCUA_EXCLUDE_XYArrayItemState)
    /// <summary>
    /// Stores an instance of the XYArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class XYArrayItemState : ArrayItemState<XVType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public XYArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.XYArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.XVType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFwAAAFhZQXJyYXlJdGVtVHlwZUluc3RhbmNlAQAGLwEABi8GLwAAAQAw" +
           "LwEAAAABAAAAAAAAAAEB/////wUAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBAAovAC4ARAovAAABAHQD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAAsvAC4ARAsvAAABAHcD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAQAMLwAuAEQMLwAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQEADS8ALgBEDS8AAAEALS//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAOLwAuAEQOLwAAAQAvL/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }
    #endif
    #endregion

    #region ImageItemState Class
    #if (!OPCUA_EXCLUDE_ImageItemState)
    /// <summary>
    /// Stores an instance of the ImageItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ImageItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ImageItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ImageItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return 3;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFQAAAEltYWdlSXRlbVR5cGVJbnN0YW5jZQEADy8BAA8vDy8AAAAYAgAA" +
           "AAIAAAAAAAAAAAAAAAEB/////wYAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBABMvAC4ARBMvAAABAHQD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBABQvAC4ARBQvAAABAHcD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAQAVLwAuAEQVLwAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQEAFi8ALgBEFi8AAAEALS//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAXLwAuAEQXLwAAAQAvL/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABZQXhpc0RlZmluaXRpb24BABgvAC4ARBgvAAABAC8v/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        #endregion
    }

    #region ImageItemState<T> Class
    /// <summary>
    /// A typed version of the ImageItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ImageItemState<T> : ImageItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ImageItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region CubeItemState Class
    #if (!OPCUA_EXCLUDE_CubeItemState)
    /// <summary>
    /// Stores an instance of the CubeItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CubeItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CubeItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.CubeItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return 4;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFAAAAEN1YmVJdGVtVHlwZUluc3RhbmNlAQAZLwEAGS8ZLwAAABgDAAAA" +
           "AwAAAAAAAAAAAAAAAAAAAAEB/////wcAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBAB0vAC4ARB0vAAAB" +
           "AHQD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAB4vAC4ARB4vAAAB" +
           "AHcD/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAQAfLwAuAEQfLwAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQEAIC8ALgBEIC8AAAEALS//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAhLwAuAEQhLwAAAQAvL/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABZQXhpc0RlZmluaXRpb24BACIvAC4ARCIvAAABAC8v/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAFpBeGlzRGVmaW5pdGlvbgEAIy8ALgBEIy8AAAEALy//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> ZAxisDefinition
        {
            get
            {
                return m_zAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_zAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_zAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            if (m_zAxisDefinition != null)
            {
                children.Add(m_zAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.ZAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (ZAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                ZAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                ZAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = ZAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        private PropertyState<AxisInformation> m_zAxisDefinition;
        #endregion
    }

    #region CubeItemState<T> Class
    /// <summary>
    /// A typed version of the CubeItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class CubeItemState<T> : CubeItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public CubeItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region NDimensionArrayItemState Class
    #if (!OPCUA_EXCLUDE_NDimensionArrayItemState)
    /// <summary>
    /// Stores an instance of the NDimensionArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NDimensionArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.NDimensionArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHwAAAE5EaW1lbnNpb25BcnJheUl0ZW1UeXBlSW5zdGFuY2UBACQvAQAk" +
           "LyQvAAAAGAAAAAABAf////8FAAAAFWCJCgIAAAAAAAcAAABFVVJhbmdlAQAoLwAuAEQoLwAAAQB0A///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABAAAABFbmdpbmVlcmluZ1VuaXRzAQApLwAuAEQpLwAAAQB3A///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAUAAABUaXRsZQEAKi8ALgBEKi8AAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADQAAAEF4aXNTY2FsZVR5cGUBACsvAC4ARCsvAAABAC0v/////wEB/////wAAAAAXYIkK" +
           "AgAAAAAADgAAAEF4aXNEZWZpbml0aW9uAQAsLwAuAEQsLwAAAQAvLwEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation[]> AxisDefinition
        {
            get
            {
                return m_axisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_axisDefinition != null)
            {
                children.Add(m_axisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (AxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                AxisDefinition = new PropertyState<AxisInformation[]>(this);
                            }
                            else
                            {
                                AxisDefinition = (PropertyState<AxisInformation[]>)replacement;
                            }
                        }
                    }

                    instance = AxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation[]> m_axisDefinition;
        #endregion
    }

    #region NDimensionArrayItemState<T> Class
    /// <summary>
    /// A typed version of the NDimensionArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class NDimensionArrayItemState<T> : NDimensionArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TwoStateVariableState Class
    #if (!OPCUA_EXCLUDE_TwoStateVariableState)
    /// <summary>
    /// Stores an instance of the TwoStateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateVariableState : StateVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TwoStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }

            if (TrueState != null)
            {
                TrueState.Initialize(context, TrueState_InitializationString);
            }

            if (FalseState != null)
            {
                FalseState.Initialize(context, FalseState_InitializationString);
            }
        }

        #region Initialization String
        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQAoIwAuAEQoIwAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQApIwAuAEQpIwAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string TrueState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFRydWVTdGF0ZQEAZisALgBEZisAAAAV/////wEB/////wAAAAA=";

        private const string FalseState_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAEZhbHNlU3RhdGUBAGcrAC4ARGcrAAAAFf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHAAAAFR3b1N0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBACMjAQAjIyMj" +
           "AAAAFf////8BAf////8FAAAAFWCJCgIAAAAAAAIAAABJZAEAJCMALgBEJCMAAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQAoIwAuAEQoIwAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABcAAABFZmZlY3RpdmVUcmFuc2l0aW9uVGltZQEAKSMALgBEKSMAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAVHJ1ZVN0YXRlAQBmKwAuAERmKwAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAARmFsc2VTdGF0ZQEAZysALgBEZysAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<bool> Id
        {
            get { return (PropertyState<bool>)base.Id; }
            set { base.Id = value; }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Id = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }

                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        private PropertyState<LocalizedText> m_trueState;
        private PropertyState<LocalizedText> m_falseState;
        #endregion
    }
    #endif
    #endregion

    #region ConditionVariableState Class
    #if (!OPCUA_EXCLUDE_ConditionVariableState)
    /// <summary>
    /// Stores an instance of the ConditionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionVariableState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ConditionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHQAAAENvbmRpdGlvblZhcmlhYmxlVHlwZUluc3RhbmNlAQAqIwEAKiMq" +
           "IwAAABgBAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABACsjAC4ARCsjAAABACYB" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> SourceTimestamp
        {
            get
            {
                return m_sourceTimestamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceTimestamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceTimestamp = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sourceTimestamp != null)
            {
                children.Add(m_sourceTimestamp);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SourceTimestamp:
                {
                    if (createOrReplace)
                    {
                        if (SourceTimestamp == null)
                        {
                            if (replacement == null)
                            {
                                SourceTimestamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                SourceTimestamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = SourceTimestamp;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_sourceTimestamp;
        #endregion
    }

    #region ConditionVariableState<T> Class
    /// <summary>
    /// A typed version of the ConditionVariableType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ConditionVariableState<T> : ConditionVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ConditionVariableState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ConditionState Class
    #if (!OPCUA_EXCLUDE_ConditionState)
    /// <summary>
    /// Stores an instance of the ConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAENvbmRpdGlvblR5cGVJbnN0YW5jZQEA3goBAN4K3goAAP////8W" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAZDwAuAEQZDwAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQAaDwAuAEQaDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEAGw8ALgBEGw8AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "ABwPAC4ARBwPAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAdDwAuAEQdDwAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAHg8ALgBEHg8AAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAfDwAuAEQfDwAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAgDwAuAEQgDwAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBACEPAC4ARCEPAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25k" +
           "aXRpb25DbGFzc0lkAQBoKwAuAERoKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0" +
           "aW9uQ2xhc3NOYW1lAQBpKwAuAERpKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQ29uZGl0" +
           "aW9uTmFtZQEAMSMALgBEMSMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5jaElkAQAy" +
           "IwAuAEQyIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQAiDwAuAEQiDwAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQAzIwAvAQAjIzMjAAAAFf////8B" +
           "Af////8EAAAAFWCJCgIAAAAAAAIAAABJZAEANCMALgBENCMAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQA3IwAuAEQ3IwAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBADgjAC4ARDgjAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQA5IwAuAEQ5IwAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAcAAABRdWFsaXR5AQA8IwAvAQAqIzwjAAAAE/////8BAf////8BAAAAFWCJCgIAAAAA" +
           "AA8AAABTb3VyY2VUaW1lc3RhbXABAD0jAC4ARD0jAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DAAAAExhc3RTZXZlcml0eQEAPiMALwEAKiM+IwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAA" +
           "U291cmNlVGltZXN0YW1wAQA/IwAuAEQ/IwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABD" +
           "b21tZW50AQBAIwAvAQAqI0AjAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1l" +
           "c3RhbXABAEEjAC4AREEjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJ" +
           "ZAEAQiMALgBEQiMAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAEQjAC8BAEQj" +
           "RCMAAAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAQyMALwEAQyNDIwAAAQEB" +
           "AAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEARSMALwEARSNFIwAAAQEBAAAA" +
           "AQD5CwABAA0LAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEYjAC4AREYjAACWAgAAAAEA" +
           "KgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUg" +
           "ZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUg" +
           "Y29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ConditionClassId
        {
            get
            {
                return m_conditionClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ConditionClassName
        {
            get
            {
                return m_conditionClassName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ConditionName
        {
            get
            {
                return m_conditionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionName = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> BranchId
        {
            get
            {
                return m_branchId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_branchId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_branchId = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Retain
        {
            get
            {
                return m_retain;
            }

            set
            {
                if (!Object.ReferenceEquals(m_retain, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_retain = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState EnabledState
        {
            get
            {
                return m_enabledState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledState = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<StatusCode> Quality
        {
            get
            {
                return m_quality;
            }

            set
            {
                if (!Object.ReferenceEquals(m_quality, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_quality = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<ushort> LastSeverity
        {
            get
            {
                return m_lastSeverity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastSeverity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastSeverity = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }

        /// <remarks />
        public MethodState Disable
        {
            get
            {
                return m_disableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableMethod = value;
            }
        }

        /// <remarks />
        public MethodState Enable
        {
            get
            {
                return m_enableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState AddComment
        {
            get
            {
                return m_addCommentMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCommentMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCommentMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionClassId != null)
            {
                children.Add(m_conditionClassId);
            }

            if (m_conditionClassName != null)
            {
                children.Add(m_conditionClassName);
            }

            if (m_conditionName != null)
            {
                children.Add(m_conditionName);
            }

            if (m_branchId != null)
            {
                children.Add(m_branchId);
            }

            if (m_retain != null)
            {
                children.Add(m_retain);
            }

            if (m_enabledState != null)
            {
                children.Add(m_enabledState);
            }

            if (m_quality != null)
            {
                children.Add(m_quality);
            }

            if (m_lastSeverity != null)
            {
                children.Add(m_lastSeverity);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            if (m_disableMethod != null)
            {
                children.Add(m_disableMethod);
            }

            if (m_enableMethod != null)
            {
                children.Add(m_enableMethod);
            }

            if (m_addCommentMethod != null)
            {
                children.Add(m_addCommentMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionClassId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ConditionClassId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionClassName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ConditionClassName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassName;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionName = new PropertyState<string>(this);
                            }
                            else
                            {
                                ConditionName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ConditionName;
                    break;
                }

                case Opc.Ua.BrowseNames.BranchId:
                {
                    if (createOrReplace)
                    {
                        if (BranchId == null)
                        {
                            if (replacement == null)
                            {
                                BranchId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                BranchId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BranchId;
                    break;
                }

                case Opc.Ua.BrowseNames.Retain:
                {
                    if (createOrReplace)
                    {
                        if (Retain == null)
                        {
                            if (replacement == null)
                            {
                                Retain = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Retain = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Retain;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledState:
                {
                    if (createOrReplace)
                    {
                        if (EnabledState == null)
                        {
                            if (replacement == null)
                            {
                                EnabledState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                EnabledState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = EnabledState;
                    break;
                }

                case Opc.Ua.BrowseNames.Quality:
                {
                    if (createOrReplace)
                    {
                        if (Quality == null)
                        {
                            if (replacement == null)
                            {
                                Quality = new ConditionVariableState<StatusCode>(this);
                            }
                            else
                            {
                                Quality = (ConditionVariableState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = Quality;
                    break;
                }

                case Opc.Ua.BrowseNames.LastSeverity:
                {
                    if (createOrReplace)
                    {
                        if (LastSeverity == null)
                        {
                            if (replacement == null)
                            {
                                LastSeverity = new ConditionVariableState<ushort>(this);
                            }
                            else
                            {
                                LastSeverity = (ConditionVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = LastSeverity;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new ConditionVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (ConditionVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }

                case Opc.Ua.BrowseNames.Disable:
                {
                    if (createOrReplace)
                    {
                        if (Disable == null)
                        {
                            if (replacement == null)
                            {
                                Disable = new MethodState(this);
                            }
                            else
                            {
                                Disable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Disable;
                    break;
                }

                case Opc.Ua.BrowseNames.Enable:
                {
                    if (createOrReplace)
                    {
                        if (Enable == null)
                        {
                            if (replacement == null)
                            {
                                Enable = new MethodState(this);
                            }
                            else
                            {
                                Enable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Enable;
                    break;
                }

                case Opc.Ua.BrowseNames.AddComment:
                {
                    if (createOrReplace)
                    {
                        if (AddComment == null)
                        {
                            if (replacement == null)
                            {
                                AddComment = new AddCommentMethodState(this);
                            }
                            else
                            {
                                AddComment = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = AddComment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_conditionClassId;
        private PropertyState<LocalizedText> m_conditionClassName;
        private PropertyState<string> m_conditionName;
        private PropertyState<NodeId> m_branchId;
        private PropertyState<bool> m_retain;
        private TwoStateVariableState m_enabledState;
        private ConditionVariableState<StatusCode> m_quality;
        private ConditionVariableState<ushort> m_lastSeverity;
        private ConditionVariableState<LocalizedText> m_comment;
        private PropertyState<string> m_clientUserId;
        private MethodState m_disableMethod;
        private MethodState m_enableMethod;
        private AddCommentMethodState m_addCommentMethod;
        #endregion
    }
    #endif
    #endregion

    #region ConditionRefresh2MethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefresh2MethodState)
    /// <summary>
    /// Stores an instance of the ConditionRefresh2MethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefresh2MethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionRefresh2MethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefresh2MethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAENvbmRpdGlvblJlZnJlc2gyTWV0aG9kVHlwZQEAcjIALwEAcjJy" +
           "MgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHMyAC4ARHMyAACWAgAAAAEA" +
           "KgEBVgAAAA4AAABTdWJzY3JpcHRpb25JZAEAIAH/////AAAAAAMAAAAALwAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgc3Vic2NyaXB0aW9uIHRvIHJlZnJlc2guAQAqAQFZAAAADwAAAE1vbml0b3JlZEl0ZW1J" +
           "ZAEAIAH/////AAAAAAMAAAAAMQAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgbW9uaXRvcmVkIGl0ZW0g" +
           "dG8gcmVmcmVzaC4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ConditionRefresh2MethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint monitoredItemId = (uint)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    monitoredItemId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ConditionRefresh2MethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        uint monitoredItemId);
    #endif
    #endregion

    #region ConditionRefreshMethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefreshMethodState)
    /// <summary>
    /// Stores an instance of the ConditionRefreshMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefreshMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionRefreshMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefreshMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAENvbmRpdGlvblJlZnJlc2hNZXRob2RUeXBlAQAvIwAvAQAvIy8j" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMCMALgBEMCMAAJYBAAAAAQAq" +
           "AQFWAAAADgAAAFN1YnNjcmlwdGlvbklkAQAgAf////8AAAAAAwAAAAAvAAAAVGhlIGlkZW50aWZpZXIg" +
           "Zm9yIHRoZSBzdWJzY3JpcHRpb24gdG8gcmVmcmVzaC4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ConditionRefreshMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ConditionRefreshMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region AddCommentMethodState Class
    #if (!OPCUA_EXCLUDE_AddCommentMethodState)
    /// <summary>
    /// Stores an instance of the AddCommentMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCommentMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddCommentMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCommentMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAEFkZENvbW1lbnRNZXRob2RUeXBlAQAXDwAvAQAXDxcPAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAGA8ALgBEGA8AAJYCAAAAAQAqAQFGAAAA" +
           "BwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0" +
           "byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50" +
           "IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public AddCommentMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[] eventId = (byte[])_inputArguments[0];
            LocalizedText comment = (LocalizedText)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    eventId,
                    comment);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult AddCommentMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte[] eventId,
        LocalizedText comment);
    #endif
    #endregion

    #region DialogConditionState Class
    #if (!OPCUA_EXCLUDE_DialogConditionState)
    /// <summary>
    /// Stores an instance of the DialogConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogConditionState : ConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DialogConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DialogConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAERpYWxvZ0NvbmRpdGlvblR5cGVJbnN0YW5jZQEADgsBAA4LDgsA" +
           "AP////8eAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBcEAAuAERcEAAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQBdEAAuAERdEAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAXhAALgBEXhAAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAF8QAC4ARF8QAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQBgEAAuAERg" +
           "EAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAYRAALgBEYRAAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBiEAAuAERiEAAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBjEAAuAERjEAAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAGQQAC4ARGQQAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAA" +
           "AABDb25kaXRpb25DbGFzc0lkAQBqKwAuAERqKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAA" +
           "Q29uZGl0aW9uQ2xhc3NOYW1lAQBrKwAuAERrKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAA" +
           "Q29uZGl0aW9uTmFtZQEASSMALgBESSMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5j" +
           "aElkAQBKIwAuAERKIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQBlEAAuAERl" +
           "EAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQBLIwAvAQAjI0sjAAAA" +
           "Ff////8BAQEAAAABACwjAAEAXyMBAAAAFWCJCgIAAAAAAAIAAABJZAEATCMALgBETCMAAAAB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkBAFQjAC8BACojVCMAAAAT/////wEB/////wEAAAAV" +
           "YIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAVSMALgBEVSMAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AQBWIwAvAQAqI1YjAAAABf////8BAf////8BAAAAFWCJCgIA" +
           "AAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAFcjAC4ARFcjAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABwAAAENvbW1lbnQBAFgjAC8BACojWCMAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNv" +
           "dXJjZVRpbWVzdGFtcAEAWSMALgBEWSMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xp" +
           "ZW50VXNlcklkAQBaIwAuAERaIwAAAAz/////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEA" +
           "XCMALwEARCNcIwAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQBbIwAvAQBD" +
           "I1sjAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQBdIwAvAQBFI10j" +
           "AAABAQEAAAABAPkLAAEADQsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAXiMALgBEXiMA" +
           "AJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIg" +
           "Zm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAA" +
           "JAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAFWCJCgIAAAAAAAsAAABEaWFsb2dTdGF0ZQEAXyMALwEAIyNfIwAAABX/////AQEBAAAAAQAs" +
           "IwEBAEsjAgAAABVgiQoCAAAAAAACAAAASWQBAGAjAC4ARGAjAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABUcmFuc2l0aW9uVGltZQEAZCMALgBEZCMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAGAAAAUHJvbXB0AQAPCwAuAEQPCwAAABX/////AQH/////AAAAABdgiQoCAAAAAAARAAAAUmVzcG9u" +
           "c2VPcHRpb25TZXQBAGgjAC4ARGgjAAAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADwAA" +
           "AERlZmF1bHRSZXNwb25zZQEAaSMALgBEaSMAAAAG/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAE9r" +
           "UmVzcG9uc2UBAGojAC4ARGojAAAABv////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDYW5jZWxSZXNw" +
           "b25zZQEAayMALgBEayMAAAAG/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RSZXNwb25zZQEA" +
           "bCMALgBEbCMAAAAG/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAFJlc3BvbmQBAG0jAC8BAG0jbSMA" +
           "AAEBAQAAAAEA+QsAAQDfIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBuIwAuAERuIwAA" +
           "lgEAAAABACoBAUwAAAAQAAAAU2VsZWN0ZWRSZXNwb25zZQAG/////wAAAAADAAAAACUAAABUaGUgcmVz" +
           "cG9uc2UgdG8gdGhlIGRpYWxvZyBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState DialogState
        {
            get
            {
                return m_dialogState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dialogState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dialogState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Prompt
        {
            get
            {
                return m_prompt;
            }

            set
            {
                if (!Object.ReferenceEquals(m_prompt, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_prompt = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText[]> ResponseOptionSet
        {
            get
            {
                return m_responseOptionSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_responseOptionSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_responseOptionSet = value;
            }
        }

        /// <remarks />
        public PropertyState<int> DefaultResponse
        {
            get
            {
                return m_defaultResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> OkResponse
        {
            get
            {
                return m_okResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_okResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_okResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> CancelResponse
        {
            get
            {
                return m_cancelResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cancelResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cancelResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> LastResponse
        {
            get
            {
                return m_lastResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastResponse = value;
            }
        }

        /// <remarks />
        public DialogResponseMethodState Respond
        {
            get
            {
                return m_respondMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_respondMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_respondMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dialogState != null)
            {
                children.Add(m_dialogState);
            }

            if (m_prompt != null)
            {
                children.Add(m_prompt);
            }

            if (m_responseOptionSet != null)
            {
                children.Add(m_responseOptionSet);
            }

            if (m_defaultResponse != null)
            {
                children.Add(m_defaultResponse);
            }

            if (m_okResponse != null)
            {
                children.Add(m_okResponse);
            }

            if (m_cancelResponse != null)
            {
                children.Add(m_cancelResponse);
            }

            if (m_lastResponse != null)
            {
                children.Add(m_lastResponse);
            }

            if (m_respondMethod != null)
            {
                children.Add(m_respondMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DialogState:
                {
                    if (createOrReplace)
                    {
                        if (DialogState == null)
                        {
                            if (replacement == null)
                            {
                                DialogState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                DialogState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = DialogState;
                    break;
                }

                case Opc.Ua.BrowseNames.Prompt:
                {
                    if (createOrReplace)
                    {
                        if (Prompt == null)
                        {
                            if (replacement == null)
                            {
                                Prompt = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Prompt = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Prompt;
                    break;
                }

                case Opc.Ua.BrowseNames.ResponseOptionSet:
                {
                    if (createOrReplace)
                    {
                        if (ResponseOptionSet == null)
                        {
                            if (replacement == null)
                            {
                                ResponseOptionSet = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                ResponseOptionSet = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = ResponseOptionSet;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultResponse:
                {
                    if (createOrReplace)
                    {
                        if (DefaultResponse == null)
                        {
                            if (replacement == null)
                            {
                                DefaultResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                DefaultResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = DefaultResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.OkResponse:
                {
                    if (createOrReplace)
                    {
                        if (OkResponse == null)
                        {
                            if (replacement == null)
                            {
                                OkResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                OkResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = OkResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.CancelResponse:
                {
                    if (createOrReplace)
                    {
                        if (CancelResponse == null)
                        {
                            if (replacement == null)
                            {
                                CancelResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                CancelResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = CancelResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.LastResponse:
                {
                    if (createOrReplace)
                    {
                        if (LastResponse == null)
                        {
                            if (replacement == null)
                            {
                                LastResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                LastResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = LastResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.Respond:
                {
                    if (createOrReplace)
                    {
                        if (Respond == null)
                        {
                            if (replacement == null)
                            {
                                Respond = new DialogResponseMethodState(this);
                            }
                            else
                            {
                                Respond = (DialogResponseMethodState)replacement;
                            }
                        }
                    }

                    instance = Respond;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_dialogState;
        private PropertyState<LocalizedText> m_prompt;
        private PropertyState<LocalizedText[]> m_responseOptionSet;
        private PropertyState<int> m_defaultResponse;
        private PropertyState<int> m_okResponse;
        private PropertyState<int> m_cancelResponse;
        private PropertyState<int> m_lastResponse;
        private DialogResponseMethodState m_respondMethod;
        #endregion
    }
    #endif
    #endregion

    #region DialogResponseMethodState Class
    #if (!OPCUA_EXCLUDE_DialogResponseMethodState)
    /// <summary>
    /// Stores an instance of the DialogResponseMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogResponseMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DialogResponseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new DialogResponseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAERpYWxvZ1Jlc3BvbnNlTWV0aG9kVHlwZQEARyMALwEARyNHIwAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEgjAC4AREgjAACWAQAAAAEAKgEB" +
           "TAAAABAAAABTZWxlY3RlZFJlc3BvbnNlAAb/////AAAAAAMAAAAAJQAAAFRoZSByZXNwb25zZSB0byB0" +
           "aGUgZGlhbG9nIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public DialogResponseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            int selectedResponse = (int)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    selectedResponse);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult DialogResponseMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        int selectedResponse);
    #endif
    #endregion

    #region AcknowledgeableConditionState Class
    #if (!OPCUA_EXCLUDE_AcknowledgeableConditionState)
    /// <summary>
    /// Stores an instance of the AcknowledgeableConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AcknowledgeableConditionState : ConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AcknowledgeableConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ConfirmedState != null)
            {
                ConfirmedState.Initialize(context, ConfirmedState_InitializationString);
            }

            if (Confirm != null)
            {
                Confirm.Initialize(context, Confirm_InitializationString);
            }
        }

        #region Initialization String
        private const string ConfirmedState_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAENvbmZpcm1lZFN0YXRlAQCOIwAvAQAjI44jAAAAFf////8BAQEA" +
           "AAABACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAjyMALgBEjyMAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCTIwAuAESTIwAAAQAmAf////8BAf////8AAAAA";

        private const string Confirm_InitializationString =
           "//////////8EYYIKBAAAAAAABwAAAENvbmZpcm0BAJkjAC8BAJkjmSMAAAEBAQAAAAEA+QsAAQABIwEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCaIwAuAESaIwAAlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEFja25vd2xlZGdlYWJsZUNvbmRpdGlvblR5cGVJbnN0YW5jZQEA" +
           "QQsBAEELQQsAAP////8aAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQD5EwAuAET5EwAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQD6EwAuAET6EwAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEA+xMALgBE+xMAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAPwTAC4ARPwTAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQD9EwAuAET9EwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA/hMA" +
           "LgBE/hMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQD/EwAuAET/EwAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAAFAAuAEQAFAAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAAEUAC4ARAEUAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAQBsKwAuAERsKwAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1lAQBtKwAuAERtKwAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAANAAAAQ29uZGl0aW9uTmFtZQEAbyMALgBEbyMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAEJyYW5jaElkAQBwIwAuAERwIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWlu" +
           "AQACFAAuAEQCFAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQBxIwAv" +
           "AQAjI3EjAAAAFf////8BAQIAAAABACwjAAEAhSMBACwjAAEAjiMBAAAAFWCJCgIAAAAAAAIAAABJZAEA" +
           "ciMALgBEciMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkBAHojAC8BACojeiMA" +
           "AAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAeyMALgBEeyMAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AQB8IwAvAQAqI3wjAAAABf//" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAH0jAC4ARH0jAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAH4jAC8BACojfiMAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAfyMALgBEfyMAAAEAJgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCAIwAuAESAIwAAAAz/////AQH/////AAAAAARhggoE" +
           "AAAAAAAHAAAARGlzYWJsZQEAgiMALwEARCOCIwAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAG" +
           "AAAARW5hYmxlAQCBIwAvAQBDI4EjAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAoAAABBZGRD" +
           "b21tZW50AQCDIwAvAQBFI4MjAAABAQEAAAABAPkLAAEADQsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEAhCMALgBEhCMAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAo" +
           "AAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21t" +
           "ZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEA" +
           "KAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAoAAABBY2tlZFN0YXRlAQCFIwAvAQAjI4Uj" +
           "AAAAFf////8BAQEAAAABACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAhiMALgBEhiMAAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCKIwAuAESKIwAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA4AAABDb25maXJtZWRTdGF0ZQEAjiMALwEAIyOOIwAAABX/////AQEB" +
           "AAAAAQAsIwEBAHEjAgAAABVgiQoCAAAAAAACAAAASWQBAI8jAC4ARI8jAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEAkyMALgBEkyMAAAEAJgH/////AQH/////AAAAAARh" +
           "ggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAJcjAC8BAJcjlyMAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCYIwAuAESYIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJ" +
           "ZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQu" +
           "AQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRv" +
           "IHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABwAAAENvbmZp" +
           "cm0BAJkjAC8BAJkjmSMAAAEBAQAAAAEA+QsAAQABIwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQCaIwAuAESaIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABU" +
           "aGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQA" +
           "Ff////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState AckedState
        {
            get
            {
                return m_ackedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_ackedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_ackedState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState ConfirmedState
        {
            get
            {
                return m_confirmedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmedState = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Acknowledge
        {
            get
            {
                return m_acknowledgeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_acknowledgeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_acknowledgeMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Confirm
        {
            get
            {
                return m_confirmMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_ackedState != null)
            {
                children.Add(m_ackedState);
            }

            if (m_confirmedState != null)
            {
                children.Add(m_confirmedState);
            }

            if (m_acknowledgeMethod != null)
            {
                children.Add(m_acknowledgeMethod);
            }

            if (m_confirmMethod != null)
            {
                children.Add(m_confirmMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AckedState:
                {
                    if (createOrReplace)
                    {
                        if (AckedState == null)
                        {
                            if (replacement == null)
                            {
                                AckedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                AckedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = AckedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfirmedState:
                {
                    if (createOrReplace)
                    {
                        if (ConfirmedState == null)
                        {
                            if (replacement == null)
                            {
                                ConfirmedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ConfirmedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ConfirmedState;
                    break;
                }

                case Opc.Ua.BrowseNames.Acknowledge:
                {
                    if (createOrReplace)
                    {
                        if (Acknowledge == null)
                        {
                            if (replacement == null)
                            {
                                Acknowledge = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Acknowledge = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Acknowledge;
                    break;
                }

                case Opc.Ua.BrowseNames.Confirm:
                {
                    if (createOrReplace)
                    {
                        if (Confirm == null)
                        {
                            if (replacement == null)
                            {
                                Confirm = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Confirm = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Confirm;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_ackedState;
        private TwoStateVariableState m_confirmedState;
        private AddCommentMethodState m_acknowledgeMethod;
        private AddCommentMethodState m_confirmMethod;
        #endregion
    }
    #endif
    #endregion

    #region AlarmConditionState Class
    #if (!OPCUA_EXCLUDE_AlarmConditionState)
    /// <summary>
    /// Stores an instance of the AlarmConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmConditionState : AcknowledgeableConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AlarmConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SuppressedState != null)
            {
                SuppressedState.Initialize(context, SuppressedState_InitializationString);
            }

            if (ShelvingState != null)
            {
                ShelvingState.Initialize(context, ShelvingState_InitializationString);
            }

            if (MaxTimeShelved != null)
            {
                MaxTimeShelved.Initialize(context, MaxTimeShelved_InitializationString);
            }
        }

        #region Initialization String
        private const string SuppressedState_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFN1cHByZXNzZWRTdGF0ZQEA0SMALwEAIyPRIwAAABX/////AQEB" +
           "AAAAAQAsIwEBAJ4jAgAAABVgiQoCAAAAAAACAAAASWQBANIjAC4ARNIjAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEA1iMALgBE1iMAAAEAJgH/////AQH/////AAAAAA==";

        private const string ShelvingState_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAFNoZWx2aW5nU3RhdGUBANojAC8BAHEL2iMAAAEAAAABACwjAQEA" +
           "niMGAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANsjAC8BAMgK2yMAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQDcIwAuAETcIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFRyYW5zaXRpb24BAOAjAC8BAM8K4CMAAAAV/////wEB/////wIAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQDhIwAuAEThIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAOQj" +
           "AC4AROQjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVuc2hlbHZlVGltZQEA5SMALgBE" +
           "5SMAAAEAIgH/////AQH/////AAAAAARhggoEAAAAAAAIAAAAVW5zaGVsdmUBAPsjAC8BAIML+yMAAAEB" +
           "AQAAAAEA+QsAAQBVKwAAAAAEYYIKBAAAAAAADQAAAE9uZVNob3RTaGVsdmUBAPwjAC8BAIQL/CMAAAEB" +
           "AQAAAAEA+QsAAQBVKwAAAAAEYYIKBAAAAAAACwAAAFRpbWVkU2hlbHZlAQD9IwAvAQCFC/0jAAABAQEA" +
           "AAABAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/iMALgBE/iMAAJYBAAAA" +
           "AQAqAQF6AAAADAAAAFNoZWx2aW5nVGltZQEAIgH/////AAAAAAMAAAAAVQAAAElmIG5vdCAwLCB0aGlz" +
           "IHBhcmFtZXRlciBzcGVjaWZpZXMgYSBmaXhlZCB0aW1lIGZvciB3aGljaCB0aGUgQWxhcm0gaXMgdG8g" +
           "YmUgc2hlbHZlZC4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string MaxTimeShelved_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heFRpbWVTaGVsdmVkAQAAJAAuAEQAJAAAAQAiAf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAEFsYXJtQ29uZGl0aW9uVHlwZUluc3RhbmNlAQBjCwEAYwtjCwAA" +
           "/////x4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAKQVAC4ARKQVAAAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUBAKUVAC4ARKUVAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOb2RlAQCmFQAuAESmFQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "TmFtZQEApxUALgBEpxUAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAKgVAC4ARKgV" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCpFQAuAESpFQAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAKoVAC4ARKoVAAABANAi/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAKsVAC4ARKsVAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABTZXZlcml0eQEArBUALgBErBUAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAA" +
           "AENvbmRpdGlvbkNsYXNzSWQBAG4rAC4ARG4rAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABD" +
           "b25kaXRpb25DbGFzc05hbWUBAG8rAC4ARG8rAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABD" +
           "b25kaXRpb25OYW1lAQCcIwAuAEScIwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAQnJhbmNo" +
           "SWQBAJ0jAC4ARJ0jAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAK0VAC4ARK0V" +
           "AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAJ4jAC8BACMjniMAAAAV" +
           "/////wEBBQAAAAEALCMAAQCyIwEALCMAAQC7IwEALCMAAQDIIwEALCMAAQDRIwEALCMAAQDaIwEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAQCfIwAuAESfIwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVh" +
           "bGl0eQEApyMALwEAKiOnIwAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQCoIwAuAESoIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkB" +
           "AKkjAC8BACojqSMAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEA" +
           "qiMALgBEqiMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEAqyMALwEAKiOr" +
           "IwAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQCsIwAuAESsIwAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAK0jAC4ARK0jAAAADP//" +
           "//8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQCvIwAvAQBEI68jAAABAQEAAAABAPkLAAEA" +
           "8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAK4jAC8BAEMjriMAAAEBAQAAAAEA+QsAAQDzCgAAAAAE" +
           "YYIKBAAAAAAACgAAAEFkZENvbW1lbnQBALAjAC8BAEUjsCMAAAEBAQAAAAEA+QsAAQANCwEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCxIwAuAESxIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJ" +
           "ZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQu" +
           "AQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRv" +
           "IHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2Vk" +
           "U3RhdGUBALIjAC8BACMjsiMAAAAV/////wEBAQAAAAEALCMBAQCeIwEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQCzIwAuAESzIwAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAMQjAC8B" +
           "AJcjxCMAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDFIwAu" +
           "AETFIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRp" +
           "ZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAA" +
           "AwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDIIwAvAQAjI8gjAAAAFf////8BAQEA" +
           "AAABACwjAQEAniMEAAAAFWCJCgIAAAAAAAIAAABJZAEAySMALgBEySMAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQDMIwAuAETMIwAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAM0jAC4ARM0jAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQDOIwAuAETOIwAAAQAmAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUBAHArAC4ARHArAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABTdXBwcmVzc2VkU3RhdGUBANEjAC8BACMj0SMAAAAV/////wEBAQAAAAEALCMBAQCe" +
           "IwIAAAAVYIkKAgAAAAAAAgAAAElkAQDSIwAuAETSIwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAO" +
           "AAAAVHJhbnNpdGlvblRpbWUBANYjAC4ARNYjAAABACYB/////wEB/////wAAAAAEYIAKAQAAAAAADQAA" +
           "AFNoZWx2aW5nU3RhdGUBANojAC8BAHEL2iMAAAEAAAABACwjAQEAniMGAAAAFWCJCgIAAAAAAAwAAABD" +
           "dXJyZW50U3RhdGUBANsjAC8BAMgK2yMAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDc" +
           "IwAuAETcIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFRyYW5zaXRpb24BAOAjAC8B" +
           "AM8K4CMAAAAV/////wEB/////wIAAAAVYIkKAgAAAAAAAgAAAElkAQDhIwAuAEThIwAAABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAOQjAC4AROQjAAABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADAAAAFVuc2hlbHZlVGltZQEA5SMALgBE5SMAAAEAIgH/////AQH/////AAAA" +
           "AARhggoEAAAAAAAIAAAAVW5zaGVsdmUBAPsjAC8BAIML+yMAAAEBAQAAAAEA+QsAAQBVKwAAAAAEYYIK" +
           "BAAAAAAADQAAAE9uZVNob3RTaGVsdmUBAPwjAC8BAIQL/CMAAAEBAQAAAAEA+QsAAQBVKwAAAAAEYYIK" +
           "BAAAAAAACwAAAFRpbWVkU2hlbHZlAQD9IwAvAQCFC/0jAAABAQEAAAABAPkLAAEAVSsBAAAAF2CpCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/iMALgBE/iMAAJYBAAAAAQAqAQF6AAAADAAAAFNoZWx2aW5n" +
           "VGltZQEAIgH/////AAAAAAMAAAAAVQAAAElmIG5vdCAwLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMg" +
           "YSBmaXhlZCB0aW1lIGZvciB3aGljaCB0aGUgQWxhcm0gaXMgdG8gYmUgc2hlbHZlZC4BACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEA/yMALgBE/yMA" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAE1heFRpbWVTaGVsdmVkAQAAJAAuAEQAJAAAAQAi" +
           "Af////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState ActiveState
        {
            get
            {
                return m_activeState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_activeState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_activeState = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> InputNode
        {
            get
            {
                return m_inputNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputNode = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState SuppressedState
        {
            get
            {
                return m_suppressedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedState = value;
            }
        }

        /// <remarks />
        public ShelvedStateMachineState ShelvingState
        {
            get
            {
                return m_shelvingState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingState = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SuppressedOrShelved
        {
            get
            {
                return m_suppressedOrShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedOrShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedOrShelved = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeShelved
        {
            get
            {
                return m_maxTimeShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeShelved = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_activeState != null)
            {
                children.Add(m_activeState);
            }

            if (m_inputNode != null)
            {
                children.Add(m_inputNode);
            }

            if (m_suppressedState != null)
            {
                children.Add(m_suppressedState);
            }

            if (m_shelvingState != null)
            {
                children.Add(m_shelvingState);
            }

            if (m_suppressedOrShelved != null)
            {
                children.Add(m_suppressedOrShelved);
            }

            if (m_maxTimeShelved != null)
            {
                children.Add(m_maxTimeShelved);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActiveState:
                {
                    if (createOrReplace)
                    {
                        if (ActiveState == null)
                        {
                            if (replacement == null)
                            {
                                ActiveState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ActiveState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ActiveState;
                    break;
                }

                case Opc.Ua.BrowseNames.InputNode:
                {
                    if (createOrReplace)
                    {
                        if (InputNode == null)
                        {
                            if (replacement == null)
                            {
                                InputNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                InputNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = InputNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedState:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedState == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                SuppressedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = SuppressedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ShelvingState:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingState == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingState = new ShelvedStateMachineState(this);
                            }
                            else
                            {
                                ShelvingState = (ShelvedStateMachineState)replacement;
                            }
                        }
                    }

                    instance = ShelvingState;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedOrShelved:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedOrShelved == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedOrShelved = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SuppressedOrShelved = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SuppressedOrShelved;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeShelved:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeShelved == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeShelved = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeShelved = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeShelved;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_activeState;
        private PropertyState<NodeId> m_inputNode;
        private TwoStateVariableState m_suppressedState;
        private ShelvedStateMachineState m_shelvingState;
        private PropertyState<bool> m_suppressedOrShelved;
        private PropertyState<double> m_maxTimeShelved;
        #endregion
    }
    #endif
    #endregion

    #region ShelvedStateMachineState Class
    #if (!OPCUA_EXCLUDE_ShelvedStateMachineState)
    /// <summary>
    /// Stores an instance of the ShelvedStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ShelvedStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ShelvedStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ShelvedStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNoZWx2ZWRTdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAHELAQBx" +
           "C3ELAAD/////BQAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQDIFwAvAQDICsgXAAAAFf////8B" +
           "Af////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAyRcALgBEyRcAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADAAAAFVuc2hlbHZlVGltZQEAmyMALgBEmyMAAAEAIgH/////AQH/////AAAAAARhggoEAAAAAAAI" +
           "AAAAVW5zaGVsdmUBAIMLAC8BAIMLgwsAAAEBAwAAAAA1AQEAfAsANQEBAH8LAQD5CwABAFUrAAAAAARh" +
           "ggoEAAAAAAANAAAAT25lU2hvdFNoZWx2ZQEAhAsALwEAhAuECwAAAQEDAAAAADUBAQB4CwA1AQEAfgsB" +
           "APkLAAEAVSsAAAAABGGCCgQAAAAAAAsAAABUaW1lZFNoZWx2ZQEAhQsALwEAhQuFCwAAAQEDAAAAADUB" +
           "AQB3CwA1AQEAgQsBAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEArwsALgBE" +
           "rwsAAJYBAAAAAQAqAQF6AAAADAAAAFNoZWx2aW5nVGltZQEAIgH/////AAAAAAMAAAAAVQAAAElmIG5v" +
           "dCAwLCB0aGlzIHBhcmFtZXRlciBzcGVjaWZpZXMgYSBmaXhlZCB0aW1lIGZvciB3aGljaCB0aGUgQWxh" +
           "cm0gaXMgdG8gYmUgc2hlbHZlZC4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> UnshelveTime
        {
            get
            {
                return m_unshelveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveTime = value;
            }
        }

        /// <remarks />
        public MethodState Unshelve
        {
            get
            {
                return m_unshelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveMethod = value;
            }
        }

        /// <remarks />
        public MethodState OneShotShelve
        {
            get
            {
                return m_oneShotShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oneShotShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oneShotShelveMethod = value;
            }
        }

        /// <remarks />
        public TimedShelveMethodState TimedShelve
        {
            get
            {
                return m_timedShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timedShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timedShelveMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_unshelveTime != null)
            {
                children.Add(m_unshelveTime);
            }

            if (m_unshelveMethod != null)
            {
                children.Add(m_unshelveMethod);
            }

            if (m_oneShotShelveMethod != null)
            {
                children.Add(m_oneShotShelveMethod);
            }

            if (m_timedShelveMethod != null)
            {
                children.Add(m_timedShelveMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UnshelveTime:
                {
                    if (createOrReplace)
                    {
                        if (UnshelveTime == null)
                        {
                            if (replacement == null)
                            {
                                UnshelveTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                UnshelveTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = UnshelveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Unshelve:
                {
                    if (createOrReplace)
                    {
                        if (Unshelve == null)
                        {
                            if (replacement == null)
                            {
                                Unshelve = new MethodState(this);
                            }
                            else
                            {
                                Unshelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Unshelve;
                    break;
                }

                case Opc.Ua.BrowseNames.OneShotShelve:
                {
                    if (createOrReplace)
                    {
                        if (OneShotShelve == null)
                        {
                            if (replacement == null)
                            {
                                OneShotShelve = new MethodState(this);
                            }
                            else
                            {
                                OneShotShelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = OneShotShelve;
                    break;
                }

                case Opc.Ua.BrowseNames.TimedShelve:
                {
                    if (createOrReplace)
                    {
                        if (TimedShelve == null)
                        {
                            if (replacement == null)
                            {
                                TimedShelve = new TimedShelveMethodState(this);
                            }
                            else
                            {
                                TimedShelve = (TimedShelveMethodState)replacement;
                            }
                        }
                    }

                    instance = TimedShelve;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_unshelveTime;
        private MethodState m_unshelveMethod;
        private MethodState m_oneShotShelveMethod;
        private TimedShelveMethodState m_timedShelveMethod;
        #endregion
    }
    #endif
    #endregion

    #region TimedShelveMethodState Class
    #if (!OPCUA_EXCLUDE_TimedShelveMethodState)
    /// <summary>
    /// Stores an instance of the TimedShelveMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TimedShelveMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TimedShelveMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new TimedShelveMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFRpbWVkU2hlbHZlTWV0aG9kVHlwZQEA1hcALwEA1hfWFwAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANcXAC4ARNcXAACWAQAAAAEAKgEBegAA" +
           "AAwAAABTaGVsdmluZ1RpbWUBACIB/////wAAAAADAAAAAFUAAABJZiBub3QgMCwgdGhpcyBwYXJhbWV0" +
           "ZXIgc3BlY2lmaWVzIGEgZml4ZWQgdGltZSBmb3Igd2hpY2ggdGhlIEFsYXJtIGlzIHRvIGJlIHNoZWx2" +
           "ZWQuAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public TimedShelveMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            double shelvingTime = (double)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    shelvingTime);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult TimedShelveMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        double shelvingTime);
    #endif
    #endregion

    #region LimitAlarmState Class
    #if (!OPCUA_EXCLUDE_LimitAlarmState)
    /// <summary>
    /// Stores an instance of the LimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class LimitAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public LimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.LimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighLimit != null)
            {
                HighHighLimit.Initialize(context, HighHighLimit_InitializationString);
            }

            if (HighLimit != null)
            {
                HighLimit.Initialize(context, HighLimit_InitializationString);
            }

            if (LowLimit != null)
            {
                LowLimit.Initialize(context, LowLimit_InitializationString);
            }

            if (LowLowLimit != null)
            {
                LowLowLimit.Initialize(context, LowLowLimit_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoTGltaXQBAHQrAC4ARHQrAAAAC/////8BAf////8A" +
           "AAAA";

        private const string HighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hMaW1pdAEAdSsALgBEdSsAAAAL/////wEB/////wAAAAA=";

        private const string LowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd0xpbWl0AQB2KwAuAER2KwAAAAv/////AQH/////AAAAAA==";

        private const string LowLowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd0xpbWl0AQB3KwAuAER3KwAAAAv/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAExpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAIsLAQCLC4sLAAD/////" +
           "HwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA5BcALgBE5BcAAAAP/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEV2ZW50VHlwZQEA5RcALgBE5RcAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5vZGUBAOYXAC4AROYXAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1l" +
           "AQDnFwAuAETnFwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA6BcALgBE6BcAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAOkXAC4AROkXAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA6hcALgBE6hcAAAEA0CL/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA6xcALgBE6xcAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFNldmVyaXR5AQDsFwAuAETsFwAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29u" +
           "ZGl0aW9uQ2xhc3NJZAEAcSsALgBEcSsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRp" +
           "dGlvbkNsYXNzTmFtZQEAcisALgBEcisAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAENvbmRp" +
           "dGlvbk5hbWUBAAEkAC4ARAEkAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFuY2hJZAEA" +
           "AiQALgBEAiQAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA7RcALgBE7RcAAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAAyQALwEAIyMDJAAAABX/////" +
           "AQEFAAAAAQAsIwABABckAQAsIwABACAkAQAsIwABAC0kAQAsIwABADYkAQAsIwABAD8kAQAAABVgiQoC" +
           "AAAAAAACAAAASWQBAAQkAC4ARAQkAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5" +
           "AQAMJAAvAQAqIwwkAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "AA0kAC4ARA0kAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQEADiQA" +
           "LwEAKiMOJAAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAPJAAu" +
           "AEQPJAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQAQJAAvAQAqIxAkAAAA" +
           "Ff////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABABEkAC4ARBEkAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAEiQALgBEEiQAAAAM/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBABQkAC8BAEQjFCQAAAEBAQAAAAEA+QsAAQDzCgAA" +
           "AAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAEyQALwEAQyMTJAAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoE" +
           "AAAAAAAKAAAAQWRkQ29tbWVudAEAFSQALwEARSMVJAAAAQEBAAAAAQD5CwABAA0LAQAAABdgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBABYkAC4ARBYkAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//" +
           "////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoB" +
           "AUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhl" +
           "IGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0" +
           "ZQEAFyQALwEAIyMXJAAAABX/////AQEBAAAAAQAsIwEBAAMkAQAAABVgiQoCAAAAAAACAAAASWQBABgk" +
           "AC4ARBgkAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAKSQALwEAlyMp" +
           "JAAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACokAC4ARCok" +
           "AACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAA" +
           "ACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBAC0kAC8BACMjLSQAAAAV/////wEBAQAAAAEA" +
           "LCMBAQADJAEAAAAVYIkKAgAAAAAAAgAAAElkAQAuJAAuAEQuJAAAAAH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAASW5wdXROb2RlAQBzKwAuAERzKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAA" +
           "U3VwcHJlc3NlZE9yU2hlbHZlZAEAZCQALgBEZCQAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADQAA" +
           "AEhpZ2hIaWdoTGltaXQBAHQrAC4ARHQrAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABIaWdo" +
           "TGltaXQBAHUrAC4ARHUrAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABMb3dMaW1pdAEAdisA" +
           "LgBEdisAAAAL/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAExvd0xvd0xpbWl0AQB3KwAuAER3KwAA" +
           "AAv/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> HighHighLimit
        {
            get
            {
                return m_highHighLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> HighLimit
        {
            get
            {
                return m_highLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLimit
        {
            get
            {
                return m_lowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLowLimit
        {
            get
            {
                return m_lowLowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowLimit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighLimit != null)
            {
                children.Add(m_highHighLimit);
            }

            if (m_highLimit != null)
            {
                children.Add(m_highLimit);
            }

            if (m_lowLimit != null)
            {
                children.Add(m_lowLimit);
            }

            if (m_lowLowLimit != null)
            {
                children.Add(m_lowLowLimit);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighHighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighHighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighHighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighHighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.HighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLowLimit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_highHighLimit;
        private PropertyState<double> m_highLimit;
        private PropertyState<double> m_lowLimit;
        private PropertyState<double> m_lowLowLimit;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitStateMachineState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitStateMachineState)
    /// <summary>
    /// Stores an instance of the ExclusiveLimitStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLimitStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEV4Y2x1c2l2ZUxpbWl0U3RhdGVNYWNoaW5lVHlwZUluc3RhbmNl" +
           "AQBmJAEAZiRmJAAA/////wEAAAAVYIkKAgAAAAAADAAAAEN1cnJlbnRTdGF0ZQEAZyQALwEAyApnJAAA" +
           "ABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAGgkAC4ARGgkAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveLimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAH0kAQB9" +
           "JH0kAAD/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAfiQALgBEfiQAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAfyQALgBEfyQAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAIAkAC4ARIAkAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQCBJAAuAESBJAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAgiQA" +
           "LgBEgiQAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAIMkAC4ARIMk" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAhCQALgBEhCQAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAhSQALgBEhSQAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCGJAAuAESGJAAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAeCsALgBEeCsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAeSsALgBEeSsAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DQAAAENvbmRpdGlvbk5hbWUBAIckAC4ARIckAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABC" +
           "cmFuY2hJZAEAiCQALgBEiCQAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEAiSQA" +
           "LgBEiSQAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAiiQALwEAIyOK" +
           "JAAAABX/////AQEFAAAAAQAsIwABAKAkAQAsIwABAKkkAQAsIwABALYkAQAsIwABAL8kAQAsIwABAMgk" +
           "AQAAABVgiQoCAAAAAAACAAAASWQBAIskAC4ARIskAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABRdWFsaXR5AQCTJAAvAQAqI5MkAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VU" +
           "aW1lc3RhbXABAJQkAC4ARJQkAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZl" +
           "cml0eQEAlSQALwEAKiOVJAAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQCWJAAuAESWJAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQCXJAAv" +
           "AQAqI5ckAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAJgkAC4A" +
           "RJgkAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAmSQALgBEmSQA" +
           "AAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAJskAC8BAEQjmyQAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAmiQALwEAQyOaJAAAAQEBAAAAAQD5CwABAPMK" +
           "AAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAnCQALwEARSOcJAAAAQEBAAAAAQD5CwABAA0LAQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJ0kAC4ARJ0kAACWAgAAAAEAKgEBRgAAAAcAAABF" +
           "dmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29t" +
           "bWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBh" +
           "ZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "QWNrZWRTdGF0ZQEAoCQALwEAIyOgJAAAABX/////AQEBAAAAAQAsIwEBAIokAQAAABVgiQoCAAAAAAAC" +
           "AAAASWQBAKEkAC4ARKEkAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEA" +
           "siQALwEAlyOyJAAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "ALMkAC4ARLMkAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBp" +
           "ZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV////" +
           "/wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBALYkAC8BACMjtiQAAAAV////" +
           "/wEBAgAAAAEALCMBAQCKJAEALCMAAQDvJAEAAAAVYIkKAgAAAAAAAgAAAElkAQC3JAAuAES3JAAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAQB6KwAuAER6KwAAABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEA7SQALgBE7SQAAAAB/////wEB////" +
           "/wAAAAAEYIAKAQAAAAAACgAAAExpbWl0U3RhdGUBAO8kAC8BAGYk7yQAAAEAAAABACwjAQEAtiQCAAAA" +
           "FWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBAPAkAC8BAMgK8CQAAAAV/////wEB/////wEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAQDxJAAuAETxJAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFRy" +
           "YW5zaXRpb24BAPUkAC8BAM8K9SQAAAAV/////wEB/////wIAAAAVYIkKAgAAAAAAAgAAAElkAQD2JAAu" +
           "AET2JAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAPkkAC4ARPkk" +
           "AAABACYB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ExclusiveLimitStateMachineState LimitState
        {
            get
            {
                return m_limitState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_limitState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_limitState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_limitState != null)
            {
                children.Add(m_limitState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LimitState:
                {
                    if (createOrReplace)
                    {
                        if (LimitState == null)
                        {
                            if (replacement == null)
                            {
                                LimitState = new ExclusiveLimitStateMachineState(this);
                            }
                            else
                            {
                                LimitState = (ExclusiveLimitStateMachineState)replacement;
                            }
                        }
                    }

                    instance = LimitState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ExclusiveLimitStateMachineState m_limitState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLimitAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveLimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighState != null)
            {
                HighHighState.Initialize(context, HighHighState_InitializationString);
            }

            if (HighState != null)
            {
                HighState.Initialize(context, HighState_InitializationString);
            }

            if (LowState != null)
            {
                LowState.Initialize(context, LowState_InitializationString);
            }

            if (LowLowState != null)
            {
                LowLowState.Initialize(context, LowLowState_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighState_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoU3RhdGUBACQnAC8BACMjJCcAAAAV/////wEBAQAA" +
           "AAEALCMBAQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQAlJwAuAEQlJwAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBACknAC4ARCknAAABACYB/////wEB/////wAAAAA=";

        private const string HighState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hTdGF0ZQEALScALwEAIyMtJwAAABX/////AQEBAAAAAQAs" +
           "IwEBAOsmAgAAABVgiQoCAAAAAAACAAAASWQBAC4nAC4ARC4nAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABUcmFuc2l0aW9uVGltZQEAMicALgBEMicAAAEAJgH/////AQH/////AAAAAA==";

        private const string LowState_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd1N0YXRlAQA2JwAvAQAjIzYnAAAAFf////8BAQEAAAABACwj" +
           "AQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEANycALgBENycAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAFRyYW5zaXRpb25UaW1lAQA7JwAuAEQ7JwAAAQAmAf////8BAf////8AAAAA";

        private const string LowLowState_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd1N0YXRlAQA/JwAvAQAjIz8nAAAAFf////8BAQEAAAAB" +
           "ACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEAQCcALgBEQCcAAAAB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQBEJwAuAEREJwAAAQAmAf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBALIm" +
           "AQCyJrImAAD/////HwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAsyYALgBEsyYAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAtCYALgBEtCYAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBALUmAC4ARLUmAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQC2JgAuAES2JgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "tyYALgBEtyYAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBALgmAC4A" +
           "RLgmAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAuSYALgBEuSYAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAuiYALgBEuiYAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQC7JgAuAES7JgAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAhCsALgBEhCsAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAhSsALgBEhSsAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUBALwmAC4ARLwmAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAEAvSYALgBEvSYAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA" +
           "viYALgBEviYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAvyYALwEA" +
           "IyO/JgAAABX/////AQEFAAAAAQAsIwABANUmAQAsIwABAN4mAQAsIwABAOsmAQAsIwABAPQmAQAsIwAB" +
           "AP0mAQAAABVgiQoCAAAAAAACAAAASWQBAMAmAC4ARMAmAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQDIJgAvAQAqI8gmAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAMkmAC4ARMkmAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAyiYALwEAKiPKJgAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQDLJgAuAETLJgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQDM" +
           "JgAvAQAqI8wmAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAM0m" +
           "AC4ARM0mAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAziYALgBE" +
           "ziYAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBANAmAC8BAEQj0CYAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAzyYALwEAQyPPJgAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEA0SYALwEARSPRJgAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANImAC4ARNImAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAQWNrZWRTdGF0ZQEA1SYALwEAIyPVJgAAABX/////AQEBAAAAAQAsIwEBAL8mAQAAABVgiQoCAAAA" +
           "AAACAAAASWQBANYmAC4ARNYmAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRn" +
           "ZQEA5yYALwEAlyPnJgAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBAOgmAC4AROgmAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRo" +
           "ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV" +
           "/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBAOsmAC8BACMj6yYAAAAV" +
           "/////wEBBQAAAAEALCMBAQC/JgEALCMAAQAkJwEALCMAAQAtJwEALCMAAQA2JwEALCMAAQA/JwEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAQDsJgAuAETsJgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5w" +
           "dXROb2RlAQCGKwAuAESGKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9y" +
           "U2hlbHZlZAEAIicALgBEIicAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAEhpZ2hIaWdoU3Rh" +
           "dGUBACQnAC8BACMjJCcAAAAV/////wEBAQAAAAEALCMBAQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQAl" +
           "JwAuAEQlJwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBACknAC4A" +
           "RCknAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEhpZ2hTdGF0ZQEALScALwEAIyMtJwAA" +
           "ABX/////AQEBAAAAAQAsIwEBAOsmAgAAABVgiQoCAAAAAAACAAAASWQBAC4nAC4ARC4nAAAAAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEAMicALgBEMicAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAATG93U3RhdGUBADYnAC8BACMjNicAAAAV/////wEBAQAAAAEALCMB" +
           "AQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQA3JwAuAEQ3JwAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAAVHJhbnNpdGlvblRpbWUBADsnAC4ARDsnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAExvd0xvd1N0YXRlAQA/JwAvAQAjIz8nAAAAFf////8BAQEAAAABACwjAQEA6yYCAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEAQCcALgBEQCcAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRp" +
           "b25UaW1lAQBEJwAuAEREJwAAAQAmAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState HighHighState
        {
            get
            {
                return m_highHighState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState HighState
        {
            get
            {
                return m_highState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowState
        {
            get
            {
                return m_lowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowLowState
        {
            get
            {
                return m_lowLowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighState != null)
            {
                children.Add(m_highHighState);
            }

            if (m_highState != null)
            {
                children.Add(m_highState);
            }

            if (m_lowState != null)
            {
                children.Add(m_lowState);
            }

            if (m_lowLowState != null)
            {
                children.Add(m_lowLowState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighState:
                {
                    if (createOrReplace)
                    {
                        if (HighHighState == null)
                        {
                            if (replacement == null)
                            {
                                HighHighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighHighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighHighState;
                    break;
                }

                case Opc.Ua.BrowseNames.HighState:
                {
                    if (createOrReplace)
                    {
                        if (HighState == null)
                        {
                            if (replacement == null)
                            {
                                HighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowState:
                {
                    if (createOrReplace)
                    {
                        if (LowState == null)
                        {
                            if (replacement == null)
                            {
                                LowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowState:
                {
                    if (createOrReplace)
                    {
                        if (LowLowState == null)
                        {
                            if (replacement == null)
                            {
                                LowLowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowLowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowLowState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_highHighState;
        private TwoStateVariableState m_highState;
        private TwoStateVariableState m_lowState;
        private TwoStateVariableState m_lowLowState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLevelAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveLevelAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLevelAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAEwn" +
           "AQBMJ0wnAAD/////GwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEATScALgBETScAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEATicALgBETicAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAE8nAC4ARE8nAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQBQJwAuAERQJwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "UScALgBEUScAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAFInAC4A" +
           "RFInAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAUycALgBEUycAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAVCcALgBEVCcAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBVJwAuAERVJwAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAhysALgBEhysAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAiCsALgBEiCsAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUBAFYnAC4ARFYnAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAEAVycALgBEVycAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA" +
           "WCcALgBEWCcAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAWScALwEA" +
           "IyNZJwAAABX/////AQEFAAAAAQAsIwABAG8nAQAsIwABAHgnAQAsIwABAIUnAQAsIwABAI4nAQAsIwAB" +
           "AJcnAQAAABVgiQoCAAAAAAACAAAASWQBAFonAC4ARFonAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQBiJwAvAQAqI2InAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAGMnAC4ARGMnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAZCcALwEAKiNkJwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQBlJwAuAERlJwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQBm" +
           "JwAvAQAqI2YnAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAGcn" +
           "AC4ARGcnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAaCcALgBE" +
           "aCcAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAGonAC8BAEQjaicAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAaScALwEAQyNpJwAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAaycALwEARSNrJwAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAGwnAC4ARGwnAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAQWNrZWRTdGF0ZQEAbycALwEAIyNvJwAAABX/////AQEBAAAAAQAsIwEBAFknAQAAABVgiQoCAAAA" +
           "AAACAAAASWQBAHAnAC4ARHAnAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRn" +
           "ZQEAgScALwEAlyOBJwAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBAIInAC4ARIInAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRo" +
           "ZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV" +
           "/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBAIUnAC8BACMjhScAAAAV" +
           "/////wEBBQAAAAEALCMBAQBZJwEALCMAAQC+JwEALCMAAQDHJwEALCMAAQDQJwEALCMAAQDZJwEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAQCGJwAuAESGJwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5w" +
           "dXROb2RlAQCJKwAuAESJKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9y" +
           "U2hlbHZlZAEAvCcALgBEvCcAAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLevelAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveLevelAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLevelAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAAolAQAK" +
           "JQolAAD/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEACyUALgBECyUAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEADCUALgBEDCUAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAA0lAC4ARA0lAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQAOJQAuAEQOJQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEADyUA" +
           "LgBEDyUAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBABAlAC4ARBAl" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAESUALgBEESUAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAEiUALgBEEiUAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQATJQAuAEQTJQAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAeysALgBEeysAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAfCsALgBEfCsAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DQAAAENvbmRpdGlvbk5hbWUBABQlAC4ARBQlAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABC" +
           "cmFuY2hJZAEAFSUALgBEFSUAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEAFiUA" +
           "LgBEFiUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAFyUALwEAIyMX" +
           "JQAAABX/////AQEFAAAAAQAsIwABAC0lAQAsIwABADYlAQAsIwABAEMlAQAsIwABAEwlAQAsIwABAFUl" +
           "AQAAABVgiQoCAAAAAAACAAAASWQBABglAC4ARBglAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABRdWFsaXR5AQAgJQAvAQAqIyAlAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VU" +
           "aW1lc3RhbXABACElAC4ARCElAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZl" +
           "cml0eQEAIiUALwEAKiMiJQAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQAjJQAuAEQjJQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQAkJQAv" +
           "AQAqIyQlAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABACUlAC4A" +
           "RCUlAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAJiUALgBEJiUA" +
           "AAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBACglAC8BAEQjKCUAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAJyUALwEAQyMnJQAAAQEBAAAAAQD5CwABAPMK" +
           "AAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAKSUALwEARSMpJQAAAQEBAAAAAQD5CwABAA0LAQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAColAC4ARColAACWAgAAAAEAKgEBRgAAAAcAAABF" +
           "dmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29t" +
           "bWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBh" +
           "ZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "QWNrZWRTdGF0ZQEALSUALwEAIyMtJQAAABX/////AQEBAAAAAQAsIwEBABclAQAAABVgiQoCAAAAAAAC" +
           "AAAASWQBAC4lAC4ARC4lAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEA" +
           "PyUALwEAlyM/JQAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AEAlAC4AREAlAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBp" +
           "ZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV////" +
           "/wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBAEMlAC8BACMjQyUAAAAV////" +
           "/wEBAgAAAAEALCMBAQAXJQEALCMAAQB8JQEAAAAVYIkKAgAAAAAAAgAAAElkAQBEJQAuAEREJQAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAQB9KwAuAER9KwAAABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEAeiUALgBEeiUAAAAB/////wEB////" +
           "/wAAAAAEYIAKAQAAAAAACgAAAExpbWl0U3RhdGUBAHwlAC8BAGYkfCUAAAEAAAABACwjAQEAQyUBAAAA" +
           "FWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBAH0lAC8BAMgKfSUAAAAV/////wEB/////wEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAQB+JQAuAER+JQAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveDeviationAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveDeviationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveDeviationAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAE5vbkV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCAKAEAgCiAKAAA/////xwAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAIEoAC4ARIEoAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAIIoAC4ARIIoAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQCDKAAuAESDKAAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEAhCgALgBEhCgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAIUoAC4ARIUoAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCG" +
           "KAAuAESGKAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAIcoAC4ARIco" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAIgoAC4ARIgoAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAiSgALgBEiSgAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAI0rAC4ARI0rAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBAI4rAC4ARI4rAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQCKKAAuAESKKAAAAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAQnJhbmNoSWQBAIsoAC4ARIsoAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRh" +
           "aW4BAIwoAC4ARIwoAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAI0o" +
           "AC8BACMjjSgAAAAV/////wEBBQAAAAEALCMAAQCjKAEALCMAAQCsKAEALCMAAQC5KAEALCMAAQDCKAEA" +
           "LCMAAQDLKAEAAAAVYIkKAgAAAAAAAgAAAElkAQCOKAAuAESOKAAAAAH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAHAAAAUXVhbGl0eQEAligALwEAKiOWKAAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAA" +
           "U291cmNlVGltZXN0YW1wAQCXKAAuAESXKAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABM" +
           "YXN0U2V2ZXJpdHkBAJgoAC8BACojmCgAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJj" +
           "ZVRpbWVzdGFtcAEAmSgALgBEmSgAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVu" +
           "dAEAmigALwEAKiOaKAAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1w" +
           "AQCbKAAuAESbKAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAJwo" +
           "AC4ARJwoAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQCeKAAvAQBEI54oAAAB" +
           "AQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAJ0oAC8BAEMjnSgAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAJ8oAC8BAEUjnygAAAEBAQAAAAEA+QsA" +
           "AQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCgKAAuAESgKAAAlgIAAAABACoBAUYA" +
           "AAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50" +
           "IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1l" +
           "bnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAEFja2VkU3RhdGUBAKMoAC8BACMjoygAAAAV/////wEBAQAAAAEALCMBAQCNKAEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAQCkKAAuAESkKAAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93" +
           "bGVkZ2UBALUoAC8BAJcjtSgAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQC2KAAuAES2KAAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgA" +
           "AABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1l" +
           "bnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQC5KAAvAQAjI7ko" +
           "AAAAFf////8BAQUAAAABACwjAQEAjSgBACwjAAEA8igBACwjAAEA+ygBACwjAAEABCkBACwjAAEADSkB" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEAuigALgBEuigAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAA" +
           "AElucHV0Tm9kZQEAjysALgBEjysAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNz" +
           "ZWRPclNoZWx2ZWQBAPAoAC4ARPAoAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZXRwb2lu" +
           "dE5vZGUBABopAC4ARBopAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveDeviationAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveDeviationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveDeviationAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNlAQAk" +
           "JgEAJCYkJgAA/////x0AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBACUmAC4ARCUmAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBACYmAC4ARCYmAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQAnJgAuAEQnJgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAKCYALgBEKCYAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "ACkmAC4ARCkmAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAqJgAu" +
           "AEQqJgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBACsmAC4ARCsmAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBACwmAC4ARCwmAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEALSYALgBELSYAAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAIErAC4ARIErAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBAIIrAC4ARIIrAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA0AAABDb25kaXRpb25OYW1lAQAuJgAuAEQuJgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAQnJhbmNoSWQBAC8mAC4ARC8mAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4B" +
           "ADAmAC4ARDAmAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBADEmAC8B" +
           "ACMjMSYAAAAV/////wEBBQAAAAEALCMAAQBHJgEALCMAAQBQJgEALCMAAQBdJgEALCMAAQBmJgEALCMA" +
           "AQBvJgEAAAAVYIkKAgAAAAAAAgAAAElkAQAyJgAuAEQyJgAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAHAAAAUXVhbGl0eQEAOiYALwEAKiM6JgAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291" +
           "cmNlVGltZXN0YW1wAQA7JgAuAEQ7JgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0" +
           "U2V2ZXJpdHkBADwmAC8BACojPCYAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRp" +
           "bWVzdGFtcAEAPSYALgBEPSYAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEA" +
           "PiYALwEAKiM+JgAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQA/" +
           "JgAuAEQ/JgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAEAmAC4A" +
           "REAmAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQBCJgAvAQBEI0ImAAABAQEA" +
           "AAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAEEmAC8BAEMjQSYAAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAEMmAC8BAEUjQyYAAAEBAQAAAAEA+QsAAQAN" +
           "CwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBEJgAuAEREJgAAlgIAAAABACoBAUYAAAAH" +
           "AAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRv" +
           "IGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQg" +
           "dG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAEFja2VkU3RhdGUBAEcmAC8BACMjRyYAAAAV/////wEBAQAAAAEALCMBAQAxJgEAAAAVYIkKAgAA" +
           "AAAAAgAAAElkAQBIJgAuAERIJgAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVk" +
           "Z2UBAFkmAC8BAJcjWSYAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBaJgAuAERaJgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABU" +
           "aGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQA" +
           "Ff////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQBdJgAvAQAjI10mAAAA" +
           "Ff////8BAQIAAAABACwjAQEAMSYBACwjAAEAliYBAAAAFWCJCgIAAAAAAAIAAABJZAEAXiYALgBEXiYA" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEAgysALgBEgysAAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAJQmAC4ARJQmAAAAAf////8B" +
           "Af////8AAAAABGCACgEAAAAAAAoAAABMaW1pdFN0YXRlAQCWJgAvAQBmJJYmAAABAAAAAQAsIwEBAF0m" +
           "AQAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQCXJgAvAQDICpcmAAAAFf////8BAf////8BAAAA" +
           "FWCJCgIAAAAAAAIAAABJZAEAmCYALgBEmCYAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFNl" +
           "dHBvaW50Tm9kZQEAsSYALgBEsSYAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveRateOfChangeAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveRateOfChangeAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveRateOfChangeAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAE5vbkV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3Rh" +
           "bmNlAQDmJwEA5ifmJwAA/////xsAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAOcnAC4AROcnAAAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAOgnAC4AROgnAAAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQDpJwAuAETpJwAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQEA6icALgBE6icAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUBAOsnAC4AROsnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AQDsJwAuAETsJwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAO0nAC4A" +
           "RO0nAAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAO4nAC4ARO4nAAAAFf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA7ycALgBE7ycAAAAF/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAIorAC4ARIorAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBAIsrAC4ARIsrAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQDwJwAuAETwJwAAAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAQnJhbmNoSWQBAPEnAC4ARPEnAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABS" +
           "ZXRhaW4BAPInAC4ARPInAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUB" +
           "APMnAC8BACMj8ycAAAAV/////wEBBQAAAAEALCMAAQAJKAEALCMAAQASKAEALCMAAQAfKAEALCMAAQAo" +
           "KAEALCMAAQAxKAEAAAAVYIkKAgAAAAAAAgAAAElkAQD0JwAuAET0JwAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAHAAAAUXVhbGl0eQEA/CcALwEAKiP8JwAAABP/////AQH/////AQAAABVgiQoCAAAAAAAP" +
           "AAAAU291cmNlVGltZXN0YW1wAQD9JwAuAET9JwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwA" +
           "AABMYXN0U2V2ZXJpdHkBAP4nAC8BACoj/icAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNv" +
           "dXJjZVRpbWVzdGFtcAEA/ycALgBE/ycAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29t" +
           "bWVudAEAACgALwEAKiMAKAAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQABKAAuAEQBKAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AAIoAC4ARAIoAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQAEKAAvAQBEIwQo" +
           "AAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAAMoAC8BAEMjAygAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAAUoAC8BAEUjBSgAAAEBAQAAAAEA" +
           "+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAGKAAuAEQGKAAAlgIAAAABACoB" +
           "AUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2" +
           "ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNv" +
           "bW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAEFja2VkU3RhdGUBAAkoAC8BACMjCSgAAAAV/////wEBAQAAAAEALCMBAQDzJwEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAQAKKAAuAEQKKAAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNr" +
           "bm93bGVkZ2UBABsoAC8BAJcjGygAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQAcKAAuAEQcKAAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAA" +
           "ACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENv" +
           "bW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24u" +
           "AQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQAfKAAvAQAj" +
           "Ix8oAAAAFf////8BAQUAAAABACwjAQEA8ycBACwjAAEAWCgBACwjAAEAYSgBACwjAAEAaigBACwjAAEA" +
           "cygBAAAAFWCJCgIAAAAAAAIAAABJZAEAICgALgBEICgAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAElucHV0Tm9kZQEAjCsALgBEjCsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHBy" +
           "ZXNzZWRPclNoZWx2ZWQBAFYoAC4ARFYoAAAAAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveRateOfChangeAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveRateOfChangeAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveRateOfChangeAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3RhbmNl" +
           "AQCXJQEAlyWXJQAA/////xwAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAJglAC4ARJglAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAJklAC4ARJklAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQCaJQAuAESaJQAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEAmyUALgBEmyUAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAJwlAC4ARJwlAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCd" +
           "JQAuAESdJQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJ4lAC4ARJ4l" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJ8lAC4ARJ8lAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAoCUALgBEoCUAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAH4rAC4ARH4rAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBAH8rAC4ARH8rAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQChJQAuAEShJQAAAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAQnJhbmNoSWQBAKIlAC4ARKIlAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRh" +
           "aW4BAKMlAC4ARKMlAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAKQl" +
           "AC8BACMjpCUAAAAV/////wEBBQAAAAEALCMAAQC6JQEALCMAAQDDJQEALCMAAQDQJQEALCMAAQDZJQEA" +
           "LCMAAQDiJQEAAAAVYIkKAgAAAAAAAgAAAElkAQClJQAuAESlJQAAAAH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAHAAAAUXVhbGl0eQEArSUALwEAKiOtJQAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAA" +
           "U291cmNlVGltZXN0YW1wAQCuJQAuAESuJQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABM" +
           "YXN0U2V2ZXJpdHkBAK8lAC8BACojryUAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJj" +
           "ZVRpbWVzdGFtcAEAsCUALgBEsCUAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVu" +
           "dAEAsSUALwEAKiOxJQAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1w" +
           "AQCyJQAuAESyJQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBALMl" +
           "AC4ARLMlAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQC1JQAvAQBEI7UlAAAB" +
           "AQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBALQlAC8BAEMjtCUAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBALYlAC8BAEUjtiUAAAEBAQAAAAEA+QsA" +
           "AQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC3JQAuAES3JQAAlgIAAAABACoBAUYA" +
           "AAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50" +
           "IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1l" +
           "bnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAEFja2VkU3RhdGUBALolAC8BACMjuiUAAAAV/////wEBAQAAAAEALCMBAQCkJQEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAQC7JQAuAES7JQAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93" +
           "bGVkZ2UBAMwlAC8BAJcjzCUAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQDNJQAuAETNJQAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgA" +
           "AABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1l" +
           "bnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDQJQAvAQAjI9Al" +
           "AAAAFf////8BAQIAAAABACwjAQEApCUBACwjAAEACSYBAAAAFWCJCgIAAAAAAAIAAABJZAEA0SUALgBE" +
           "0SUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEAgCsALgBEgCsAAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAAcmAC4ARAcmAAAAAf//" +
           "//8BAf////8AAAAABGCACgEAAAAAAAoAAABMaW1pdFN0YXRlAQAJJgAvAQBmJAkmAAABAAAAAQAsIwEB" +
           "ANAlAQAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQAKJgAvAQDICgomAAAAFf////8BAf////8B" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEACyYALgBECyYAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DiscreteAlarmState Class
    #if (!OPCUA_EXCLUDE_DiscreteAlarmState)
    /// <summary>
    /// Stores an instance of the DiscreteAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DiscreteAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DiscreteAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAERpc2NyZXRlQWxhcm1UeXBlSW5zdGFuY2UBABspAQAbKRspAAD/" +
           "////GwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAHCkALgBEHCkAAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQEAHSkALgBEHSkAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5vZGUBAB4pAC4ARB4pAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "YW1lAQAfKQAuAEQfKQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAICkALgBEICkA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBACEpAC4ARCEpAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAIikALgBEIikAAAEA0CL/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAIykALgBEIykAAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFNldmVyaXR5AQAkKQAuAEQkKQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAA" +
           "Q29uZGl0aW9uQ2xhc3NJZAEAkCsALgBEkCsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENv" +
           "bmRpdGlvbkNsYXNzTmFtZQEAkSsALgBEkSsAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAENv" +
           "bmRpdGlvbk5hbWUBACUpAC4ARCUpAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFuY2hJ" +
           "ZAEAJikALgBEJikAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEAJykALgBEJykA" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAKCkALwEAIyMoKQAAABX/" +
           "////AQEFAAAAAQAsIwABAD4pAQAsIwABAEcpAQAsIwABAFQpAQAsIwABAF0pAQAsIwABAGYpAQAAABVg" +
           "iQoCAAAAAAACAAAASWQBACkpAC4ARCkpAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFs" +
           "aXR5AQAxKQAvAQAqIzEpAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3Rh" +
           "bXABADIpAC4ARDIpAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQEA" +
           "MykALwEAKiMzKQAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQA0" +
           "KQAuAEQ0KQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQA1KQAvAQAqIzUp" +
           "AAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABADYpAC4ARDYpAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEANykALgBENykAAAAM////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBADkpAC8BAEQjOSkAAAEBAQAAAAEA+QsAAQDz" +
           "CgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAOCkALwEAQyM4KQAAAQEBAAAAAQD5CwABAPMKAAAAAARh" +
           "ggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAOikALwEARSM6KQAAAQEBAAAAAQD5CwABAA0LAQAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADspAC4ARDspAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElk" +
           "AA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4B" +
           "ACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8g" +
           "dGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRT" +
           "dGF0ZQEAPikALwEAIyM+KQAAABX/////AQEBAAAAAQAsIwEBACgpAQAAABVgiQoCAAAAAAACAAAASWQB" +
           "AD8pAC4ARD8pAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAUCkALwEA" +
           "lyNQKQAAAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFEpAC4A" +
           "RFEpAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlm" +
           "aWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAAD" +
           "AAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUBAFQpAC8BACMjVCkAAAAV/////wEBAQAA" +
           "AAEALCMBAQAoKQEAAAAVYIkKAgAAAAAAAgAAAElkAQBVKQAuAERVKQAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAASW5wdXROb2RlAQCSKwAuAESSKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAT" +
           "AAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEAiykALgBEiykAAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region OffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_OffNormalAlarmState)
    /// <summary>
    /// Stores an instance of the OffNormalAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OffNormalAlarmState : DiscreteAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAE9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQCNKQEAjSmNKQAA" +
           "/////xwAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAI4pAC4ARI4pAAAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUBAI8pAC4ARI8pAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOb2RlAQCQKQAuAESQKQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "TmFtZQEAkSkALgBEkSkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAJIpAC4ARJIp" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCTKQAuAESTKQAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJQpAC4ARJQpAAABANAi/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJUpAC4ARJUpAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABTZXZlcml0eQEAlikALgBElikAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAA" +
           "AENvbmRpdGlvbkNsYXNzSWQBAJMrAC4ARJMrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABD" +
           "b25kaXRpb25DbGFzc05hbWUBAJQrAC4ARJQrAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABD" +
           "b25kaXRpb25OYW1lAQCXKQAuAESXKQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAQnJhbmNo" +
           "SWQBAJgpAC4ARJgpAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAJkpAC4ARJkp" +
           "AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAJopAC8BACMjmikAAAAV" +
           "/////wEBBQAAAAEALCMAAQCwKQEALCMAAQC5KQEALCMAAQDGKQEALCMAAQDPKQEALCMAAQDYKQEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAQCbKQAuAESbKQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVh" +
           "bGl0eQEAoykALwEAKiOjKQAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQCkKQAuAESkKQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkB" +
           "AKUpAC8BACojpSkAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEA" +
           "pikALgBEpikAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEApykALwEAKiOn" +
           "KQAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQCoKQAuAESoKQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAKkpAC4ARKkpAAAADP//" +
           "//8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQCrKQAvAQBEI6spAAABAQEAAAABAPkLAAEA" +
           "8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAKopAC8BAEMjqikAAAEBAQAAAAEA+QsAAQDzCgAAAAAE" +
           "YYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAKwpAC8BAEUjrCkAAAEBAQAAAAEA+QsAAQANCwEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCtKQAuAEStKQAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJ" +
           "ZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQu" +
           "AQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRv" +
           "IHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2Vk" +
           "U3RhdGUBALApAC8BACMjsCkAAAAV/////wEBAQAAAAEALCMBAQCaKQEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQCxKQAuAESxKQAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAMIpAC8B" +
           "AJcjwikAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDDKQAu" +
           "AETDKQAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRp" +
           "ZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAA" +
           "AwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDGKQAvAQAjI8YpAAAAFf////8BAQEA" +
           "AAABACwjAQEAmikBAAAAFWCJCgIAAAAAAAIAAABJZAEAxykALgBExykAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAElucHV0Tm9kZQEAlSsALgBElSsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAP0pAC4ARP0pAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABOb3JtYWxTdGF0ZQEAlisALgBElisAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> NormalState
        {
            get
            {
                return m_normalState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_normalState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_normalState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_normalState != null)
            {
                children.Add(m_normalState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NormalState:
                {
                    if (createOrReplace)
                    {
                        if (NormalState == null)
                        {
                            if (replacement == null)
                            {
                                NormalState = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                NormalState = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = NormalState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_normalState;
        #endregion
    }
    #endif
    #endregion

    #region SystemOffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_SystemOffNormalAlarmState)
    /// <summary>
    /// Stores an instance of the SystemOffNormalAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemOffNormalAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemOffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemOffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFN5c3RlbU9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQDpLQEA" +
           "6S3pLQAA/////xwAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAOotAC4AROotAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAOstAC4AROstAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAQDsLQAuAETsLQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQEA7S0ALgBE7S0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAO4t" +
           "AC4ARO4tAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDvLQAuAETv" +
           "LQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAPAtAC4ARPAtAAABANAi" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAPEtAC4ARPEtAAAAFf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA8i0ALgBE8i0AAAAF/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAPMtAC4ARPMtAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABIAAABDb25kaXRpb25DbGFzc05hbWUBAPQtAC4ARPQtAAAAFf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA0AAABDb25kaXRpb25OYW1lAQD1LQAuAET1LQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "QnJhbmNoSWQBAPYtAC4ARPYtAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAPct" +
           "AC4ARPctAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAPgtAC8BACMj" +
           "+C0AAAAV/////wEBBQAAAAEALCMAAQAOLgEALCMAAQAXLgEALCMAAQAkLgEALCMAAQAuLgEALCMAAQA3" +
           "LgEAAAAVYIkKAgAAAAAAAgAAAElkAQD5LQAuAET5LQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAAUXVhbGl0eQEAAS4ALwEAKiMBLgAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNl" +
           "VGltZXN0YW1wAQACLgAuAEQCLgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2" +
           "ZXJpdHkBAAMuAC8BACojAy4AAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVz" +
           "dGFtcAEABC4ALgBEBC4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEABS4A" +
           "LwEAKiMFLgAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAGLgAu" +
           "AEQGLgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAAcuAC4ARAcu" +
           "AAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQAILgAvAQBEIwguAAABAQEAAAAB" +
           "APkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAAkuAC8BAEMjCS4AAAEBAQAAAAEA+QsAAQDz" +
           "CgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAAouAC8BAEUjCi4AAAEBAQAAAAEA+QsAAQANCwEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQALLgAuAEQLLgAAlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AEFja2VkU3RhdGUBAA4uAC8BACMjDi4AAAAV/////wEBAQAAAAEALCMBAQD4LQEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQAPLgAuAEQPLgAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UB" +
           "ACAuAC8BAJcjIC4AAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQAhLgAuAEQhLgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUg" +
           "aWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf//" +
           "//8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQAkLgAvAQAjIyQuAAAAFf//" +
           "//8BAQEAAAABACwjAQEA+C0BAAAAFWCJCgIAAAAAAAIAAABJZAEAJS4ALgBEJS4AAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEALS4ALgBELS4AAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAEguAC4AREguAAAAAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEASi4ALgBESi4AAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region CertificateExpirationAlarmState Class
    #if (!OPCUA_EXCLUDE_CertificateExpirationAlarmState)
    /// <summary>
    /// Stores an instance of the CertificateExpirationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateExpirationAlarmState : SystemOffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateExpirationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateExpirationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExpirationLimit != null)
            {
                ExpirationLimit.Initialize(context, ExpirationLimit_InitializationString);
            }
        }

        #region Initialization String
        private const string ExpirationLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEV4cGlyYXRpb25MaW1pdAEANDoALgBENDoAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAENlcnRpZmljYXRlRXhwaXJhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCpMwEAqTOpMwAA/////yAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAKozAC4ARKozAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAKszAC4ARKszAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQCsMwAuAESsMwAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEArTMALgBErTMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAK4zAC4ARK4zAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCv" +
           "MwAuAESvMwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBALAzAC4ARLAz" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBALEzAC4ARLEzAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAsjMALgBEsjMAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBALMzAC4ARLMzAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBALQzAC4ARLQzAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQC1MwAuAES1MwAAAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAQnJhbmNoSWQBALYzAC4ARLYzAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRh" +
           "aW4BALczAC4ARLczAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBALgz" +
           "AC8BACMjuDMAAAAV/////wEBBQAAAAEALCMAAQDQMwEALCMAAQDZMwEALCMAAQDmMwEALCMAAQDwMwEA" +
           "LCMAAQD5MwEAAAAVYIkKAgAAAAAAAgAAAElkAQC5MwAuAES5MwAAAAH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAHAAAAUXVhbGl0eQEAwTMALwEAKiPBMwAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAA" +
           "U291cmNlVGltZXN0YW1wAQDCMwAuAETCMwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABM" +
           "YXN0U2V2ZXJpdHkBAMMzAC8BACojwzMAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJj" +
           "ZVRpbWVzdGFtcAEAxDMALgBExDMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVu" +
           "dAEAxTMALwEAKiPFMwAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1w" +
           "AQDGMwAuAETGMwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAMcz" +
           "AC4ARMczAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQDIMwAvAQBEI8gzAAAB" +
           "AQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAMkzAC8BAEMjyTMAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAMozAC8BAEUjyjMAAAEBAQAAAAEA+QsA" +
           "AQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDLMwAuAETLMwAAlgIAAAABACoBAUYA" +
           "AAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50" +
           "IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1l" +
           "bnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAEFja2VkU3RhdGUBANAzAC8BACMj0DMAAAAV/////wEBAQAAAAEALCMBAQC4MwEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAQDRMwAuAETRMwAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93" +
           "bGVkZ2UBAOIzAC8BAJcj4jMAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQDjMwAuAETjMwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgA" +
           "AABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1l" +
           "bnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDmMwAvAQAjI+Yz" +
           "AAAAFf////8BAQEAAAABACwjAQEAuDMBAAAAFWCJCgIAAAAAAAIAAABJZAEA5zMALgBE5zMAAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEA7zMALgBE7zMAAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAAo0AC4ARAo0AAAAAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEADDQALgBEDDQAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAEV4cGlyYXRpb25EYXRlAQANNAAuAEQNNAAAAA3/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAARXhwaXJhdGlvbkxpbWl0AQA0OgAuAEQ0OgAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABDZXJ0aWZpY2F0ZVR5cGUBAA40AC4ARA40AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABDZXJ0aWZpY2F0ZQEADzQALgBEDzQAAAAP/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ExpirationDate
        {
            get
            {
                return m_expirationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExpirationLimit
        {
            get
            {
                return m_expirationLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_expirationDate != null)
            {
                children.Add(m_expirationDate);
            }

            if (m_expirationLimit != null)
            {
                children.Add(m_expirationLimit);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExpirationDate:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationDate == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ExpirationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ExpirationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.ExpirationLimit:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationLimit == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExpirationLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExpirationLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }

                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_expirationDate;
        private PropertyState<double> m_expirationLimit;
        private PropertyState<NodeId> m_certificateType;
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region TripAlarmState Class
    #if (!OPCUA_EXCLUDE_TripAlarmState)
    /// <summary>
    /// Stores an instance of the TripAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TripAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TripAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TripAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAFRyaXBBbGFybVR5cGVJbnN0YW5jZQEA/ykBAP8p/ykAAP////8c" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAAKgAuAEQAKgAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQABKgAuAEQBKgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEAAioALgBEAioAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "AAMqAC4ARAMqAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAEKgAuAEQEKgAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEABSoALgBEBSoAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAGKgAuAEQGKgAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAHKgAuAEQHKgAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBAAgqAC4ARAgqAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25k" +
           "aXRpb25DbGFzc0lkAQCXKwAuAESXKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0" +
           "aW9uQ2xhc3NOYW1lAQCYKwAuAESYKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQ29uZGl0" +
           "aW9uTmFtZQEACSoALgBECSoAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5jaElkAQAK" +
           "KgAuAEQKKgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQALKgAuAEQLKgAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQAMKgAvAQAjIwwqAAAAFf////8B" +
           "AQUAAAABACwjAAEAIioBACwjAAEAKyoBACwjAAEAOCoBACwjAAEAQSoBACwjAAEASioBAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEADSoALgBEDSoAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkB" +
           "ABUqAC8BACojFSoAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEA" +
           "FioALgBEFioAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AQAXKgAv" +
           "AQAqIxcqAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABABgqAC4A" +
           "RBgqAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBABkqAC8BACojGSoAAAAV" +
           "/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAGioALgBEGioAAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAbKgAuAEQbKgAAAAz/////AQH/" +
           "////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAHSoALwEARCMdKgAAAQEBAAAAAQD5CwABAPMKAAAA" +
           "AARhggoEAAAAAAAGAAAARW5hYmxlAQAcKgAvAQBDIxwqAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQA" +
           "AAAAAAoAAABBZGRDb21tZW50AQAeKgAvAQBFIx4qAAABAQEAAAABAPkLAAEADQsBAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAHyoALgBEHyoAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD///" +
           "//8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEB" +
           "QgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUg" +
           "Y29uZGl0aW9uLgEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAoAAABBY2tlZFN0YXRl" +
           "AQAiKgAvAQAjIyIqAAAAFf////8BAQEAAAABACwjAQEADCoBAAAAFWCJCgIAAAAAAAIAAABJZAEAIyoA" +
           "LgBEIyoAAAAB/////wEB/////wAAAAAEYYIKBAAAAAAACwAAAEFja25vd2xlZGdlAQA0KgAvAQCXIzQq" +
           "AAABAQEAAAABAPkLAAEA8CIBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANSoALgBENSoA" +
           "AJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIg" +
           "Zm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAA" +
           "JAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEAOCoALwEAIyM4KgAAABX/////AQEBAAAAAQAs" +
           "IwEBAAwqAQAAABVgiQoCAAAAAAACAAAASWQBADkqAC4ARDkqAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAkAAABJbnB1dE5vZGUBAJkrAC4ARJkrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABT" +
           "dXBwcmVzc2VkT3JTaGVsdmVkAQBvKgAuAERvKgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "Tm9ybWFsU3RhdGUBAJorAC4ARJorAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region BaseConditionClassState Class
    #if (!OPCUA_EXCLUDE_BaseConditionClassState)
    /// <summary>
    /// Stores an instance of the BaseConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseConditionClassState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEJhc2VDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAmysBAJsr" +
           "mysAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProcessConditionClassState Class
    #if (!OPCUA_EXCLUDE_ProcessConditionClassState)
    /// <summary>
    /// Stores an instance of the ProcessConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProcessConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProcessConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProcessConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFByb2Nlc3NDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAnCsB" +
           "AJwrnCsAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region MaintenanceConditionClassState Class
    #if (!OPCUA_EXCLUDE_MaintenanceConditionClassState)
    /// <summary>
    /// Stores an instance of the MaintenanceConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MaintenanceConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MaintenanceConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.MaintenanceConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAE1haW50ZW5hbmNlQ29uZGl0aW9uQ2xhc3NUeXBlSW5zdGFuY2UB" +
           "AJ0rAQCdK50rAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemConditionClassState Class
    #if (!OPCUA_EXCLUDE_SystemConditionClassState)
    /// <summary>
    /// Stores an instance of the SystemConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFN5c3RlbUNvbmRpdGlvbkNsYXNzVHlwZUluc3RhbmNlAQCeKwEA" +
           "niueKwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEF1ZGl0Q29uZGl0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAOYKAQDm" +
           "CuYKAAD/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAnA8ALgBEnA8AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAnQ8ALgBEnQ8AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAJ4PAC4ARJ4PAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQCfDwAuAESfDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAoA8A" +
           "LgBEoA8AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAKEPAC4ARKEP" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAog8ALgBEog8AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAow8ALgBEow8AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCkDwAuAESkDwAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAAQWN0aW9uVGltZVN0YW1wAQClDwAuAESlDwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABTdGF0dXMBAKYPAC4ARKYPAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJ" +
           "ZAEApw8ALgBEpw8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJ" +
           "ZAEAqA8ALgBEqA8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAqQ8A" +
           "LgBEqQ8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQCqDwAuAESqDwAAABH/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKsPAC4ARKsPAAAAGAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEnableEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEnableEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionEnableEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEnableEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionEnableEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEnableEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEF1ZGl0Q29uZGl0aW9uRW5hYmxlRXZlbnRUeXBlSW5zdGFuY2UB" +
           "APMKAQDzCvMKAAD/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAChAALgBEChAAAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEACxAALgBECxAAAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAAwQAC4ARAwQAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAQANEAAuAEQNEAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQEADhAALgBEDhAAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAA8Q" +
           "AC4ARA8QAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAEBAALgBEEBAA" +
           "AAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAERAALgBEERAAAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQASEAAuAEQSEAAAAAX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQATEAAuAEQTEAAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAYAAABTdGF0dXMBABQQAC4ARBQQAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXJ2ZXJJZAEAFRAALgBEFRAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0" +
           "RW50cnlJZAEAFhAALgBEFhAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJ" +
           "ZAEAFxAALgBEFxAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQAYEAAuAEQY" +
           "EAAAABH/////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABkQAC4ARBkQAAAA" +
           "GAEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionCommentEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionCommentEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionCommentEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionCommentEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionCommentEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionCommentEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29tbWVudEV2ZW50VHlwZUluc3RhbmNl" +
           "AQANCwEADQsNCwAA/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAEoQAC4AREoQAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAEsQAC4AREsQAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQBMEAAuAERMEAAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEATRAALgBETRAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAE4QAC4ARE4QAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBP" +
           "EAAuAERPEAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAFAQAC4ARFAQ" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAFEQAC4ARFEQAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAUhAALgBEUhAAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAUxAALgBEUxAAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQBUEAAuAERUEAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAFUQAC4ARFUQAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAFYQAC4ARFYQAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAFcQAC4ARFcQAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAWBAALgBE" +
           "WBAAAAAR/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBZEAAuAERZEAAA" +
           "ABgBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25FdmVudElkAQCZOgAu" +
           "AESZOgAAAA//////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEASy4ALgBESy4AAAAV////" +
           "/wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionRespondEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionRespondEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionRespondEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionRespondEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionRespondEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionRespondEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uUmVzcG9uZEV2ZW50VHlwZUluc3RhbmNl" +
           "AQDfIgEA3yLfIgAA/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAOAiAC4AROAiAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAOEiAC4AROEiAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQDiIgAuAETiIgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEA4yIALgBE4yIAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAOQiAC4AROQiAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDl" +
           "IgAuAETlIgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAOYiAC4AROYi" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAOciAC4AROciAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA6CIALgBE6CIAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEA6SIALgBE6SIAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQDqIgAuAETqIgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAOsiAC4AROsiAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAOwiAC4AROwiAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAO0iAC4ARO0iAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEA7iIALgBE" +
           "7iIAAAAR/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDvIgAuAETvIgAA" +
           "ABgBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABAAAABTZWxlY3RlZFJlc3BvbnNlAQBMLgAu" +
           "AERMLgAAAAb/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<int> SelectedResponse
        {
            get
            {
                return m_selectedResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selectedResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selectedResponse = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_selectedResponse != null)
            {
                children.Add(m_selectedResponse);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SelectedResponse:
                {
                    if (createOrReplace)
                    {
                        if (SelectedResponse == null)
                        {
                            if (replacement == null)
                            {
                                SelectedResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                SelectedResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = SelectedResponse;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<int> m_selectedResponse;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionAcknowledgeEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionAcknowledgeEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionAcknowledgeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionAcknowledgeEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionAcknowledgeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionAcknowledgeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEF1ZGl0Q29uZGl0aW9uQWNrbm93bGVkZ2VFdmVudFR5cGVJbnN0" +
           "YW5jZQEA8CIBAPAi8CIAAP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDxIgAuAETxIgAAAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDyIgAuAETyIgAAABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEA8yIALgBE8yIAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUBAPQiAC4ARPQiAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQA" +
           "AABUaW1lAQD1IgAuAET1IgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGlt" +
           "ZQEA9iIALgBE9iIAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQD3IgAu" +
           "AET3IgAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQD4IgAuAET4IgAAABX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAPkiAC4ARPkiAAAABf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAPoiAC4ARPoiAAABACYB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABgAAAFN0YXR1cwEA+yIALgBE+yIAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAFNlcnZlcklkAQD8IgAuAET8IgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50" +
           "QXVkaXRFbnRyeUlkAQD9IgAuAET9IgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50" +
           "VXNlcklkAQD+IgAuAET+IgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAP8i" +
           "AC4ARP8iAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAACMALgBE" +
           "ACMAAAAYAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uRXZlbnRJZAEA" +
           "mjoALgBEmjoAAAAP/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAE0uAC4ARE0uAAAA" +
           "Ff////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionConfirmEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionConfirmEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionConfirmEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionConfirmEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionConfirmEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionConfirmEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29uZmlybUV2ZW50VHlwZUluc3RhbmNl" +
           "AQABIwEAASMBIwAA/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAAIjAC4ARAIjAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAAMjAC4ARAMjAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQAEIwAuAEQEIwAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEABSMALgBEBSMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAAYjAC4ARAYjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAH" +
           "IwAuAEQHIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAAgjAC4ARAgj" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAAkjAC4ARAkjAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEACiMALgBECiMAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEACyMALgBECyMAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQAMIwAuAEQMIwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAA0jAC4ARA0jAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAA4jAC4ARA4jAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAA8jAC4ARA8jAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAECMALgBE" +
           "ECMAAAAR/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQARIwAuAEQRIwAA" +
           "ABgBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25FdmVudElkAQCbOgAu" +
           "AESbOgAAAA//////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEATi4ALgBETi4AAAAV////" +
           "/wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionShelvingEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionShelvingEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionShelvingEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionShelvingEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionShelvingEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionShelvingEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0Q29uZGl0aW9uU2hlbHZpbmdFdmVudFR5cGVJbnN0YW5j" +
           "ZQEAVSsBAFUrVSsAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBWKwAuAERWKwAAAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBXKwAuAERXKwAAABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEAWCsALgBEWCsAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUBAFkrAC4ARFkrAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAQBaKwAuAERaKwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA" +
           "WysALgBEWysAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBcKwAuAERc" +
           "KwAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBdKwAuAERdKwAAABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAF4rAC4ARF4rAAAABf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAF8rAC4ARF8rAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABgAAAFN0YXR1cwEAYCsALgBEYCsAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNlcnZlcklkAQBhKwAuAERhKwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVk" +
           "aXRFbnRyeUlkAQBiKwAuAERiKwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNl" +
           "cklkAQBjKwAuAERjKwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAGQrAC4A" +
           "RGQrAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAZSsALgBEZSsA" +
           "AAAYAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAMAAAAU2hlbHZpbmdUaW1lAQBPLgAuAERP" +
           "LgAAAQAiAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> ShelvingTime
        {
            get
            {
                return m_shelvingTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_shelvingTime != null)
            {
                children.Add(m_shelvingTime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ShelvingTime:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingTime == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                ShelvingTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ShelvingTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_shelvingTime;
        #endregion
    }
    #endif
    #endregion

    #region RefreshStartEventState Class
    #if (!OPCUA_EXCLUDE_RefreshStartEventState)
    /// <summary>
    /// Stores an instance of the RefreshStartEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshStartEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshStartEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshStartEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFJlZnJlc2hTdGFydEV2ZW50VHlwZUluc3RhbmNlAQDjCgEA4wrj" +
           "CgAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAIEPAC4ARIEPAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAIIPAC4ARIIPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQCDDwAuAESDDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAhA8ALgBEhA8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAIUPAC4A" +
           "RIUPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCGDwAuAESGDwAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAIcPAC4ARIcPAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAIgPAC4ARIgPAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAiQ8ALgBEiQ8AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshEndEventState Class
    #if (!OPCUA_EXCLUDE_RefreshEndEventState)
    /// <summary>
    /// Stores an instance of the RefreshEndEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshEndEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshEndEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshEndEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFJlZnJlc2hFbmRFdmVudFR5cGVJbnN0YW5jZQEA5AoBAOQK5AoA" +
           "AP////8JAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCKDwAuAESKDwAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQCLDwAuAESLDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAjA8ALgBEjA8AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAI0PAC4ARI0PAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCODwAuAESO" +
           "DwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAjw8ALgBEjw8AAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCQDwAuAESQDwAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCRDwAuAESRDwAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAJIPAC4ARJIPAAAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshRequiredEventState Class
    #if (!OPCUA_EXCLUDE_RefreshRequiredEventState)
    /// <summary>
    /// Stores an instance of the RefreshRequiredEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshRequiredEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshRequiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshRequiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFJlZnJlc2hSZXF1aXJlZEV2ZW50VHlwZUluc3RhbmNlAQDlCgEA" +
           "5QrlCgAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAJMPAC4ARJMPAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAJQPAC4ARJQPAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAQCVDwAuAESVDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQEAlg8ALgBElg8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAJcP" +
           "AC4ARJcPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCYDwAuAESY" +
           "DwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJkPAC4ARJkPAAABANAi" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJoPAC4ARJoPAAAAFf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAmw8ALgBEmw8AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProgramStateMachineState Class
    #if (!OPCUA_EXCLUDE_ProgramStateMachineState)
    /// <summary>
    /// Stores an instance of the ProgramStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ProgramDiagnostics != null)
            {
                ProgramDiagnostics.Initialize(context, ProgramDiagnostics_InitializationString);
            }

            if (FinalResultData != null)
            {
                FinalResultData.Initialize(context, FinalResultData_InitializationString);
            }
        }

        #region Initialization String
        private const string ProgramDiagnostics_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAFByb2dyYW1EaWFnbm9zdGljcwEAXwkALwEATAlfCQAAAQB+A///" +
           "//8BAf////8KAAAAFWCJCgIAAAAAAA8AAABDcmVhdGVTZXNzaW9uSWQBAAAPAC4ARAAPAAAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABAAAABDcmVhdGVDbGllbnROYW1lAQABDwAuAEQBDwAAAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAWAAAASW52b2NhdGlvbkNyZWF0aW9uVGltZQEAAg8ALgBEAg8AAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdFRyYW5zaXRpb25UaW1lAQADDwAuAEQDDwAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0TWV0aG9kQ2FsbAEABA8ALgBEBA8AAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAExhc3RNZXRob2RTZXNzaW9uSWQBAAUPAC4ARAUPAAAAEf//" +
           "//8BAf////8AAAAAF2CJCgIAAAAAABgAAABMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMBAAYPAC4ARAYP" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAZAAAATGFzdE1ldGhvZE91dHB1dEFy" +
           "Z3VtZW50cwEABw8ALgBEBw8AAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABIAAABM" +
           "YXN0TWV0aG9kQ2FsbFRpbWUBAAgPAC4ARAgPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAFgAA" +
           "AExhc3RNZXRob2RSZXR1cm5TdGF0dXMBAAkPAC4ARAkPAAABACsB/////wEB/////wAAAAA=";

        private const string FinalResultData_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAEZpbmFsUmVzdWx0RGF0YQEACg8ALwA6Cg8AAP////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFByb2dyYW1TdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAFcJAQBX" +
           "CVcJAAD/////CwAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQD2DgAvAQDICvYOAAAAFf////8B" +
           "Af////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA9w4ALgBE9w4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAE51bWJlcgEA+Q4ALgBE+Q4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RU" +
           "cmFuc2l0aW9uAQD7DgAvAQDPCvsOAAAAFf////8BAf////8DAAAAFWCJCgIAAAAAAAIAAABJZAEA/A4A" +
           "LgBE/A4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAE51bWJlcgEA/g4ALgBE/g4AAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQD/DgAuAET/DgAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABEZWxldGFibGUBAFkJAC4ARFkJAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAwAAABSZWN5Y2xlQ291bnQBAFsJAC4ARFsJAAAABv////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABIAAABQcm9ncmFtRGlhZ25vc3RpY3MBAF8JAC8BAEwJXwkAAAEAfgP/////AQH/////CgAAABVg" +
           "iQoCAAAAAAAPAAAAQ3JlYXRlU2Vzc2lvbklkAQAADwAuAEQADwAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ3JlYXRlQ2xpZW50TmFtZQEAAQ8ALgBEAQ8AAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFgAAAEludm9jYXRpb25DcmVhdGlvblRpbWUBAAIPAC4ARAIPAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEgAAAExhc3RUcmFuc2l0aW9uVGltZQEAAw8ALgBEAw8AAAEAJgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAOAAAATGFzdE1ldGhvZENhbGwBAAQPAC4ARAQPAAAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABMAAABMYXN0TWV0aG9kU2Vzc2lvbklkAQAFDwAuAEQFDwAAABH/////AQH/////AAAAABdg" +
           "iQoCAAAAAAAYAAAATGFzdE1ldGhvZElucHV0QXJndW1lbnRzAQAGDwAuAEQGDwAAAQAoAQEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAXYIkKAgAAAAAAGQAAAExhc3RNZXRob2RPdXRwdXRBcmd1bWVudHMBAAcPAC4A" +
           "RAcPAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdE1ldGhvZENhbGxU" +
           "aW1lAQAIDwAuAEQIDwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABYAAABMYXN0TWV0aG9kUmV0" +
           "dXJuU3RhdHVzAQAJDwAuAEQJDwAAAQArAf////8BAf////8AAAAABGCACgEAAAAAAA8AAABGaW5hbFJl" +
           "c3VsdERhdGEBAAoPAC8AOgoPAAD/////AAAAAARhggoEAAAAAAAFAAAAU3RhcnQBAHoJAC8BAHoJegkA" +
           "AAEBAQAAAAA1AQEAagkAAAAABGGCCgQAAAAAAAcAAABTdXNwZW5kAQB7CQAvAQB7CXsJAAABAQEAAAAA" +
           "NQEBAHAJAAAAAARhggoEAAAAAAAGAAAAUmVzdW1lAQB8CQAvAQB8CXwJAAABAQEAAAAANQEBAHIJAAAA" +
           "AARhggoEAAAAAAAEAAAASGFsdAEAfQkALwEAfQl9CQAAAQEDAAAAADUBAQBsCQA1AQEAdAkANQEBAHgJ" +
           "AAAAAARhggoEAAAAAAAFAAAAUmVzZXQBAH4JAC8BAH4JfgkAAAEBAQAAAAA1AQEAaAkAAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> Deletable
        {
            get
            {
                return m_deletable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deletable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deletable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AutoDelete
        {
            get
            {
                return m_autoDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_autoDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_autoDelete = value;
            }
        }

        /// <remarks />
        public PropertyState<int> RecycleCount
        {
            get
            {
                return m_recycleCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_recycleCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_recycleCount = value;
            }
        }

        /// <remarks />
        public ProgramDiagnosticState ProgramDiagnostics
        {
            get
            {
                return m_programDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_programDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_programDiagnostics = value;
            }
        }

        /// <remarks />
        public BaseObjectState FinalResultData
        {
            get
            {
                return m_finalResultData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_finalResultData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_finalResultData = value;
            }
        }

        /// <remarks />
        public MethodState Start
        {
            get
            {
                return m_startMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startMethod = value;
            }
        }

        /// <remarks />
        public MethodState Suspend
        {
            get
            {
                return m_suspendMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suspendMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suspendMethod = value;
            }
        }

        /// <remarks />
        public MethodState Resume
        {
            get
            {
                return m_resumeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resumeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resumeMethod = value;
            }
        }

        /// <remarks />
        public MethodState Halt
        {
            get
            {
                return m_haltMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_haltMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_haltMethod = value;
            }
        }

        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_deletable != null)
            {
                children.Add(m_deletable);
            }

            if (m_recycleCount != null)
            {
                children.Add(m_recycleCount);
            }

            if (m_programDiagnostics != null)
            {
                children.Add(m_programDiagnostics);
            }

            if (m_finalResultData != null)
            {
                children.Add(m_finalResultData);
            }

            if (m_startMethod != null)
            {
                children.Add(m_startMethod);
            }

            if (m_suspendMethod != null)
            {
                children.Add(m_suspendMethod);
            }

            if (m_resumeMethod != null)
            {
                children.Add(m_resumeMethod);
            }

            if (m_haltMethod != null)
            {
                children.Add(m_haltMethod);
            }

            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Deletable:
                {
                    if (createOrReplace)
                    {
                        if (Deletable == null)
                        {
                            if (replacement == null)
                            {
                                Deletable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Deletable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Deletable;
                    break;
                }

                case Opc.Ua.BrowseNames.RecycleCount:
                {
                    if (createOrReplace)
                    {
                        if (RecycleCount == null)
                        {
                            if (replacement == null)
                            {
                                RecycleCount = new PropertyState<int>(this);
                            }
                            else
                            {
                                RecycleCount = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = RecycleCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ProgramDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (ProgramDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                ProgramDiagnostics = new ProgramDiagnosticState(this);
                            }
                            else
                            {
                                ProgramDiagnostics = (ProgramDiagnosticState)replacement;
                            }
                        }
                    }

                    instance = ProgramDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.FinalResultData:
                {
                    if (createOrReplace)
                    {
                        if (FinalResultData == null)
                        {
                            if (replacement == null)
                            {
                                FinalResultData = new BaseObjectState(this);
                            }
                            else
                            {
                                FinalResultData = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = FinalResultData;
                    break;
                }

                case Opc.Ua.BrowseNames.Start:
                {
                    if (createOrReplace)
                    {
                        if (Start == null)
                        {
                            if (replacement == null)
                            {
                                Start = new MethodState(this);
                            }
                            else
                            {
                                Start = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Start;
                    break;
                }

                case Opc.Ua.BrowseNames.Suspend:
                {
                    if (createOrReplace)
                    {
                        if (Suspend == null)
                        {
                            if (replacement == null)
                            {
                                Suspend = new MethodState(this);
                            }
                            else
                            {
                                Suspend = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Suspend;
                    break;
                }

                case Opc.Ua.BrowseNames.Resume:
                {
                    if (createOrReplace)
                    {
                        if (Resume == null)
                        {
                            if (replacement == null)
                            {
                                Resume = new MethodState(this);
                            }
                            else
                            {
                                Resume = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Resume;
                    break;
                }

                case Opc.Ua.BrowseNames.Halt:
                {
                    if (createOrReplace)
                    {
                        if (Halt == null)
                        {
                            if (replacement == null)
                            {
                                Halt = new MethodState(this);
                            }
                            else
                            {
                                Halt = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Halt;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_deletable;
        private PropertyState<bool> m_autoDelete;
        private PropertyState<int> m_recycleCount;
        private ProgramDiagnosticState m_programDiagnostics;
        private BaseObjectState m_finalResultData;
        private MethodState m_startMethod;
        private MethodState m_suspendMethod;
        private MethodState m_resumeMethod;
        private MethodState m_haltMethod;
        private MethodState m_resetMethod;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionEventState)
    /// <summary>
    /// Stores an instance of the ProgramTransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionEventState : TransitionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAFByb2dyYW1UcmFuc2l0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAEoJ" +
           "AQBKCUoJAAD/////DQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAxg4ALgBExg4AAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAxw4ALgBExw4AAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAMgOAC4ARMgOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQDJDgAuAETJDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "yg4ALgBEyg4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAMsOAC4A" +
           "RMsOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAzA4ALgBEzA4AAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAzQ4ALgBEzQ4AAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDODgAuAETODgAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAVHJhbnNpdGlvbgEA2Q4ALwEAygrZDgAAABX/////AQH/////AQAAABVgiQoCAAAAAAAC" +
           "AAAASWQBANoOAC4ARNoOAAAAGP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABGcm9tU3RhdGUBAM8O" +
           "AC8BAMMKzw4AAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDQDgAuAETQDgAAABj/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAAVG9TdGF0ZQEA1A4ALwEAwwrUDgAAABX/////AQH/////AQAA" +
           "ABVgiQoCAAAAAAACAAAASWQBANUOAC4ARNUOAAAAGP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABJ" +
           "bnRlcm1lZGlhdGVSZXN1bHQBAEsJAC4AREsJAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState IntermediateResult
        {
            get
            {
                return m_intermediateResult;
            }

            set
            {
                if (!Object.ReferenceEquals(m_intermediateResult, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_intermediateResult = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_intermediateResult != null)
            {
                children.Add(m_intermediateResult);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IntermediateResult:
                {
                    if (createOrReplace)
                    {
                        if (IntermediateResult == null)
                        {
                            if (replacement == null)
                            {
                                IntermediateResult = new PropertyState(this);
                            }
                            else
                            {
                                IntermediateResult = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = IntermediateResult;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_intermediateResult;
        #endregion
    }
    #endif
    #endregion

    #region AuditProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_AuditProgramTransitionEventState)
    /// <summary>
    /// Stores an instance of the AuditProgramTransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditProgramTransitionEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0UHJvZ3JhbVRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5j" +
           "ZQEAUC4BAFAuUC4AAP////8TAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBRLgAuAERRLgAAAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBSLgAuAERSLgAAABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEAUy4ALgBEUy4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUBAFQuAC4ARFQuAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAQBVLgAuAERVLgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA" +
           "Vi4ALgBEVi4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBXLgAuAERX" +
           "LgAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBYLgAuAERYLgAAABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAFkuAC4ARFkuAAAABf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAFouAC4ARFouAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABgAAAFN0YXR1cwEAWy4ALgBEWy4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNlcnZlcklkAQBcLgAuAERcLgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVk" +
           "aXRFbnRyeUlkAQBdLgAuAERdLgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNl" +
           "cklkAQBeLgAuAEReLgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAF8uAC4A" +
           "RF8uAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAYC4ALgBEYC4A" +
           "AAAYAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEAYS4ALgBEYS4A" +
           "AAAY/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBAGIuAC4ARGIuAAAAGP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABAAAABUcmFuc2l0aW9uTnVtYmVyAQBjLgAuAERjLgAAAAf/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionAuditEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionAuditEventState)
    /// <summary>
    /// Stores an instance of the ProgramTransitionAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionAuditEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramTransitionAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAFByb2dyYW1UcmFuc2l0aW9uQXVkaXRFdmVudFR5cGVJbnN0YW5j" +
           "ZQEA3g4BAN4O3g4AAP////8TAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDfDgAuAETfDgAAAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDgDgAuAETgDgAAABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQEA4Q4ALgBE4Q4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUBAOIOAC4AROIOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAQDjDgAuAETjDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA" +
           "5A4ALgBE5A4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDlDgAuAETl" +
           "DgAAAQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDmDgAuAETmDgAAABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAOcOAC4AROcOAAAABf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAOgOAC4AROgOAAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABgAAAFN0YXR1cwEA6Q4ALgBE6Q4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNlcnZlcklkAQDqDgAuAETqDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVk" +
           "aXRFbnRyeUlkAQDrDgAuAETrDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNl" +
           "cklkAQDsDgAuAETsDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAO0OAC4A" +
           "RO0OAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA7g4ALgBE7g4A" +
           "AAAYAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEA7w4ALgBE7w4A" +
           "AAAY/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBAPAOAC4ARPAOAAAAGP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABUcmFuc2l0aW9uAQDxDgAvAQDPCvEOAAAAFf////8BAf////8B" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEA8g4ALgBE8g4AAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public FiniteTransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private FiniteTransitionVariableState m_transition;
        #endregion
    }
    #endif
    #endregion

    #region ProgramDiagnosticState Class
    #if (!OPCUA_EXCLUDE_ProgramDiagnosticState)
    /// <summary>
    /// Stores an instance of the ProgramDiagnosticType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramDiagnosticState : BaseDataVariableState<ProgramDiagnosticDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramDiagnosticState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ProgramDiagnosticType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ProgramDiagnosticDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHQAAAFByb2dyYW1EaWFnbm9zdGljVHlwZUluc3RhbmNlAQBMCQEATAlM" +
           "CQAAAQB+A/////8BAf////8KAAAAFWCJCgIAAAAAAA8AAABDcmVhdGVTZXNzaW9uSWQBAE0JAC4ARE0J" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDcmVhdGVDbGllbnROYW1lAQBOCQAuAEROCQAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAWAAAASW52b2NhdGlvbkNyZWF0aW9uVGltZQEATwkALgBE" +
           "TwkAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdFRyYW5zaXRpb25UaW1lAQBQCQAu" +
           "AERQCQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0TWV0aG9kQ2FsbAEAUQkALgBE" +
           "UQkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAExhc3RNZXRob2RTZXNzaW9uSWQBAFIJAC4A" +
           "RFIJAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAABgAAABMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMB" +
           "AFMJAC4ARFMJAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAZAAAATGFzdE1ldGhv" +
           "ZE91dHB1dEFyZ3VtZW50cwEAVAkALgBEVAkAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIA" +
           "AAAAABIAAABMYXN0TWV0aG9kQ2FsbFRpbWUBAFUJAC4ARFUJAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFgAAAExhc3RNZXRob2RSZXR1cm5TdGF0dXMBAFYJAC4ARFYJAAABACsB/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CreateSessionId
        {
            get
            {
                return m_createSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> CreateClientName
        {
            get
            {
                return m_createClientName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createClientName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createClientName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> InvocationCreationTime
        {
            get
            {
                return m_invocationCreationTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invocationCreationTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invocationCreationTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastTransitionTime
        {
            get
            {
                return m_lastTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<string> LastMethodCall
        {
            get
            {
                return m_lastMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> LastMethodSessionId
        {
            get
            {
                return m_lastMethodSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<Argument[]> LastMethodInputArguments
        {
            get
            {
                return m_lastMethodInputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodInputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodInputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<Argument[]> LastMethodOutputArguments
        {
            get
            {
                return m_lastMethodOutputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodOutputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodOutputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastMethodCallTime
        {
            get
            {
                return m_lastMethodCallTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCallTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCallTime = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusResult> LastMethodReturnStatus
        {
            get
            {
                return m_lastMethodReturnStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodReturnStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodReturnStatus = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createSessionId != null)
            {
                children.Add(m_createSessionId);
            }

            if (m_createClientName != null)
            {
                children.Add(m_createClientName);
            }

            if (m_invocationCreationTime != null)
            {
                children.Add(m_invocationCreationTime);
            }

            if (m_lastTransitionTime != null)
            {
                children.Add(m_lastTransitionTime);
            }

            if (m_lastMethodCall != null)
            {
                children.Add(m_lastMethodCall);
            }

            if (m_lastMethodSessionId != null)
            {
                children.Add(m_lastMethodSessionId);
            }

            if (m_lastMethodInputArguments != null)
            {
                children.Add(m_lastMethodInputArguments);
            }

            if (m_lastMethodOutputArguments != null)
            {
                children.Add(m_lastMethodOutputArguments);
            }

            if (m_lastMethodCallTime != null)
            {
                children.Add(m_lastMethodCallTime);
            }

            if (m_lastMethodReturnStatus != null)
            {
                children.Add(m_lastMethodReturnStatus);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateSessionId:
                {
                    if (createOrReplace)
                    {
                        if (CreateSessionId == null)
                        {
                            if (replacement == null)
                            {
                                CreateSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CreateSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CreateSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateClientName:
                {
                    if (createOrReplace)
                    {
                        if (CreateClientName == null)
                        {
                            if (replacement == null)
                            {
                                CreateClientName = new PropertyState<string>(this);
                            }
                            else
                            {
                                CreateClientName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CreateClientName;
                    break;
                }

                case Opc.Ua.BrowseNames.InvocationCreationTime:
                {
                    if (createOrReplace)
                    {
                        if (InvocationCreationTime == null)
                        {
                            if (replacement == null)
                            {
                                InvocationCreationTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                InvocationCreationTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = InvocationCreationTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (LastTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                LastTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCall = new PropertyState<string>(this);
                            }
                            else
                            {
                                LastMethodCall = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodSessionId:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodSessionId == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                LastMethodSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = LastMethodSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodInputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodInputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodInputArguments = new PropertyState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodInputArguments = (PropertyState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodInputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodOutputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodOutputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodOutputArguments = new PropertyState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodOutputArguments = (PropertyState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodOutputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCallTime:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCallTime == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCallTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastMethodCallTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCallTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodReturnStatus:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodReturnStatus == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodReturnStatus = new PropertyState<StatusResult>(this);
                            }
                            else
                            {
                                LastMethodReturnStatus = (PropertyState<StatusResult>)replacement;
                            }
                        }
                    }

                    instance = LastMethodReturnStatus;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_createSessionId;
        private PropertyState<string> m_createClientName;
        private PropertyState<DateTime> m_invocationCreationTime;
        private PropertyState<DateTime> m_lastTransitionTime;
        private PropertyState<string> m_lastMethodCall;
        private PropertyState<NodeId> m_lastMethodSessionId;
        private PropertyState<Argument[]> m_lastMethodInputArguments;
        private PropertyState<Argument[]> m_lastMethodOutputArguments;
        private PropertyState<DateTime> m_lastMethodCallTime;
        private PropertyState<StatusResult> m_lastMethodReturnStatus;
        #endregion
    }

    #region ProgramDiagnosticValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ProgramDiagnosticValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ProgramDiagnosticValue(ProgramDiagnosticState variable, ProgramDiagnosticDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ProgramDiagnosticDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ProgramDiagnosticState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ProgramDiagnosticDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ProgramDiagnosticState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.CreateSessionId;
                instance.OnReadValue = OnRead_CreateSessionId;
                instance.OnSimpleWriteValue = OnWrite_CreateSessionId;
                updateList.Add(instance);
                instance = m_variable.CreateClientName;
                instance.OnReadValue = OnRead_CreateClientName;
                instance.OnSimpleWriteValue = OnWrite_CreateClientName;
                updateList.Add(instance);
                instance = m_variable.InvocationCreationTime;
                instance.OnReadValue = OnRead_InvocationCreationTime;
                instance.OnSimpleWriteValue = OnWrite_InvocationCreationTime;
                updateList.Add(instance);
                instance = m_variable.LastTransitionTime;
                instance.OnReadValue = OnRead_LastTransitionTime;
                instance.OnSimpleWriteValue = OnWrite_LastTransitionTime;
                updateList.Add(instance);
                instance = m_variable.LastMethodCall;
                instance.OnReadValue = OnRead_LastMethodCall;
                instance.OnSimpleWriteValue = OnWrite_LastMethodCall;
                updateList.Add(instance);
                instance = m_variable.LastMethodSessionId;
                instance.OnReadValue = OnRead_LastMethodSessionId;
                instance.OnSimpleWriteValue = OnWrite_LastMethodSessionId;
                updateList.Add(instance);
                instance = m_variable.LastMethodInputArguments;
                instance.OnReadValue = OnRead_LastMethodInputArguments;
                instance.OnSimpleWriteValue = OnWrite_LastMethodInputArguments;
                updateList.Add(instance);
                instance = m_variable.LastMethodOutputArguments;
                instance.OnReadValue = OnRead_LastMethodOutputArguments;
                instance.OnSimpleWriteValue = OnWrite_LastMethodOutputArguments;
                updateList.Add(instance);
                instance = m_variable.LastMethodCallTime;
                instance.OnReadValue = OnRead_LastMethodCallTime;
                instance.OnSimpleWriteValue = OnWrite_LastMethodCallTime;
                updateList.Add(instance);
                instance = m_variable.LastMethodReturnStatus;
                instance.OnReadValue = OnRead_LastMethodReturnStatus;
                instance.OnSimpleWriteValue = OnWrite_LastMethodReturnStatus;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ProgramDiagnosticDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region CreateSessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateSessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateSessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateSessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateClientName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateClientName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateClientName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateClientName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region InvocationCreationTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.InvocationCreationTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_InvocationCreationTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.InvocationCreationTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastTransitionTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastTransitionTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastTransitionTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastTransitionTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCall Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodCall;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodCall(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodCall = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodSessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodSessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodSessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodSessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodInputArguments Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodInputArguments;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodInputArguments(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodInputArguments = (ArgumentCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodOutputArguments Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodOutputArguments;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodOutputArguments(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodOutputArguments = (ArgumentCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCallTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodCallTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodCallTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodCallTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodReturnStatus Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodReturnStatus;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodReturnStatus(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodReturnStatus = (StatusResult)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ProgramDiagnosticDataType m_value;
        private ProgramDiagnosticState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region HistoricalDataConfigurationState Class
    #if (!OPCUA_EXCLUDE_HistoricalDataConfigurationState)
    /// <summary>
    /// Stores an instance of the HistoricalDataConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoricalDataConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HistoricalDataConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoricalDataConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AggregateFunctions != null)
            {
                AggregateFunctions.Initialize(context, AggregateFunctions_InitializationString);
            }

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (MaxTimeInterval != null)
            {
                MaxTimeInterval.Initialize(context, MaxTimeInterval_InitializationString);
            }

            if (MinTimeInterval != null)
            {
                MinTimeInterval.Initialize(context, MinTimeInterval_InitializationString);
            }

            if (ExceptionDeviation != null)
            {
                ExceptionDeviation.Initialize(context, ExceptionDeviation_InitializationString);
            }

            if (ExceptionDeviationFormat != null)
            {
                ExceptionDeviationFormat.Initialize(context, ExceptionDeviationFormat_InitializationString);
            }

            if (StartOfArchive != null)
            {
                StartOfArchive.Initialize(context, StartOfArchive_InitializationString);
            }

            if (StartOfOnlineArchive != null)
            {
                StartOfOnlineArchive.Initialize(context, StartOfOnlineArchive_InitializationString);
            }
        }

        #region Initialization String
        private const string AggregateFunctions_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAZC4ALwA9ZC4AAP////8AAAAA";

        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BABQJAC4ARBQJAAAADP////8BAf////8AAAAA";

        private const string MaxTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFRpbWVJbnRlcnZhbAEAFQkALgBEFQkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string MinTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1pblRpbWVJbnRlcnZhbAEAFgkALgBEFgkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string ExceptionDeviation_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAEV4Y2VwdGlvbkRldmlhdGlvbgEAFwkALgBEFwkAAAAL/////wEB" +
           "/////wAAAAA=";

        private const string ExceptionDeviationFormat_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAEV4Y2VwdGlvbkRldmlhdGlvbkZvcm1hdAEAGAkALgBEGAkAAAEA" +
           "egP/////AQH/////AAAAAA==";

        private const string StartOfArchive_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQDrLAAuAETrLAAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string StartOfOnlineArchive_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAFN0YXJ0T2ZPbmxpbmVBcmNoaXZlAQDsLAAuAETsLAAAAQAmAf//" +
           "//8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEhpc3RvcmljYWxEYXRhQ29uZmlndXJhdGlvblR5cGVJbnN0YW5j" +
           "ZQEADgkBAA4JDgkAAP////8KAAAABGCACgEAAAAAABYAAABBZ2dyZWdhdGVDb25maWd1cmF0aW9uAQDz" +
           "CwAvAQCzK/MLAAD/////BAAAABVgiQoCAAAAAAATAAAAVHJlYXRVbmNlcnRhaW5Bc0JhZAEAoCsALgBE" +
           "oCsAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFBlcmNlbnREYXRhQmFkAQChKwAuAEShKwAA" +
           "AAP/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAUGVyY2VudERhdGFHb29kAQCiKwAuAESiKwAAAAP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAWAAAAVXNlU2xvcGVkRXh0cmFwb2xhdGlvbgEAoysALgBEoysA" +
           "AAAB/////wEB/////wAAAAAEYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAZC4ALwA9ZC4A" +
           "AP////8AAAAAFWCJCgIAAAAAAAcAAABTdGVwcGVkAQATCQAuAEQTCQAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAARGVmaW5pdGlvbgEAFAkALgBEFAkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAE1heFRpbWVJbnRlcnZhbAEAFQkALgBEFQkAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAP" +
           "AAAATWluVGltZUludGVydmFsAQAWCQAuAEQWCQAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAABIA" +
           "AABFeGNlcHRpb25EZXZpYXRpb24BABcJAC4ARBcJAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAABgA" +
           "AABFeGNlcHRpb25EZXZpYXRpb25Gb3JtYXQBABgJAC4ARBgJAAABAHoD/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQDrLAAuAETrLAAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABQAAABTdGFydE9mT25saW5lQXJjaGl2ZQEA7CwALgBE7CwAAAEAJgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AggregateConfigurationState AggregateConfiguration
        {
            get
            {
                return m_aggregateConfiguration;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateConfiguration, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateConfiguration = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Stepped
        {
            get
            {
                return m_stepped;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stepped, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stepped = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeInterval
        {
            get
            {
                return m_maxTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinTimeInterval
        {
            get
            {
                return m_minTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExceptionDeviation
        {
            get
            {
                return m_exceptionDeviation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviation = value;
            }
        }

        /// <remarks />
        public PropertyState<ExceptionDeviationFormat> ExceptionDeviationFormat
        {
            get
            {
                return m_exceptionDeviationFormat;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviationFormat, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviationFormat = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfArchive
        {
            get
            {
                return m_startOfArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfArchive = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfOnlineArchive
        {
            get
            {
                return m_startOfOnlineArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfOnlineArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfOnlineArchive = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_aggregateConfiguration != null)
            {
                children.Add(m_aggregateConfiguration);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            if (m_stepped != null)
            {
                children.Add(m_stepped);
            }

            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_maxTimeInterval != null)
            {
                children.Add(m_maxTimeInterval);
            }

            if (m_minTimeInterval != null)
            {
                children.Add(m_minTimeInterval);
            }

            if (m_exceptionDeviation != null)
            {
                children.Add(m_exceptionDeviation);
            }

            if (m_exceptionDeviationFormat != null)
            {
                children.Add(m_exceptionDeviationFormat);
            }

            if (m_startOfArchive != null)
            {
                children.Add(m_startOfArchive);
            }

            if (m_startOfOnlineArchive != null)
            {
                children.Add(m_startOfOnlineArchive);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AggregateConfiguration:
                {
                    if (createOrReplace)
                    {
                        if (AggregateConfiguration == null)
                        {
                            if (replacement == null)
                            {
                                AggregateConfiguration = new AggregateConfigurationState(this);
                            }
                            else
                            {
                                AggregateConfiguration = (AggregateConfigurationState)replacement;
                            }
                        }
                    }

                    instance = AggregateConfiguration;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }

                case Opc.Ua.BrowseNames.Stepped:
                {
                    if (createOrReplace)
                    {
                        if (Stepped == null)
                        {
                            if (replacement == null)
                            {
                                Stepped = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Stepped = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Stepped;
                    break;
                }

                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MinTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MinTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MinTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviation:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviation == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviation = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExceptionDeviation = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviation;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviationFormat:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviationFormat == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviationFormat = new PropertyState<ExceptionDeviationFormat>(this);
                            }
                            else
                            {
                                ExceptionDeviationFormat = (PropertyState<ExceptionDeviationFormat>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviationFormat;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfArchive;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfOnlineArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfOnlineArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfOnlineArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfOnlineArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfOnlineArchive;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AggregateConfigurationState m_aggregateConfiguration;
        private FolderState m_aggregateFunctions;
        private PropertyState<bool> m_stepped;
        private PropertyState<string> m_definition;
        private PropertyState<double> m_maxTimeInterval;
        private PropertyState<double> m_minTimeInterval;
        private PropertyState<double> m_exceptionDeviation;
        private PropertyState<ExceptionDeviationFormat> m_exceptionDeviationFormat;
        private PropertyState<DateTime> m_startOfArchive;
        private PropertyState<DateTime> m_startOfOnlineArchive;
        #endregion
    }
    #endif
    #endregion

    #region HistoryServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_HistoryServerCapabilitiesState)
    /// <summary>
    /// Stores an instance of the HistoryServerCapabilitiesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoryServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HistoryServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoryServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEhpc3RvcnlTZXJ2ZXJDYXBhYmlsaXRpZXNUeXBlSW5zdGFuY2UB" +
           "ABoJAQAaCRoJAAD/////DwAAABVgiQoCAAAAAAAbAAAAQWNjZXNzSGlzdG9yeURhdGFDYXBhYmlsaXR5" +
           "AQAbCQAuAEQbCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAdAAAAQWNjZXNzSGlzdG9yeUV2ZW50" +
           "c0NhcGFiaWxpdHkBABwJAC4ARBwJAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABNYXhSZXR1" +
           "cm5EYXRhVmFsdWVzAQAELAAuAEQELAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAUAAAATWF4UmV0" +
           "dXJuRXZlbnRWYWx1ZXMBAAUsAC4ARAUsAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABJbnNl" +
           "cnREYXRhQ2FwYWJpbGl0eQEAHgkALgBEHgkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJl" +
           "cGxhY2VEYXRhQ2FwYWJpbGl0eQEAHwkALgBEHwkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAFAAA" +
           "AFVwZGF0ZURhdGFDYXBhYmlsaXR5AQAgCQAuAEQgCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAT" +
           "AAAARGVsZXRlUmF3Q2FwYWJpbGl0eQEAIQkALgBEIQkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FgAAAERlbGV0ZUF0VGltZUNhcGFiaWxpdHkBACIJAC4ARCIJAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABUAAABJbnNlcnRFdmVudENhcGFiaWxpdHkBAA4sAC4ARA4sAAAAAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABYAAABSZXBsYWNlRXZlbnRDYXBhYmlsaXR5AQAPLAAuAEQPLAAAAAH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAVAAAAVXBkYXRlRXZlbnRDYXBhYmlsaXR5AQAQLAAuAEQQLAAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAARGVsZXRlRXZlbnRDYXBhYmlsaXR5AQDtLAAuAETtLAAAAAH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAaAAAASW5zZXJ0QW5ub3RhdGlvbkNhcGFiaWxpdHkBAAYsAC4ARAYsAAAA" +
           "Af////8BAf////8AAAAABGCACgEAAAAAABIAAABBZ2dyZWdhdGVGdW5jdGlvbnMBAKQrAC8APaQrAAD/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> AccessHistoryDataCapability
        {
            get
            {
                return m_accessHistoryDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AccessHistoryEventsCapability
        {
            get
            {
                return m_accessHistoryEventsCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryEventsCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryEventsCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnDataValues
        {
            get
            {
                return m_maxReturnDataValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnDataValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnDataValues = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnEventValues
        {
            get
            {
                return m_maxReturnEventValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnEventValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnEventValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertDataCapability
        {
            get
            {
                return m_insertDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceDataCapability
        {
            get
            {
                return m_replaceDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateDataCapability
        {
            get
            {
                return m_updateDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteRawCapability
        {
            get
            {
                return m_deleteRawCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteRawCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteRawCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteAtTimeCapability
        {
            get
            {
                return m_deleteAtTimeCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteAtTimeCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteAtTimeCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertEventCapability
        {
            get
            {
                return m_insertEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceEventCapability
        {
            get
            {
                return m_replaceEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateEventCapability
        {
            get
            {
                return m_updateEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteEventCapability
        {
            get
            {
                return m_deleteEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertAnnotationCapability
        {
            get
            {
                return m_insertAnnotationCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertAnnotationCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertAnnotationCapability = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_accessHistoryDataCapability != null)
            {
                children.Add(m_accessHistoryDataCapability);
            }

            if (m_accessHistoryEventsCapability != null)
            {
                children.Add(m_accessHistoryEventsCapability);
            }

            if (m_maxReturnDataValues != null)
            {
                children.Add(m_maxReturnDataValues);
            }

            if (m_maxReturnEventValues != null)
            {
                children.Add(m_maxReturnEventValues);
            }

            if (m_insertDataCapability != null)
            {
                children.Add(m_insertDataCapability);
            }

            if (m_replaceDataCapability != null)
            {
                children.Add(m_replaceDataCapability);
            }

            if (m_updateDataCapability != null)
            {
                children.Add(m_updateDataCapability);
            }

            if (m_deleteRawCapability != null)
            {
                children.Add(m_deleteRawCapability);
            }

            if (m_deleteAtTimeCapability != null)
            {
                children.Add(m_deleteAtTimeCapability);
            }

            if (m_insertEventCapability != null)
            {
                children.Add(m_insertEventCapability);
            }

            if (m_replaceEventCapability != null)
            {
                children.Add(m_replaceEventCapability);
            }

            if (m_updateEventCapability != null)
            {
                children.Add(m_updateEventCapability);
            }

            if (m_deleteEventCapability != null)
            {
                children.Add(m_deleteEventCapability);
            }

            if (m_insertAnnotationCapability != null)
            {
                children.Add(m_insertAnnotationCapability);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AccessHistoryDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AccessHistoryEventsCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryEventsCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryEventsCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryEventsCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryEventsCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnDataValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnDataValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnDataValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnDataValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnDataValues;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnEventValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnEventValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnEventValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnEventValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnEventValues;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteRawCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteRawCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteRawCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteRawCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteRawCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteAtTimeCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteAtTimeCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteAtTimeCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteAtTimeCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteAtTimeCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertAnnotationCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertAnnotationCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertAnnotationCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertAnnotationCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertAnnotationCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_accessHistoryDataCapability;
        private PropertyState<bool> m_accessHistoryEventsCapability;
        private PropertyState<uint> m_maxReturnDataValues;
        private PropertyState<uint> m_maxReturnEventValues;
        private PropertyState<bool> m_insertDataCapability;
        private PropertyState<bool> m_replaceDataCapability;
        private PropertyState<bool> m_updateDataCapability;
        private PropertyState<bool> m_deleteRawCapability;
        private PropertyState<bool> m_deleteAtTimeCapability;
        private PropertyState<bool> m_insertEventCapability;
        private PropertyState<bool> m_replaceEventCapability;
        private PropertyState<bool> m_updateEventCapability;
        private PropertyState<bool> m_deleteEventCapability;
        private PropertyState<bool> m_insertAnnotationCapability;
        private FolderState m_aggregateFunctions;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryEventUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryEventUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50VXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBALcLAQC3C7cLAAD/////FAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA2g0ALgBE2g0AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA2w0ALgBE2w0AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBANwNAC4ARNwNAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQDdDQAuAETdDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEA3g0ALgBE3g0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "AN8NAC4ARN8NAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA4A0ALgBE" +
           "4A0AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA4Q0ALgBE4Q0AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDiDQAuAETiDQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQDjDQAuAETjDQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBAOQNAC4AROQNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEA5Q0ALgBE5Q0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEA5g0ALgBE5g0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEA5w0ALgBE5w0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFU" +
           "eXBlSWQBAOgNAC4AROgNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEA" +
           "0QsALgBE0QsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFBlcmZvcm1JbnNlcnRSZXBsYWNl" +
           "AQDUCwAuAETUCwAAAQAdLP////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABGaWx0ZXIBALsLAC4ARLsL" +
           "AAABANUC/////wEB/////wAAAAAXYIkKAgAAAAAACQAAAE5ld1ZhbHVlcwEA1QsALgBE1QsAAAEAmAMB" +
           "AAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANYLAC4ARNYLAAABAJgD" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<EventFilter> Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_filter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_filter = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_filter != null)
            {
                children.Add(m_filter);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.Filter:
                {
                    if (createOrReplace)
                    {
                        if (Filter == null)
                        {
                            if (replacement == null)
                            {
                                Filter = new PropertyState<EventFilter>(this);
                            }
                            else
                            {
                                Filter = (PropertyState<EventFilter>)replacement;
                            }
                        }
                    }

                    instance = Filter;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<EventFilter> m_filter;
        private PropertyState<HistoryEventFieldList[]> m_newValues;
        private PropertyState<HistoryEventFieldList[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryValueUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryValueUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryValueUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryValueUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryValueUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryValueUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeVZhbHVlVXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAL4LAQC+C74LAAD/////EwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA6Q0ALgBE6Q0AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA6g0ALgBE6g0AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAOsNAC4AROsNAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQDsDQAuAETsDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEA7Q0ALgBE7Q0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "AO4NAC4ARO4NAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA7w0ALgBE" +
           "7w0AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA8A0ALgBE8A0AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDxDQAuAETxDQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQDyDQAuAETyDQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBAPMNAC4ARPMNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEA9A0ALgBE9A0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEA9Q0ALgBE9Q0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEA9g0ALgBE9g0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFU" +
           "eXBlSWQBAPcNAC4ARPcNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEA" +
           "0gsALgBE0gsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFBlcmZvcm1JbnNlcnRSZXBsYWNl" +
           "AQDXCwAuAETXCwAAAQAdLP////8BAf////8AAAAAF2CJCgIAAAAAAAkAAABOZXdWYWx1ZXMBANgLAC4A" +
           "RNgLAAAAFwEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAACQAAAE9sZFZhbHVlcwEA2QsALgBE" +
           "2QsAAAAXAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<DataValue[]> m_newValues;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryDeleteEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeURlbGV0ZUV2ZW50VHlwZUluc3RhbmNlAQDE" +
           "CwEAxAvECwAA/////xAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAPgNAC4ARPgNAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAPkNAC4ARPkNAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQD6DQAuAET6DQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEA+w0ALgBE+w0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "APwNAC4ARPwNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQD9DQAu" +
           "AET9DQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAP4NAC4ARP4NAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAP8NAC4ARP8NAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAAA4ALgBEAA4AAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAAQ4ALgBEAQ4AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQACDgAuAEQCDgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAAMOAC4ARAMOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAAQOAC4ARAQOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AAUOAC4ARAUOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRhVHlwZUlk" +
           "AQAGDgAuAEQGDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5vZGUBANMLAC4A" +
           "RNMLAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryRawModifyDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryRawModifyDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryRawModifyDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryRawModifyDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryRawModifyDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryRawModifyDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAEF1ZGl0SGlzdG9yeVJhd01vZGlmeURlbGV0ZUV2ZW50VHlwZUlu" +
           "c3RhbmNlAQDGCwEAxgvGCwAA/////xQAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAAcOAC4ARAcOAAAA" +
           "D/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAAgOAC4ARAgOAAAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQAJDgAuAEQJDgAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQEACg4ALgBECg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BAAAAFRpbWUBAAsOAC4ARAsOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVU" +
           "aW1lAQAMDgAuAEQMDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAA0O" +
           "AC4ARA0OAAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAA4OAC4ARA4OAAAA" +
           "Ff////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEADw4ALgBEDw4AAAAF/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAEA4ALgBEEA4AAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAQARDgAuAEQRDgAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2VydmVySWQBABIOAC4ARBIOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGll" +
           "bnRBdWRpdEVudHJ5SWQBABMOAC4ARBMOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGll" +
           "bnRVc2VySWQBABQOAC4ARBQOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJE" +
           "YXRhVHlwZUlkAQAVDgAuAEQVDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5v" +
           "ZGUBABYOAC4ARBYOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABJc0RlbGV0ZU1vZGlmaWVk" +
           "AQDHCwAuAETHCwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQDICwAuAETI" +
           "CwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABFbmRUaW1lAQDJCwAuAETJCwAAAQAmAf//" +
           "//8BAf////8AAAAAF2CJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANoLAC4ARNoLAAAAFwEAAAABAAAAAAAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> IsDeleteModified
        {
            get
            {
                return m_isDeleteModified;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isDeleteModified, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isDeleteModified = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EndTime
        {
            get
            {
                return m_endTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_isDeleteModified != null)
            {
                children.Add(m_isDeleteModified);
            }

            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_endTime != null)
            {
                children.Add(m_endTime);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IsDeleteModified:
                {
                    if (createOrReplace)
                    {
                        if (IsDeleteModified == null)
                        {
                            if (replacement == null)
                            {
                                IsDeleteModified = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsDeleteModified = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsDeleteModified;
                    break;
                }

                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EndTime:
                {
                    if (createOrReplace)
                    {
                        if (EndTime == null)
                        {
                            if (replacement == null)
                            {
                                EndTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EndTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EndTime;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_isDeleteModified;
        private PropertyState<DateTime> m_startTime;
        private PropertyState<DateTime> m_endTime;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryAtTimeDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryAtTimeDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryAtTimeDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryAtTimeDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryAtTimeDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryAtTimeDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAEF1ZGl0SGlzdG9yeUF0VGltZURlbGV0ZUV2ZW50VHlwZUluc3Rh" +
           "bmNlAQDLCwEAywvLCwAA/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBABcOAC4ARBcOAAAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBABgOAC4ARBgOAAAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQAZDgAuAEQZDgAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQEAGg4ALgBEGg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUBABsOAC4ARBsOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AQAcDgAuAEQcDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAB0OAC4A" +
           "RB0OAAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAB4OAC4ARB4OAAAAFf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAHw4ALgBEHw4AAAAF/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAIA4ALgBEIA4AAAEAJgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAGAAAAU3RhdHVzAQAhDgAuAEQhDgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAU2VydmVySWQBACIOAC4ARCIOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRB" +
           "dWRpdEVudHJ5SWQBACMOAC4ARCMOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBACQOAC4ARCQOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRh" +
           "VHlwZUlkAQAlDgAuAEQlDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5vZGUB" +
           "ACYOAC4ARCYOAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAAgAAABSZXFUaW1lcwEAzAsALgBEzAsA" +
           "AAEAJgEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAAAkAAABPbGRWYWx1ZXMBAM0LAC4ARM0L" +
           "AAAAFwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime[]> ReqTimes
        {
            get
            {
                return m_reqTimes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reqTimes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reqTimes = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_reqTimes != null)
            {
                children.Add(m_reqTimes);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReqTimes:
                {
                    if (createOrReplace)
                    {
                        if (ReqTimes == null)
                        {
                            if (replacement == null)
                            {
                                ReqTimes = new PropertyState<DateTime[]>(this);
                            }
                            else
                            {
                                ReqTimes = (PropertyState<DateTime[]>)replacement;
                            }
                        }
                    }

                    instance = ReqTimes;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime[]> m_reqTimes;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryEventDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryEventDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50RGVsZXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAM4LAQDOC84LAAD/////EgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAJw4ALgBEJw4AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAKA4ALgBEKA4AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBACkOAC4ARCkOAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQAqDgAuAEQqDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEAKw4ALgBEKw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "ACwOAC4ARCwOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEALQ4ALgBE" +
           "LQ4AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEALg4ALgBELg4AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAvDgAuAEQvDgAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQAwDgAuAEQwDgAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBADEOAC4ARDEOAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAMg4ALgBEMg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAMw4ALgBEMw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEANA4ALgBENA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFU" +
           "eXBlSWQBADUOAC4ARDUOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEA" +
           "Ng4ALgBENg4AAAAR/////wEB/////wAAAAAXYIkKAgAAAAAACAAAAEV2ZW50SWRzAQDPCwAuAETPCwAA" +
           "AA8BAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANALAC4ARNALAAAB" +
           "AJgD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[][]> EventIds
        {
            get
            {
                return m_eventIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventIds = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventIds != null)
            {
                children.Add(m_eventIds);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventIds:
                {
                    if (createOrReplace)
                    {
                        if (EventIds == null)
                        {
                            if (replacement == null)
                            {
                                EventIds = new PropertyState<byte[][]>(this);
                            }
                            else
                            {
                                EventIds = (PropertyState<byte[][]>)replacement;
                            }
                        }
                    }

                    instance = EventIds;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[][]> m_eventIds;
        private PropertyState<HistoryEventFieldList> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region OpenWithMasksMethodState Class
    #if (!OPCUA_EXCLUDE_OpenWithMasksMethodState)
    /// <summary>
    /// Stores an instance of the OpenWithMasksMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenWithMasksMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OpenWithMasksMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenWithMasksMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAE9wZW5XaXRoTWFza3NNZXRob2RUeXBlAQDhMAAvAQDhMOEwAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4jAALgBE4jAAAJYBAAAAAQAqAQEU" +
           "AAAABQAAAE1hc2tzAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQDjMAAuAETjMAAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public OpenWithMasksMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint masks = (uint)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    masks,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult OpenWithMasksMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint masks,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseAndUpdateMethodState Class
    #if (!OPCUA_EXCLUDE_CloseAndUpdateMethodState)
    /// <summary>
    /// Stores an instance of the CloseAndUpdateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseAndUpdateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CloseAndUpdateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseAndUpdateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAENsb3NlQW5kVXBkYXRlTWV0aG9kVHlwZQEA5DAALwEA5DDkMAAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKAxAC4ARKAxAACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDlMAAuAETlMAAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlD" +
           "aGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CloseAndUpdateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CloseAndUpdateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region AddCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_AddCertificateMethodState)
    /// <summary>
    /// Stores an instance of the AddCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEFkZENlcnRpZmljYXRlTWV0aG9kVHlwZQEA5jAALwEA5jDmMAAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOcwAC4AROcwAACWAgAAAAEAKgEB" +
           "GgAAAAsAAABDZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmlj" +
           "YXRlAAH/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public AddCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[] certificate = (byte[])_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificate,
                    isTrustedCertificate);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult AddCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte[] certificate,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region RemoveCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveCertificateMethodState)
    /// <summary>
    /// Stores an instance of the RemoveCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RemoveCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFJlbW92ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEA6DAALwEA6DDo" +
           "MAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOkwAC4AROkwAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABUaHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlm" +
           "aWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public RemoveCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string thumbprint = (string)_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    thumbprint,
                    isTrustedCertificate);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult RemoveCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string thumbprint,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region TrustListState Class
    #if (!OPCUA_EXCLUDE_TrustListState)
    /// <summary>
    /// Stores an instance of the TrustListType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListState : FileState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TrustListState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (CloseAndUpdate != null)
            {
                CloseAndUpdate.Initialize(context, CloseAndUpdate_InitializationString);
            }

            if (AddCertificate != null)
            {
                AddCertificate.Initialize(context, AddCertificate_InitializationString);
            }

            if (RemoveCertificate != null)
            {
                RemoveCertificate.Initialize(context, RemoveCertificate_InitializationString);
            }
        }

        #region Initialization String
        private const string CloseAndUpdate_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQACMQAvAQACMQIxAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoTEALgBEoTEAAJYBAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBAAMxAC4ARAMxAACWAQAAAAEAKgEBIwAAABQAAABBcHBseUNoYW5nZXNSZXF1" +
           "aXJlZAAB/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string AddCertificate_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEFkZENlcnRpZmljYXRlAQAEMQAvAQAEMQQxAAABAf////8BAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABTEALgBEBTEAAJYCAAAAAQAqAQEaAAAACwAAAENl" +
           "cnRpZmljYXRlAA//////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string RemoveCertificate_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAFJlbW92ZUNlcnRpZmljYXRlAQAGMQAvAQAGMQYxAAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABzEALgBEBzEAAJYCAAAAAQAqAQEZAAAACgAA" +
           "AFRodW1icHJpbnQADP////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAFRydXN0TGlzdFR5cGVJbnN0YW5jZQEA6jABAOow6jAAAP////8P" +
           "AAAAFWCJCgIAAAAAAAQAAABTaXplAQDrMAAuAETrMAAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAV3JpdGFibGUBAJoxAC4ARJoxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3Jp" +
           "dGFibGUBAJsxAC4ARJsxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAO4w" +
           "AC4ARO4wAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQDvMAAvAQA8Le8wAAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA8DAALgBE8DAAAJYBAAAAAQAqAQETAAAA" +
           "BAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBAPEwAC4ARPEwAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAPIwAC8BAD8t" +
           "8jAAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDzMAAuAETzMAAAlgEAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAABAAAAFJlYWQBAPQwAC8BAEEt9DAAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQD1MAAuAET1MAAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAqAQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkK" +
           "AgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA9jAALgBE9jAAAJYBAAAAAQAqAQETAAAABAAAAERhdGEA" +
           "D/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEA9zAA" +
           "LwEARC33MAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAPgwAC4ARPgwAACW" +
           "AgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQD5" +
           "MAAvAQBGLfkwAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA+jAALgBE+jAA" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPswAC4ARPswAACWAQAAAAEAKgEBFwAA" +
           "AAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAA" +
           "CwAAAFNldFBvc2l0aW9uAQD8MAAvAQBJLfwwAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEA/TAALgBE/TAAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEA" +
           "KgEBFwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAExhc3RVcGRhdGVUaW1lAQD+MAAuAET+MAAAAQAmAf////8BAf////8AAAAABGGCCgQA" +
           "AAAAAA0AAABPcGVuV2l0aE1hc2tzAQD/MAAvAQD/MP8wAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAADEALgBEADEAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQABMQAu" +
           "AEQBMQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQACMQAvAQACMQIxAAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoTEALgBEoTEAAJYBAAAAAQAqAQEZAAAACgAA" +
           "AEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAAMxAC4ARAMxAACWAQAAAAEAKgEBIwAAABQAAABBcHBseUNoYW5nZXNS" +
           "ZXF1aXJlZAAB/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAEFk" +
           "ZENlcnRpZmljYXRlAQAEMQAvAQAEMQQxAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEABTEALgBEBTEAAJYCAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAAAAABACoB" +
           "ASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAABEAAABSZW1vdmVDZXJ0aWZpY2F0ZQEABjEALwEABjEGMQAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAcxAC4ARAcxAACWAgAAAAEAKgEBGQAAAAoAAABU" +
           "aHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> LastUpdateTime
        {
            get
            {
                return m_lastUpdateTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastUpdateTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastUpdateTime = value;
            }
        }

        /// <remarks />
        public OpenWithMasksMethodState OpenWithMasks
        {
            get
            {
                return m_openWithMasksMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openWithMasksMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openWithMasksMethod = value;
            }
        }

        /// <remarks />
        public CloseAndUpdateMethodState CloseAndUpdate
        {
            get
            {
                return m_closeAndUpdateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeAndUpdateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeAndUpdateMethod = value;
            }
        }

        /// <remarks />
        public AddCertificateMethodState AddCertificate
        {
            get
            {
                return m_addCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCertificateMethod = value;
            }
        }

        /// <remarks />
        public RemoveCertificateMethodState RemoveCertificate
        {
            get
            {
                return m_removeCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeCertificateMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_lastUpdateTime != null)
            {
                children.Add(m_lastUpdateTime);
            }

            if (m_openWithMasksMethod != null)
            {
                children.Add(m_openWithMasksMethod);
            }

            if (m_closeAndUpdateMethod != null)
            {
                children.Add(m_closeAndUpdateMethod);
            }

            if (m_addCertificateMethod != null)
            {
                children.Add(m_addCertificateMethod);
            }

            if (m_removeCertificateMethod != null)
            {
                children.Add(m_removeCertificateMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LastUpdateTime:
                {
                    if (createOrReplace)
                    {
                        if (LastUpdateTime == null)
                        {
                            if (replacement == null)
                            {
                                LastUpdateTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastUpdateTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastUpdateTime;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenWithMasks:
                {
                    if (createOrReplace)
                    {
                        if (OpenWithMasks == null)
                        {
                            if (replacement == null)
                            {
                                OpenWithMasks = new OpenWithMasksMethodState(this);
                            }
                            else
                            {
                                OpenWithMasks = (OpenWithMasksMethodState)replacement;
                            }
                        }
                    }

                    instance = OpenWithMasks;
                    break;
                }

                case Opc.Ua.BrowseNames.CloseAndUpdate:
                {
                    if (createOrReplace)
                    {
                        if (CloseAndUpdate == null)
                        {
                            if (replacement == null)
                            {
                                CloseAndUpdate = new CloseAndUpdateMethodState(this);
                            }
                            else
                            {
                                CloseAndUpdate = (CloseAndUpdateMethodState)replacement;
                            }
                        }
                    }

                    instance = CloseAndUpdate;
                    break;
                }

                case Opc.Ua.BrowseNames.AddCertificate:
                {
                    if (createOrReplace)
                    {
                        if (AddCertificate == null)
                        {
                            if (replacement == null)
                            {
                                AddCertificate = new AddCertificateMethodState(this);
                            }
                            else
                            {
                                AddCertificate = (AddCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = AddCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveCertificate:
                {
                    if (createOrReplace)
                    {
                        if (RemoveCertificate == null)
                        {
                            if (replacement == null)
                            {
                                RemoveCertificate = new RemoveCertificateMethodState(this);
                            }
                            else
                            {
                                RemoveCertificate = (RemoveCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_lastUpdateTime;
        private OpenWithMasksMethodState m_openWithMasksMethod;
        private CloseAndUpdateMethodState m_closeAndUpdateMethod;
        private AddCertificateMethodState m_addCertificateMethod;
        private RemoveCertificateMethodState m_removeCertificateMethod;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupState)
    /// <summary>
    /// Stores an instance of the CertificateGroupType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateGroupState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAENlcnRpZmljYXRlR3JvdXBUeXBlSW5zdGFuY2UBAAsxAQALMQsx" +
           "AAD/////AgAAAARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAfNQAvAQDqMB81AAD/////DAAAABVgiQoC" +
           "AAAAAAAEAAAAU2l6ZQEAIDUALgBEIDUAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRh" +
           "YmxlAQAhNQAuAEQhNQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQAi" +
           "NQAuAEQiNQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAjNQAuAEQjNQAA" +
           "AAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAJTUALwEAPC0lNQAAAQH/////AgAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACY1AC4ARCY1AACWAQAAAAEAKgEBEwAAAAQAAABNb2Rl" +
           "AAP/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQAnNQAuAEQnNQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAoNQAvAQA/LSg1AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAKTUALgBEKTUAAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAA" +
           "AAQAAABSZWFkAQAqNQAvAQBBLSo1AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAKzUALgBEKzUAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAA" +
           "AAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBACw1AC4ARCw1AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBAC01AC8BAEQtLTUA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAuNQAuAEQuNQAAlgIAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEALzUALwEARi0v" +
           "NQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADA1AC4ARDA1AACWAQAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAxNQAuAEQxNQAAlgEAAAABACoBARcAAAAIAAAAUG9z" +
           "aXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQ" +
           "b3NpdGlvbgEAMjUALwEASS0yNQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "ADM1AC4ARDM1AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAI" +
           "AAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABMYXN0VXBkYXRlVGltZQEANDUALgBENDUAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAA" +
           "T3BlbldpdGhNYXNrcwEANTUALwEA/zA1NQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBADY1AC4ARDY1AACWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEANzUALgBENzUAAJYB" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAF2CJCgIAAAAAABAAAABDZXJ0aWZpY2F0ZVR5cGVzAQA/NQAuAEQ/NQAAABEBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TrustListState TrustList
        {
            get
            {
                return m_trustList;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustList, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustList = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> CertificateTypes
        {
            get
            {
                return m_certificateTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateTypes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_trustList != null)
            {
                children.Add(m_trustList);
            }

            if (m_certificateTypes != null)
            {
                children.Add(m_certificateTypes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TrustList:
                {
                    if (createOrReplace)
                    {
                        if (TrustList == null)
                        {
                            if (replacement == null)
                            {
                                TrustList = new TrustListState(this);
                            }
                            else
                            {
                                TrustList = (TrustListState)replacement;
                            }
                        }
                    }

                    instance = TrustList;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateTypes:
                {
                    if (createOrReplace)
                    {
                        if (CertificateTypes == null)
                        {
                            if (replacement == null)
                            {
                                CertificateTypes = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                CertificateTypes = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = CertificateTypes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TrustListState m_trustList;
        private PropertyState<NodeId[]> m_certificateTypes;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupFolderState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupFolderState)
    /// <summary>
    /// Stores an instance of the CertificateGroupFolderType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupFolderState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateGroupFolderState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (DefaultHttpsGroup != null)
            {
                DefaultHttpsGroup.Initialize(context, DefaultHttpsGroup_InitializationString);
            }

            if (DefaultUserTokenGroup != null)
            {
                DefaultUserTokenGroup.Initialize(context, DefaultUserTokenGroup_InitializationString);
            }
        }

        #region Initialization String
        private const string DefaultHttpsGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAERlZmF1bHRIdHRwc0dyb3VwAQAYNgAvAQALMRg2AAD/////AgAA" +
           "AARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAZNgAvAQDqMBk2AAD/////DAAAABVgiQoCAAAAAAAEAAAA" +
           "U2l6ZQEAGjYALgBEGjYAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxlAQAbNgAu" +
           "AEQbNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQAcNgAuAEQcNgAA" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAdNgAuAEQdNgAAAAX/////AQH/" +
           "////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAHzYALwEAPC0fNgAAAQH/////AgAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBACA2AC4ARCA2AACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAh" +
           "NgAuAEQhNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAiNgAvAQA/LSI2AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIzYALgBEIzYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVI" +
           "YW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFk" +
           "AQAkNgAvAQBBLSQ2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJTYALgBE" +
           "JTYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5n" +
           "dGgABv////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBACY2AC4ARCY2AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBACc2AC8BAEQtJzYAAAEB/////wEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAoNgAuAEQoNgAAlgIAAAABACoBARkAAAAKAAAA" +
           "RmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEAKTYALwEARi0pNgAAAQH/////" +
           "AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACo2AC4ARCo2AACWAQAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQArNgAuAEQrNgAAlgEAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3NpdGlvbgEA" +
           "LDYALwEASS0sNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAC02AC4ARC02" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRp" +
           "b24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0VXBk" +
           "YXRlVGltZQEALjYALgBELjYAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAAT3BlbldpdGhN" +
           "YXNrcwEALzYALwEA/zAvNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADA2" +
           "AC4ARDA2AACWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB" +
           "/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAMTYALgBEMTYAAJYBAAAAAQAqAQEZ" +
           "AAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIA" +
           "AAAAABAAAABDZXJ0aWZpY2F0ZVR5cGVzAQA5NgAuAEQ5NgAAABEBAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string DefaultUserTokenGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAFQAAAERlZmF1bHRVc2VyVG9rZW5Hcm91cAEAOjYALwEACzE6NgAA////" +
           "/wIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAOzYALwEA6jA7NgAA/////wwAAAAVYIkKAgAAAAAA" +
           "BAAAAFNpemUBADw2AC4ARDw2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEA" +
           "PTYALgBEPTYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAPjYALgBE" +
           "PjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAPzYALgBEPzYAAAAF////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAEE2AC8BADwtQTYAAAEB/////wIAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQBCNgAuAERCNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwEAQzYALgBEQzYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEARDYALwEAPy1ENgAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEU2AC4AREU2AACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAA" +
           "UmVhZAEARjYALwEAQS1GNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEc2" +
           "AC4AREc2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAA" +
           "TGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQBINgAuAERINgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQBJNgAvAQBELUk2AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEASjYALgBESjYAAJYCAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEs2AC8BAEYtSzYAAAEB" +
           "/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNgAuAERMNgAAlgEAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEATTYALgBETTYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9u" +
           "AAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRp" +
           "b24BAE42AC8BAEktTjYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBPNgAu" +
           "AERPNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBv" +
           "c2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFz" +
           "dFVwZGF0ZVRpbWUBAFA2AC4ARFA2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5X" +
           "aXRoTWFza3MBAFE2AC8BAP8wUTYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQBSNgAuAERSNgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQAAAAAA" +
           "AAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFM2AC4ARFM2AACWAQAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdg" +
           "iQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBlcwEAWzYALgBEWzYAAAARAQAAAAEAAAAAAAAAAQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAENlcnRpZmljYXRlR3JvdXBGb2xkZXJUeXBlSW5zdGFuY2UBAPU1" +
           "AQD1NfU1AAD/////AwAAAARggAoBAAAAAAAXAAAARGVmYXVsdEFwcGxpY2F0aW9uR3JvdXABAPY1AC8B" +
           "AAsx9jUAAP////8CAAAABGCACgEAAAAAAAkAAABUcnVzdExpc3QBAPc1AC8BAOow9zUAAP////8MAAAA" +
           "FWCJCgIAAAAAAAQAAABTaXplAQD4NQAuAET4NQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "V3JpdGFibGUBAPk1AC4ARPk1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFi" +
           "bGUBAPo1AC4ARPo1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAPs1AC4A" +
           "RPs1AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQD9NQAvAQA8Lf01AAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/jUALgBE/jUAAJYBAAAAAQAqAQETAAAABAAA" +
           "AE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBAP81AC4ARP81AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAA" +
           "AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAAA2AC8BAD8tADYA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQABNgAuAEQBNgAAlgEAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAABAAAAFJlYWQBAAI2AC8BAEEtAjYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQADNgAuAEQDNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAq" +
           "AQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEABDYALgBEBDYAAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD///" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEABTYALwEA" +
           "RC0FNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAY2AC4ARAY2AACWAgAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQAHNgAv" +
           "AQBGLQc2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEACDYALgBECDYAAJYB" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAAk2AC4ARAk2AACWAQAAAAEAKgEBFwAAAAgA" +
           "AABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAA" +
           "AFNldFBvc2l0aW9uAQAKNgAvAQBJLQo2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEACzYALgBECzYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEB" +
           "FwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAExhc3RVcGRhdGVUaW1lAQAMNgAuAEQMNgAAAQAmAf////8BAf////8AAAAABGGCCgQAAAAA" +
           "AA0AAABPcGVuV2l0aE1hc2tzAQANNgAvAQD/MA02AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEADjYALgBEDjYAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAAAAABACgB" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAPNgAuAEQP" +
           "NgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB" +
           "/////wAAAAAXYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBABc2AC4ARBc2AAAAEQEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAEYIAKAQAAAAAAEQAAAERlZmF1bHRIdHRwc0dyb3VwAQAYNgAvAQALMRg2AAD/" +
           "////AgAAAARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAZNgAvAQDqMBk2AAD/////DAAAABVgiQoCAAAA" +
           "AAAEAAAAU2l6ZQEAGjYALgBEGjYAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxl" +
           "AQAbNgAuAEQbNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQAcNgAu" +
           "AEQcNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAdNgAuAEQdNgAAAAX/" +
           "////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAHzYALwEAPC0fNgAAAQH/////AgAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACA2AC4ARCA2AACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/" +
           "////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1l" +
           "bnRzAQAhNgAuAEQhNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAiNgAvAQA/LSI2AAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIzYALgBEIzYAAJYBAAAAAQAqAQEZAAAACgAA" +
           "AEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAQA" +
           "AABSZWFkAQAkNgAvAQBBLSQ2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "JTYALgBEJTYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYA" +
           "AABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBACY2AC4ARCY2AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAAB" +
           "ACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBACc2AC8BAEQtJzYAAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAoNgAuAEQoNgAAlgIAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEAKTYALwEARi0pNgAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACo2AC4ARCo2AACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQArNgAuAEQrNgAAlgEAAAABACoBARcAAAAIAAAAUG9zaXRp" +
           "b24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3Np" +
           "dGlvbgEALDYALwEASS0sNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAC02" +
           "AC4ARC02AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAA" +
           "UG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA4AAABM" +
           "YXN0VXBkYXRlVGltZQEALjYALgBELjYAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAAT3Bl" +
           "bldpdGhNYXNrcwEALzYALwEA/zAvNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBADA2AC4ARDA2AACWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAMTYALgBEMTYAAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "F2CJCgIAAAAAABAAAABDZXJ0aWZpY2F0ZVR5cGVzAQA5NgAuAEQ5NgAAABEBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAABGCACgEAAAAAABUAAABEZWZhdWx0VXNlclRva2VuR3JvdXABADo2AC8BAAsxOjYAAP////8C" +
           "AAAABGCACgEAAAAAAAkAAABUcnVzdExpc3QBADs2AC8BAOowOzYAAP////8MAAAAFWCJCgIAAAAAAAQA" +
           "AABTaXplAQA8NgAuAEQ8NgAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3JpdGFibGUBAD02" +
           "AC4ARD02AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUBAD42AC4ARD42" +
           "AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAD82AC4ARD82AAAABf////8B" +
           "Af////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBBNgAvAQA8LUE2AAABAf////8CAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAQjYALgBEQjYAAJYBAAAAAQAqAQETAAAABAAAAE1vZGUAA/////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AEM2AC4AREM2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAEQ2AC8BAD8tRDYAAAEB/////wEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBFNgAuAERFNgAAlgEAAAABACoBARkAAAAKAAAARmls" +
           "ZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJl" +
           "YWQBAEY2AC8BAEEtRjYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBHNgAu" +
           "AERHNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExl" +
           "bmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEASDYALgBESDYAAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEASTYALwEARC1JNgAAAQH/////" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEo2AC4AREo2AACWAgAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQBLNgAvAQBGLUs2AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDYALgBETDYAAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAE02AC4ARE02AACWAQAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBvc2l0aW9u" +
           "AQBONgAvAQBJLU42AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATzYALgBE" +
           "TzYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAAAAgAAABQb3Np" +
           "dGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RV" +
           "cGRhdGVUaW1lAQBQNgAuAERQNgAAAQAmAf////8BAf////8AAAAABGGCCgQAAAAAAA0AAABPcGVuV2l0" +
           "aE1hc2tzAQBRNgAvAQD/MFE2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "UjYALgBEUjYAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBTNgAuAERTNgAAlgEAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkK" +
           "AgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBAFs2AC4ARFs2AAAAEQEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupState DefaultApplicationGroup
        {
            get
            {
                return m_defaultApplicationGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultApplicationGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultApplicationGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultHttpsGroup
        {
            get
            {
                return m_defaultHttpsGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultHttpsGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultHttpsGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultUserTokenGroup
        {
            get
            {
                return m_defaultUserTokenGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultUserTokenGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultUserTokenGroup = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_defaultApplicationGroup != null)
            {
                children.Add(m_defaultApplicationGroup);
            }

            if (m_defaultHttpsGroup != null)
            {
                children.Add(m_defaultHttpsGroup);
            }

            if (m_defaultUserTokenGroup != null)
            {
                children.Add(m_defaultUserTokenGroup);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DefaultApplicationGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultApplicationGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultApplicationGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultApplicationGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultApplicationGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultHttpsGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultHttpsGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultHttpsGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultHttpsGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultHttpsGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultUserTokenGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultUserTokenGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultUserTokenGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultUserTokenGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultUserTokenGroup;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupState m_defaultApplicationGroup;
        private CertificateGroupState m_defaultHttpsGroup;
        private CertificateGroupState m_defaultUserTokenGroup;
        #endregion
    }
    #endif
    #endregion

    #region CertificateState Class
    #if (!OPCUA_EXCLUDE_CertificateState)
    /// <summary>
    /// Stores an instance of the CertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAENlcnRpZmljYXRlVHlwZUluc3RhbmNlAQAMMQEADDEMMQAA////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_ApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the ApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ApplicationCertificateState : CertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA0x" +
           "AQANMQ0xAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region HttpsCertificateState Class
    #if (!OPCUA_EXCLUDE_HttpsCertificateState)
    /// <summary>
    /// Stores an instance of the HttpsCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HttpsCertificateState : CertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HttpsCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HttpsCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEh0dHBzQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA4xAQAOMQ4x" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaMinApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaMinApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the RsaMinApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaMinApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RsaMinApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaMinApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAFJzYU1pbkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFu" +
           "Y2UBAA8xAQAPMQ8xAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaSha256ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaSha256ApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the RsaSha256ApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaSha256ApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RsaSha256ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaSha256ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAFJzYVNoYTI1NkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5z" +
           "dGFuY2UBABAxAQAQMRAxAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TrustListUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_TrustListUpdatedAuditEventState)
    /// <summary>
    /// Stores an instance of the TrustListUpdatedAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListUpdatedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TrustListUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAFRydXN0TGlzdFVwZGF0ZWRBdWRpdEV2ZW50VHlwZUluc3RhbmNl" +
           "AQARMQEAETERMQAA/////xAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBABIxAC4ARBIxAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBABMxAC4ARBMxAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQAUMQAuAEQUMQAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEAFTEALgBEFTEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBABYxAC4ARBYxAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAX" +
           "MQAuAEQXMQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBABgxAC4ARBgx" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBABkxAC4ARBkxAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAGjEALgBEGjEAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAGzEALgBEGzEAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQAcMQAuAEQcMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAB0xAC4ARB0xAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAB4xAC4ARB4xAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAB8xAC4ARB8xAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAIDEALgBE" +
           "IDEAAAAR/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAhMQAuAEQhMQAA" +
           "ABgBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region UpdateCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_UpdateCertificateMethodState)
    /// <summary>
    /// Stores an instance of the UpdateCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UpdateCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public UpdateCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new UpdateCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFVwZGF0ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEAIjEALwEAIjEi" +
           "MQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACMxAC4ARCMxAACWBgAAAAEA" +
           "KgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0aWZp" +
           "Y2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAAAAABACoB" +
           "ASUAAAASAAAASXNzdWVyQ2VydGlmaWNhdGVzAA8BAAAAAQAAAAAAAAAAAQAqAQEfAAAAEAAAAFByaXZh" +
           "dGVLZXlGb3JtYXQADP////8AAAAAAAEAKgEBGQAAAAoAAABQcml2YXRlS2V5AA//////AAAAAAABACgB" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAkMQAuAEQk" +
           "MQAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public UpdateCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            byte[] certificate = (byte[])_inputArguments[2];
            byte[][] issuerCertificates = (byte[][])_inputArguments[3];
            string privateKeyFormat = (string)_inputArguments[4];
            byte[] privateKey = (byte[])_inputArguments[5];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    certificate,
                    issuerCertificates,
                    privateKeyFormat,
                    privateKey,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult UpdateCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        byte[] certificate,
        byte[][] issuerCertificates,
        string privateKeyFormat,
        byte[] privateKey,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region CreateSigningRequestMethodState Class
    #if (!OPCUA_EXCLUDE_CreateSigningRequestMethodState)
    /// <summary>
    /// Stores an instance of the CreateSigningRequestMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateSigningRequestMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateSigningRequestMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateSigningRequestMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAENyZWF0ZVNpZ25pbmdSZXF1ZXN0TWV0aG9kVHlwZQEAxTEALwEA" +
           "xTHFMQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMYxAC4ARMYxAACWBQAA" +
           "AAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0" +
           "aWZpY2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAFN1YmplY3ROYW1lAAz/////AAAAAAAB" +
           "ACoBASMAAAAUAAAAUmVnZW5lcmF0ZVByaXZhdGVLZXkAAf////8AAAAAAAEAKgEBFAAAAAUAAABOb25j" +
           "ZQAP/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAxzEALgBExzEAAJYBAAAAAQAqAQEhAAAAEgAAAENlcnRpZmljYXRlUmVxdWVzdAAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateSigningRequestMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            string subjectName = (string)_inputArguments[2];
            bool regeneratePrivateKey = (bool)_inputArguments[3];
            byte[] nonce = (byte[])_inputArguments[4];

            byte[] certificateRequest = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    subjectName,
                    regeneratePrivateKey,
                    nonce,
                    ref certificateRequest);
            }

            _outputArguments[0] = certificateRequest;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateSigningRequestMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        string subjectName,
        bool regeneratePrivateKey,
        byte[] nonce,
        ref byte[] certificateRequest);
    #endif
    #endregion

    #region GetRejectedListMethodState Class
    #if (!OPCUA_EXCLUDE_GetRejectedListMethodState)
    /// <summary>
    /// Stores an instance of the GetRejectedListMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetRejectedListMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetRejectedListMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetRejectedListMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAEdldFJlamVjdGVkTGlzdE1ldGhvZFR5cGUBAOUxAC8BAOUx5TEA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA5jEALgBE5jEAAJYBAAAAAQAq" +
           "AQEfAAAADAAAAENlcnRpZmljYXRlcwAPAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAAAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetRejectedListMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[][] certificates = (byte[][])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref certificates);
            }

            _outputArguments[0] = certificates;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetRejectedListMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref byte[][] certificates);
    #endif
    #endregion

    #region ServerConfigurationState Class
    #if (!OPCUA_EXCLUDE_ServerConfigurationState)
    /// <summary>
    /// Stores an instance of the ServerConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNlcnZlckNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBACUxAQAl" +
           "MSUxAAD/////CQAAAARggAoBAAAAAAARAAAAQ2VydGlmaWNhdGVHcm91cHMBAH42AC8BAPU1fjYAAP//" +
           "//8BAAAABGCACgEAAAAAABcAAABEZWZhdWx0QXBwbGljYXRpb25Hcm91cAEAfzYALwEACzF/NgAA////" +
           "/wIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAgDYALwEA6jCANgAA/////wwAAAAVYIkKAgAAAAAA" +
           "BAAAAFNpemUBAIE2AC4ARIE2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEA" +
           "gjYALgBEgjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAgzYALgBE" +
           "gzYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAhDYALgBEhDYAAAAF////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAIY2AC8BADwthjYAAAEB/////wIAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQCHNgAuAESHNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwEAiDYALgBEiDYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAiTYALwEAPy2JNgAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIo2AC4ARIo2AACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAA" +
           "UmVhZAEAizYALwEAQS2LNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIw2" +
           "AC4ARIw2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAA" +
           "TGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQCNNgAuAESNNgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQCONgAvAQBELY42AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAjzYALgBEjzYAAJYCAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAJA2AC8BAEYtkDYAAAEB" +
           "/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCRNgAuAESRNgAAlgEAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAkjYALgBEkjYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9u" +
           "AAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRp" +
           "b24BAJM2AC8BAEktkzYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCUNgAu" +
           "AESUNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBv" +
           "c2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFz" +
           "dFVwZGF0ZVRpbWUBAJU2AC4ARJU2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5X" +
           "aXRoTWFza3MBAJY2AC8BAP8wljYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQCXNgAuAESXNgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQAAAAAA" +
           "AAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAJg2AC4ARJg2AACWAQAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdg" +
           "iQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBlcwEAoDYALgBEoDYAAAARAQAAAAEAAAAAAAAAAQH/////" +
           "AAAAABdgiQoCAAAAAAASAAAAU2VydmVyQ2FwYWJpbGl0aWVzAQCkMQAuAESkMQAAAAwBAAAAAQAAAAAA" +
           "AAABAf////8AAAAAF2CJCgIAAAAAABoAAABTdXBwb3J0ZWRQcml2YXRlS2V5Rm9ybWF0cwEAJzEALgBE" +
           "JzEAAAAMAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAATWF4VHJ1c3RMaXN0U2l6ZQEA" +
           "KDEALgBEKDEAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAE11bHRpY2FzdERuc0VuYWJsZWQB" +
           "ACkxAC4ARCkxAAAAAf////8BAf////8AAAAABGGCCgQAAAAAABEAAABVcGRhdGVDZXJ0aWZpY2F0ZQEA" +
           "SDEALwEASDFIMQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEkxAC4AREkx" +
           "AACWBgAAAAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEA" +
           "AABDZXJ0aWZpY2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////" +
           "AAAAAAABACoBASUAAAASAAAASXNzdWVyQ2VydGlmaWNhdGVzAA8BAAAAAQAAAAAAAAAAAQAqAQEfAAAA" +
           "EAAAAFByaXZhdGVLZXlGb3JtYXQADP////8AAAAAAAEAKgEBGQAAAAoAAABQcml2YXRlS2V5AA//////" +
           "AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRz" +
           "AQBKMQAuAERKMQAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAABGGCCgQAAAAAAAwAAABBcHBseUNoYW5nZXMBAL4xAC8B" +
           "AL4xvjEAAAEB/////wAAAAAEYYIKBAAAAAAAFAAAAENyZWF0ZVNpZ25pbmdSZXF1ZXN0AQC7MQAvAQC7" +
           "MbsxAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAvDEALgBEvDEAAJYFAAAA" +
           "AQAqAQEhAAAAEgAAAENlcnRpZmljYXRlR3JvdXBJZAAR/////wAAAAAAAQAqAQEgAAAAEQAAAENlcnRp" +
           "ZmljYXRlVHlwZUlkABH/////AAAAAAABACoBARoAAAALAAAAU3ViamVjdE5hbWUADP////8AAAAAAAEA" +
           "KgEBIwAAABQAAABSZWdlbmVyYXRlUHJpdmF0ZUtleQAB/////wAAAAAAAQAqAQEUAAAABQAAAE5vbmNl" +
           "AA//////AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQC9MQAuAES9MQAAlgEAAAABACoBASEAAAASAAAAQ2VydGlmaWNhdGVSZXF1ZXN0AA//////" +
           "AAAAAAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAPAAAAR2V0UmVqZWN0ZWRMaXN0" +
           "AQDnMQAvAQDnMecxAAABAf////8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOgxAC4A" +
           "ROgxAACWAQAAAAEAKgEBHwAAAAwAAABDZXJ0aWZpY2F0ZXMADwEAAAABAAAAAAAAAAABACgBAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupFolderState CertificateGroups
        {
            get
            {
                return m_certificateGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> SupportedPrivateKeyFormats
        {
            get
            {
                return m_supportedPrivateKeyFormats;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportedPrivateKeyFormats, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportedPrivateKeyFormats = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxTrustListSize
        {
            get
            {
                return m_maxTrustListSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTrustListSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTrustListSize = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> MulticastDnsEnabled
        {
            get
            {
                return m_multicastDnsEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_multicastDnsEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_multicastDnsEnabled = value;
            }
        }

        /// <remarks />
        public UpdateCertificateMethodState UpdateCertificate
        {
            get
            {
                return m_updateCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateCertificateMethod = value;
            }
        }

        /// <remarks />
        public MethodState ApplyChanges
        {
            get
            {
                return m_applyChangesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applyChangesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applyChangesMethod = value;
            }
        }

        /// <remarks />
        public CreateSigningRequestMethodState CreateSigningRequest
        {
            get
            {
                return m_createSigningRequestMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSigningRequestMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSigningRequestMethod = value;
            }
        }

        /// <remarks />
        public GetRejectedListMethodState GetRejectedList
        {
            get
            {
                return m_getRejectedListMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getRejectedListMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getRejectedListMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroups != null)
            {
                children.Add(m_certificateGroups);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_supportedPrivateKeyFormats != null)
            {
                children.Add(m_supportedPrivateKeyFormats);
            }

            if (m_maxTrustListSize != null)
            {
                children.Add(m_maxTrustListSize);
            }

            if (m_multicastDnsEnabled != null)
            {
                children.Add(m_multicastDnsEnabled);
            }

            if (m_updateCertificateMethod != null)
            {
                children.Add(m_updateCertificateMethod);
            }

            if (m_applyChangesMethod != null)
            {
                children.Add(m_applyChangesMethod);
            }

            if (m_createSigningRequestMethod != null)
            {
                children.Add(m_createSigningRequestMethod);
            }

            if (m_getRejectedListMethod != null)
            {
                children.Add(m_getRejectedListMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroups:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroups == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroups = new CertificateGroupFolderState(this);
                            }
                            else
                            {
                                CertificateGroups = (CertificateGroupFolderState)replacement;
                            }
                        }
                    }

                    instance = CertificateGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerCapabilities = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportedPrivateKeyFormats:
                {
                    if (createOrReplace)
                    {
                        if (SupportedPrivateKeyFormats == null)
                        {
                            if (replacement == null)
                            {
                                SupportedPrivateKeyFormats = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                SupportedPrivateKeyFormats = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = SupportedPrivateKeyFormats;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTrustListSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxTrustListSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxTrustListSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxTrustListSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxTrustListSize;
                    break;
                }

                case Opc.Ua.BrowseNames.MulticastDnsEnabled:
                {
                    if (createOrReplace)
                    {
                        if (MulticastDnsEnabled == null)
                        {
                            if (replacement == null)
                            {
                                MulticastDnsEnabled = new PropertyState<bool>(this);
                            }
                            else
                            {
                                MulticastDnsEnabled = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = MulticastDnsEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateCertificate:
                {
                    if (createOrReplace)
                    {
                        if (UpdateCertificate == null)
                        {
                            if (replacement == null)
                            {
                                UpdateCertificate = new UpdateCertificateMethodState(this);
                            }
                            else
                            {
                                UpdateCertificate = (UpdateCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = UpdateCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplyChanges:
                {
                    if (createOrReplace)
                    {
                        if (ApplyChanges == null)
                        {
                            if (replacement == null)
                            {
                                ApplyChanges = new MethodState(this);
                            }
                            else
                            {
                                ApplyChanges = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ApplyChanges;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSigningRequest:
                {
                    if (createOrReplace)
                    {
                        if (CreateSigningRequest == null)
                        {
                            if (replacement == null)
                            {
                                CreateSigningRequest = new CreateSigningRequestMethodState(this);
                            }
                            else
                            {
                                CreateSigningRequest = (CreateSigningRequestMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateSigningRequest;
                    break;
                }

                case Opc.Ua.BrowseNames.GetRejectedList:
                {
                    if (createOrReplace)
                    {
                        if (GetRejectedList == null)
                        {
                            if (replacement == null)
                            {
                                GetRejectedList = new GetRejectedListMethodState(this);
                            }
                            else
                            {
                                GetRejectedList = (GetRejectedListMethodState)replacement;
                            }
                        }
                    }

                    instance = GetRejectedList;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupFolderState m_certificateGroups;
        private PropertyState<string[]> m_serverCapabilities;
        private PropertyState<string[]> m_supportedPrivateKeyFormats;
        private PropertyState<uint> m_maxTrustListSize;
        private PropertyState<bool> m_multicastDnsEnabled;
        private UpdateCertificateMethodState m_updateCertificateMethod;
        private MethodState m_applyChangesMethod;
        private CreateSigningRequestMethodState m_createSigningRequestMethod;
        private GetRejectedListMethodState m_getRejectedListMethod;
        #endregion
    }
    #endif
    #endregion

    #region CertificateUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_CertificateUpdatedAuditEventState)
    /// <summary>
    /// Stores an instance of the CertificateUpdatedAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateUpdatedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAENlcnRpZmljYXRlVXBkYXRlZEF1ZGl0RXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAEwxAQBMMUwxAAD/////EgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEATTEALgBETTEAAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEATjEALgBETjEAAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAE8xAC4ARE8xAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQBQMQAuAERQMQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEAUTEALgBEUTEAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "AFIxAC4ARFIxAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAUzEALgBE" +
           "UzEAAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAVDEALgBEVDEAAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBVMQAuAERVMQAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQBWMQAuAERWMQAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBAFcxAC4ARFcxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAWDEALgBEWDEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAWTEALgBEWTEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEAWjEALgBEWjEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQBbMQAu" +
           "AERbMQAAABH/////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFwxAC4ARFwx" +
           "AAAAGAEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlR3JvdXABAKc1" +
           "AC4ARKc1AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABDZXJ0aWZpY2F0ZVR5cGUBAKg1AC4A" +
           "RKg1AAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CertificateGroup
        {
            get
            {
                return m_certificateGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroup = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroup != null)
            {
                children.Add(m_certificateGroup);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroup:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroup == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroup = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateGroup = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_certificateGroup;
        private PropertyState<NodeId> m_certificateType;
        #endregion
    }
    #endif
    #endregion

    #region AggregateConfigurationState Class
    #if (!OPCUA_EXCLUDE_AggregateConfigurationState)
    /// <summary>
    /// Stores an instance of the AggregateConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AggregateConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBALMr" +
           "AQCzK7MrAAD/////BAAAABVgiQoCAAAAAAATAAAAVHJlYXRVbmNlcnRhaW5Bc0JhZAEAtCsALgBEtCsA" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFBlcmNlbnREYXRhQmFkAQC1KwAuAES1KwAAAAP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAPAAAAUGVyY2VudERhdGFHb29kAQC2KwAuAES2KwAAAAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAWAAAAVXNlU2xvcGVkRXh0cmFwb2xhdGlvbgEAtysALgBEtysAAAAB" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> TreatUncertainAsBad
        {
            get
            {
                return m_treatUncertainAsBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_treatUncertainAsBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_treatUncertainAsBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataBad
        {
            get
            {
                return m_percentDataBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataGood
        {
            get
            {
                return m_percentDataGood;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataGood, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataGood = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UseSlopedExtrapolation
        {
            get
            {
                return m_useSlopedExtrapolation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_useSlopedExtrapolation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_useSlopedExtrapolation = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_treatUncertainAsBad != null)
            {
                children.Add(m_treatUncertainAsBad);
            }

            if (m_percentDataBad != null)
            {
                children.Add(m_percentDataBad);
            }

            if (m_percentDataGood != null)
            {
                children.Add(m_percentDataGood);
            }

            if (m_useSlopedExtrapolation != null)
            {
                children.Add(m_useSlopedExtrapolation);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TreatUncertainAsBad:
                {
                    if (createOrReplace)
                    {
                        if (TreatUncertainAsBad == null)
                        {
                            if (replacement == null)
                            {
                                TreatUncertainAsBad = new PropertyState<bool>(this);
                            }
                            else
                            {
                                TreatUncertainAsBad = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = TreatUncertainAsBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataBad:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataBad == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataBad = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataBad = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataGood:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataGood == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataGood = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataGood = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataGood;
                    break;
                }

                case Opc.Ua.BrowseNames.UseSlopedExtrapolation:
                {
                    if (createOrReplace)
                    {
                        if (UseSlopedExtrapolation == null)
                        {
                            if (replacement == null)
                            {
                                UseSlopedExtrapolation = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UseSlopedExtrapolation = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UseSlopedExtrapolation;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_treatUncertainAsBad;
        private PropertyState<byte> m_percentDataBad;
        private PropertyState<byte> m_percentDataGood;
        private PropertyState<bool> m_useSlopedExtrapolation;
        #endregion
    }
    #endif
    #endregion
}
